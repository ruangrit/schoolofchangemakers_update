<?php
include("includes/password.inc");
include("includes/sendMessageService.php");

require_once 'changemakers_helper.inc';
require_once 'changemakers_comment.inc';
// require_once 'sendMessageService.php';

function changemakers_menu(){
  $items['changemakers/register'] = array(
    'title' => 'User Register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('changemakers_test'),
    'access callback' => 'changemakers_register_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['changemakers/logout'] = array(
    'title' => 'User Logout',
    'description' => 'User Logout',
    'page callback' => 'changemakers_logout_destroy',
    'access arguments' => array('general'),
  );
  $items['changemakers/test'] = array(
    'title' => 'User Form Save File',
    'description' => 'Form upload file',
    'page callback' => 'changemakers_test',
    'access arguments' => array(''),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/testcm'] = array(
    'title' => 'User Form Save File',
    'description' => 'Form upload file',
    'page callback' => 'changemakers_test_community',
    'access arguments' => array(''),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/testpj'] = array(
      'title' => 'User Form Save File',
      'description' => 'Form upload file',
      'page callback' => 'changemakers_test_project',
      'access arguments' => array(''),
      //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/testcp'] = array(
    'title' => 'User Form Save File',
    'description' => 'Form upload file',
    'page callback' => 'changemakers_test_campaign',
    'access arguments' => array(''),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/testuser'] = array(
    'title' => 'User Form Save File',
    'description' => 'Form upload file',
    'page callback' => 'changemakers_test_user',
    'access arguments' => array(''),
    //'access callback' => 'changemakers_test_form',
  );
   $items['changemakers/journal'] = array(
    'title' => 'User Form Save File',
    'description' => 'Form upload file',
    'page callback' => 'changemakers_test_journal',
    'access arguments' => array(''),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/confirm'] = array(
    'title' => 'User confirm activekey',
    'description' => 'User confirm activekey from email',
    'page callback' => 'changemakers_confirm_register',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/join_campaign'] = array(
    'title' => 'Project Join campaign',
    'description' => 'Project join campaign',
    'page callback' => 'changemakers_join_campaign',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/funding_campaign/%/%/%'] = array(
    'title' => 'Funding campaign',
    'description' => 'Funding campaign',
    'page callback' => 'changemakers_update_funding_campaign',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );

  $items['changemakers/download-event-file'] = array(
    'title' => 'User join event download',
    'description' => 'User join event download file',
    'page callback' => 'changemakers_event_download_file',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );

  
  $items['changemakers/save_otp'] = array(
    'title' => 'Svae otp',
    'description' => 'Ramdom otp',
    'page callback' => 'changemakers_save_otp',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/project_journal'] = array(
    'title' => 'Project in journal',
    'description' => 'Project in journal',
    'page callback' => 'changemakers_helper_project_journal',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/journal_problem/%'] = array(
    'title' => 'Project in journal',
    'description' => 'Project in journal',
    'page callback' => 'changemakers_helper_journal_problem',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/journal_target/%'] = array(
    'title' => 'Project in journal',
    'description' => 'Project in journal',
    'page callback' => 'changemakers_journal_target',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/verified-otp'] = array(
    'title' => 'verified otp',
    'description' => 'verified otp from user',
    'page callback' => 'changemakers_verified_member',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/project_delete_file'] = array(
    'title' => 'delete file',
    'description' => 'project owner delete file',
    'page callback' => 'changemakers_project_delete_file',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/following-project'] = array(
    'title' => 'uesr following-project',
    'description' => 'uesr following-project',
    'page callback' => 'changemakers_user_following_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/edit-fund/%/%'] = array(
    'title' => 'Edit Fund',
    'description' => 'Edit fund',
    'page callback' => 'changemakers_project_edit_fund',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/unfollowing-project'] = array(
    'title' => 'uesr unfollowing-project',
    'description' => 'uesr unfollowing-project',
    'page callback' => 'changemakers_user_unfollowing_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/approved-project'] = array(
    'title' => 'owner approved-project',
    'description' => 'owner approved-project',
    'page callback' => 'changemakers_approve_join_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/leave-project'] = array(
    'title' => 'user leave-project',
    'description' => 'user leave-project',
    'page callback' => 'changemakers_leave_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/update-profile'] = array(
    'title' => 'user update profile',
    'description' => 'user update profile',
    'page callback' => 'changemakers_update_profile',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/join-event'] = array(
    'title' => 'user join event',
    'description' => 'user join event',
    'page callback' => 'changemakers_join_event',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/join-project'] = array(
    'title' => 'user join project',
    'description' => 'user join project',
    'page callback' => 'changemakers_join_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/delete-data-request-project'] = array(
    'title' => 'delete user join project',
    'description' => 'delete user join project',
    'page callback' => 'changemakers_delete_data_request_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/check_login'] = array(
    'title' => 'user check_login',
    'description' => 'user check_login',
    'page callback' => 'changemakers_check_login',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/check_forgot'] = array(
    'title' => 'user check_forgot',
    'description' => 'user check_forgot',
    'page callback' => 'changemakers_check_forgot',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/delete_fund'] = array(
    'title' => 'user delete_fund',
    'description' => 'user delete_fund',
    'page callback' => 'changemakers_delete_fund',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/update_fund'] = array(
    'title' => 'user update_fund',
    'description' => 'user update_fund',
    'page callback' => 'changemakers_update_fund',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/like_comment/%/%'] = array(
    'title' => 'user like_comment',
    'description' => 'user like_comment',
    'page callback' => 'changemakers_like_comment',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/project_view/%'] = array(
    'title' => 'Project view',
    'description' => 'project view',
    'page callback' => 'changemakers_project_view',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/user-join-event/%/%'] = array(
    'title' => 'join event',
    'description' => 'join event',
    'page callback' => 'changemakers_helper_join_event',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/check_pass_old'] = array(
    'title' => 'check password',
    'description' => 'user update password',
    'page callback' => 'API_changemakers_check_password_old',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/infiniteload/%/%'] = array(
    'title' => 'infiniteload comment',
    'description' => 'infiniteload comment',
    'page callback' => 'changemakers_infiniteload_comment',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/close_event'] = array(
    'title' => 'close event',
    'description' => 'admin or owner event or coach close event',
    'page callback' => 'changemakers_close_event',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/cancelled_event'] = array(
    'title' => 'cancel event',
    'description' => 'admin or owner event or coach cancelled event',
    'page callback' => 'changemakers_cancelled_event',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/project_update_view'] = array(
    'title' => 'Project update view',
    'description' => 'project update view',
    'page callback' => 'API_changemakers_project_update_view',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['changemakers/community/close'] = array(
    'title' => 'Close community post',
    'description' => 'Close community post',
    'page callback' => 'changemakers_helper_community_close',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/comment/load'] = array(
    'title' => 'Load more comment',
    'description' => 'Load more Comment Project',
    'page callback' => 'API_changemakers_comment_load',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/dashboard/comment/load'] = array(
    'title' => 'Load more comment',
    'description' => 'Load more Comment Project',
    'page callback' => 'API_changemakers_dashboard_comment_load',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/dashboard/project/load'] = array(
    'title' => 'Load more comment',
    'description' => 'Load more Comment Project',
    'page callback' => 'API_changemakers_dashboard_project_load',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/check/username'] = array(
    'title' => 'Checkusername',
    'description' => 'Checkusername Register',
    'page callback' => 'API_changemakers_check_username',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/check/email'] = array(
    'title' => 'Checkusername',
    'description' => 'Checkusername Register',
    'page callback' => 'API_changemakers_check_email',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/check/projects'] = array(
    'title' => 'Check inactive project',
    'description' => 'check inactive project more than 6 month ',
    'page callback' => 'API_changemakers_check_inactive_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/check/community'] = array(
    'title' => 'Check inactive community',
    'description' => 'Check inactive community more than due date',
    'page callback' => 'API_changemakers_check_inactive_community',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/knowledge'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_knowledge',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/news'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_news',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/event'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_event',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/project'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_project',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/event'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_event',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/campaign'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_campaign',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['api/changemakers/transferdata/community'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_community',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
   $items['api/changemakers/transferdata/journal'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_transferdata_journal',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
   $items['api/changemakers/url/alias'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_alias_url',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
   $items['api/changemakers/upload/file'] = array(
    'title' => 'transferdata',
    'description' => 'transferdata',
    'page callback' => 'API_changemakers_upload_file',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  $items['cmtoolkit.pdf'] = array(
    'title' => 'get file guideline.pdf  ',
    'description' => 'get file guideline.pdf  ',
    'page callback' => 'changemakers_load_guideline',
    'access arguments' => array('general'),
    //'access callback' => 'changemakers_test_form',
  );
  return $items;
}
#user function
  function changemakers_permission() {
    return array(
        'event/view' => array(
          'title' => t('Event: View News & Event'),
          'description' => t(''),
        ),
        'general' => array(
          'title' => t('User: access form'),
          'description' => t(''),
        ),
        'can_submit_project_document' => array(
          'title' => t('Project: Can submit document to project'),
          'description' => t('Enable document submission to project'),
        ),
        'can_join_project' => array(
          'title' => t('Project: Can join project'),
          'description' => t('Enable join project'),
        ),
        'can_manage_participation' => array(
          'title' => t('Project: Can manage Participation'),
          'description' => t('Enable Can manage Participation'),
        ),
        'can_see_phone_number' => array(
          'title' => t('Project: Can see the phone number in Project'),
          'description' => t('Enable Can see the phone number in Project'),
        ),
        'can_access_dashboard' => array(
          'title' => t('Dashboard: Can access Dashboard'),
          'description' => t('Enable Can access Dashboard'),
        ),
        'can_access_dashboard_admin' => array(
          'title' => t('Dashboard: Can access Dashboard Admin'),
          'description' => t('Enable Can access Dashboard Admin'),
        ),
        'dashboard_coach' => array(
          'title' => t('Dashboard: Can access Dashboard Coach'),
          'description' => t('Enable Can access Dashboard Coach'),
        ),
        'dashboard_partner' => array(
          'title' => t('Dashboard: Can access Dashboard Partner'),
          'description' => t('Enable Can access Dashboard Partner'),
        ),
        'dashboard_unverified' => array(
          'title' => t('Dashboard: Can access Dashboard Unvierfied'),
          'description' => t('Enable Can access Dashboard Unvierfied'),
        ),
        'dashboard_verified' => array(
          'title' => t('Dashboard: Can access Dashboard Vierfied'),
          'description' => t('Enable Can access Dashboard Vierfied'),
        ),
        'dashboard_helpdesk' => array(
          'title' => t('Dashboard: Can access Dashboard Helpdesk'),
          'description' => t('Enable Can access Dashboard Helpdesk'),
        ),
        'dashboard_org' => array(
          'title' => t('Dashboard: Can access Dashboard Organization'),
          'description' => t('Enable Can access Dashboard Organization'),
        ),
        'dashboard_show_how_to_start_your_project' => array(
          'title' => t('Dashboard: How to start your project'),
          'description' => t('Enable How to start your project'),
        ),

        'can_access_my_projects' => array(
          'title' => t('My Projects: access my projects'),
          'description' => t('Enable access my projects'),
        ),

        'can_create_project' => array(
          'title' => t('My Projects: can create project'),
          'description' => t('Enable access can create project'),
        ),
        'my_project_helpdesk' => array(
          'title' => t('My Projects: Can access my project Helpdesk'),
          'description' => t('Enable Can access my project Helpdesk'),
        ),
        'my_project_coach' => array(
          'title' => t('My Projects: Can access my project Coach'),
          'description' => t('Enable Can access my project Coach'),
        ),
        'my_project_partner' => array(
          'title' => t('My Projects: Can access my project Partner'),
          'description' => t('Enable Can access my project Partner'),
        ),

        'can_access_my_journal' => array(
          'title' => t('My Journal: Can access my journal'),
          'description' => t('Enable Can access my journal'),
        ),
        

        'can_create_forum' => array(
          'title' => t('Can create forum'),
          'description' => t('Enable create forum'),
        ),
        'manage/menu' => array(
          'title' => t('Content Management'),
          'description' => t('Content Management for admin'),
        ),
        'manage/campaign' => array(
          'title' => t('Campaign Management'),
          'description' => t('Campaign Management for admin'),
        ),
        'manage/community' => array(
          'title' => t('Community Post Management'),
          'description' => t('Community Post Management for admin'),
        ),
        'manage/event' => array(
          'title' => t('Event Management'),
          'description' => t('Event Management for admin'),
        ),
        'manage/journal' => array(
          'title' => t('Journal Management'),
          'description' => t('Journal Management for admin'),
        ),
        'manage/knowledge' => array(
          'title' => t('Knowledge Management'),
          'description' => t('Knowledge Management for admin'),
        ),
        'manage/news' => array(
          'title' => t('News Management'),
          'description' => t('News Management for admin'),
        ),
        'manage/online-course' => array(
          'title' => t('Online Course Management'),
          'description' => t('Online Course Management for admin'),
        ),
        'manage/online-lesson' => array(
          'title' => t('Online Lesson Management'),
          'description' => t('Online Lesson Management for admin'),
        ),
        'manage/project' => array(
          'title' => t('Project Management'),
          'description' => t('Project Management for admin'),
        ),
        'manage/taxonomy' => array(
          'title' => t('Taxonomy Management'),
          'description' => t('Taxonomy Management for admin'),
        ),
        'manage/user' => array(
          'title' => t('User Management'),
          'description' => t('User Management for admin'),
        ),
        'campaign/list' => array(
          'title' => t('Campaign'),
          'description' => t('Campaign list'),
        ),
        
    );
  }

  function changemakers_check_login(){

    $username = $_POST['username'];
    //$elements = drupal_get_form("user_login");
    $query_db = db_query("select uid from users where name like '".$username."' or mail like '".$username."' ");
    foreach ($query_db as $row) 
    {
        $query_data[] = $row->uid;
    }

    
    // print "<pre>";
    // print_r($query_data);
    // print "</pre>";
    if(isset($query_data[0]) )
    {
      $user_auth = user_load($query_data[0]);
      if($user_auth->uid)
      {
        //print $user_auth->uid;
        $stored_hash = $user_auth->pass;
        $password = _password_crypt('sha512', $_POST['password'], $stored_hash);
        $query_db_p = db_query("select pass from users");
        foreach ($query_db_p as $row) 
        {
            $query_pass[] = $row->pass;
        }
        if(in_array($password, $query_pass))
        {
          echo 0;
        }
        else // password ไม่ตรง
        {
          echo 1;
        }
      }
      
    }
    else{
      echo 3;
    }
  }

  function changemakers_update_view($count, $nid){
    db_update('field_data_field_count_views_project')
    ->fields(array(
        'field_count_views_project_value' => $count,
    ))
    ->condition('entity_id',$nid)       
    ->execute();

    print_r($nid);
  }

  function changemakers_check_forgot(){
    $email = $_POST['email'];
    $query_db = db_query("select uid from users where mail like '".$email."'");
    foreach ($query_db as $row) 
    {
        $query_data[] = $row->uid;
    }

    if(isset($query_data[0]) )
    {
      echo 1;
    }
    else{
      echo 0;
    }
  }

  function changemakers_test_form() {
    //print_r("tong1234");
    // if(isset($_POST['test']))
    // {
    //   $x =$_POST['filename'];
    //   echo $x;
    // }
    // $node = node_load(37);
    // $node->field_swot['und'][0]['filename'] = 'test.jpg';
    // node_save($node);
    // echo json_encode($node);
     drupal_goto('/content/au-all');
  }
  
  function form_test_form($form,&$form_submit) {
    $form['firstname'] = array(
      '#title' => t('Firstname'),
      '#type' => 'textfield',
      '#required' => TRUE,
    );
    $form['lastname'] = array(
      '#title' => t('Lastname'),
      '#type' => 'textfield',
    );
    $form['submit'] = array(
      '#value' => 'Submit',
      '#type' => 'submit',
      );
    return $form;
  }
  function changemakers_test_community(){
  $json = file_get_contents('http://soc.devfunction.com/cmk_community.php');
  $obj = json_decode($json);
  print "<pre>";
  print_r(count($obj));
  print "</pre>";
  foreach ($obj as $key => $value) {

    print "<pre>";
    print_r($value->title);
    print "<pre>";
    print "<pre>";
    print_r(date('Y-m-d H:i:s',$value->created));
    print "<pre>";
    print "<pre>";
    print "Active".$value->active;
    print "<pre>";
  }
}
function changemakers_test_project(){
  $json = file_get_contents('http://soc.devfunction.com/cmk_project.php');
  $obj = json_decode($json);
  print "<pre>";
  print_r(count($obj));
  print "</pre>";
  foreach ($obj as $key => $value) {

    print "<pre>";
    print_r($value->title);
    print "<pre>";
    print "<pre>";
    print_r(date('Y-m-d H:i:s',$value->created));
    print "<pre>";
    print "<pre>";
    print "Active".$value->active;
    print "<pre>";
  }
}
function changemakers_test_campaign(){
  $json = file_get_contents('http://soc.devfunction.com/cmk_campaign.php');
  $obj = json_decode($json);
  print "<pre>";
  print_r(count($obj));
  print "</pre>";
  foreach ($obj as $key => $value) {

    print "<pre>";
    print_r($value->title);
    print "<pre>";
    print "<pre>";
    print_r(date('Y-m-d H:i:s',$value->created));
    print "<pre>";
    print "<pre>";
    print "Active".$value->active;
    print "<pre>";
  }
}
function changemakers_test_user(){
  $json = file_get_contents('http://soc.devfunction.com/cmk_user.php');
  $obj = json_decode($json);
  print "<pre>";
  print_r(count($obj));
  print "</pre>";
  foreach ($obj as $key => $value) {

    print "<pre>";
    print_r($value->name);
    print "<pre>";
    print "<pre>";
    print_r(date('Y-m-d H:i:s',$value->created));
    print "<pre>";
    print "<pre>";
    print $mail;
    print "<pre>";
    print "<pre>";
    print "Active".$value->status;
    print "<pre>";
  }
}
  function changemakers_test_journal(){
    $json = file_get_contents('http://soc.devfunction.com/cmk_event.php');
    $obj = json_decode($json);
    print "<pre>";
    print_r(count($obj));
    print "</pre>";
    foreach ($obj as $key => $value) {
 
      print "<pre>";
      print_r($value->title);
      print "<pre>";
      print "<pre>";
      print_r(date('Y-m-d H:i:s',$value->created));
      print "<pre>";
      print "<pre>";
      print "Active".$value->active;
      print "<pre>";
    }
  }
  function changemakers_test(){

    $json = file_get_contents('http://soc.devfunction.com/cmk_news.php');
    $obj = json_decode($json);
    print "<pre>";
    print_r(count($obj));
    print "</pre>";
    foreach ($obj as $key => $value) {
      print "<pre>";
      print_r($value->title);
      print "<pre>";
      print "<pre>";
      print_r(date('Y-m-d H:i:s',$value->created));
      print "<pre>";
      print "<pre>";
      print "Active".$value->active;
      print "<pre>";
    }
    // print "<pre>";
    // print_r($obj);
    // print "<pre>";

    /* global $user;
    print_r($user);

    $account =  $user;
    $register = ($user->uid > 0 ? FALSE : TRUE);

    $admin = user_access('administer users');

    // Pass access information to the submit handler. Running an access check
    // inside the submit function interferes with form processing and breaks
    // hook_form_alter().
    $form['administer_users'] = array(
      '#type' => 'value',
      '#value' => $admin,
    );

    $form['#validate'][] = 'user_account_form_validate';

    // Account information.
    $form['account'] = array(
      '#type'   => 'container',
      '#weight' => 5,
    );
    // Only show name field on registration form or user can change own username.
    $form['account']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('ชื่อที่ต้องการใช้ในระบบ'),
      '#maxlength' => 60,
      //'#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
      '#required' => TRUE,
      '#attributes' => array('class' => array('username')),
      //'#default_value' => (!$register ? $account->name : ''),
      //'#access' => ($register || ($user->uid == $account->uid && user_access('change own username')) || $admin),
      '#attributes' =>array('placeholder' => t('ใส่ชื่อที่ต้องการใช้ในระบบ'))
    );

    $form['account']['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('อีเมล'),
      '#maxlength' => 255,
      /*'#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'), 
      '#required' => TRUE,
      '#attributes' => array('class' => array('email')),
      //'#default_value' => (!$register ? $account->mail : ''),
    );

    // Attach field widgets, and hide the ones where the 'user_register_form'
    // setting is not on.
    $form['#user'] = drupal_anonymous_user();
    $form['#user_category'] = 'register';
    $langcode = entity_language('user', $form['#user']);
    $form_state['redirect'] = 'changemakers/register';


    field_attach_form('user', $form['#user'], $form, $form_state, $langcode);

    $register = ($form['#user']->uid > 0 ? FALSE : TRUE);

    foreach (field_info_instances('user', 'user') as $field_name => $instance) {

     
      echo $field_name."/";
      //echo  $form_state['redirect'];
     //echo  $form['#user']->uid;

      if($field_name = "field_profile_birthdate")
      {
         $form[$field_name] = array(
            '#title' => t('วันเกิด'),
            '#type' => 'textfield',
            '#maxlength' => 255,
            //'#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
            '#required' => TRUE,
            //'#default_value' => (!$register ? $field_name->name : ''),
            '#weight' => 7,
            '#attributes' =>array('placeholder' => t('วันเกิด')),
          );
      }
      if($field_name = "field_profile_firstname")
      {
         $form[$field_name] = array(
            '#type' => 'textfield',
            '#maxlength' => 255,
            //'#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
            '#required' => TRUE,
            //'#default_value' => (!$register ? $field_name->name : ''),
            '#weight' => 5,
            '#attributes' =>array('placeholder' => t('ชื่อ')),
          );
      }
      if($field_name = "field_profile_lastname")
      {
         $form[$field_name] = array(
            '#type' => 'textfield',
            '#maxlength' => 255,
            //'#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
            '#required' => TRUE,
            //'#default_value' => (!$register ? $field_name->name : ''),
            '#weight' => 6,
            '#attributes' => array('placeholder' => t('นามสกุล')),
          );
      }
      if (empty($instance['settings']['user_register_form'])) {
        $form[$field_name]['#access'] = TRUE;
        //echo $form['#user'];
      }
    }

    

    

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit Register'),
    );

    //$form['#validate'][] = 'user_register_validate';
    // Add the final user registration form submit handler.
    $form['#submit'][] = 'changemakers_register_submit';

    return $form; */
  }

  function changemakers_theme($existing, $type, $theme, $path){
      
    $hooks['user_register_form']=array(
      'render element'=>'form',
      'template' =>'user-register',
      //'preprocess function' => array('changemakers_preprocess_user_register'),
    );

    // $hooks['journal_node_form']=array(
    //   'render element'=>'form',
    //   'template' =>'journal-node-form',
    //   //'preprocess function' => array('changemakers_preprocess_user_register'),
    // );
    return $hooks;
  }
  function changemakers_get_form_journal(){
    //module_load_include('inc', 'node', 'node.pages');
    $node_form = new stdClass;
    $node_form->type = 'journal';
    $node_form->language = LANGUAGE_NONE;
    return render(drupal_get_form('journal_node_form',$node_form));
  }
  function changemakers_form_picture($form, &$form_state) {
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Choose a file'),
        '#attributes' => array(
          'id' => 'profile-picture',
       ),
    );

    //$form['#attributes'] = array('id' => array('profile-picture'));

    $form['document_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($form);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_picture_validate($form, &$form_state) {
    global $user;
    $file = file_save_upload('file', array(
      'file_validate_is_image' => array(),
      'file_validate_extensions' => array('png gif jpg jpeg'),
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.'pictures/'.'picture-'.$user->uid .'-'. $file->timestamp . '.' . $parts['extension'];

    // $path = 'public://pictures/';
    // drupal_realpath($path);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_picture_submit($form, &$form_state) {


    global $user;
    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $myuser = user_load($user->uid);
      $myuser->picture = $file;
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(user_save($myuser)){
        drupal_set_message(t('แก้ไขรูปภาพเสร็จสมบูรณ์'));
      }else{
        drupal_set_message(t('แก้ไขรูปภาพเสร็จสมบูรณ์'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    
  }
  function API_changemakers_check_password_old(){
    global $user;
    $data = user_load($user->uid);
    $stored_hash = $data->pass;
    $password = _password_crypt('sha512', $_POST['old_pass'], $stored_hash);

    if($password != $data->pass)
    {
      echo 0;
      //drupal_set_message("หัสผ่านเดิมไม่ตรงกัน", $type = 'error');
    }else{
      echo 1;
    }
  }

  function changemakers_update_profile(){
    global $user;
    $data = user_load($user->uid);

    // print "<pre>";
    // print_r($_POST);
    // print "</pre>";


    // // print_r($_SERVER);
    // exit();
    if(isset($_POST['op'])){

      // $data->field_profile_firstname['und'][0]['value'] = $_POST['field_profile_firstname[und][0][value]'];
      $data->field_profile_nickname['und'][0]['value'] = $_POST['field_profile_nickname']['und'][0]['value'];
      $data->field_profile_address['und'][0]['value'] = $_POST['field_profile_address']['und'][0]['value'];
      $data->field_prifile_district['und'][0]['value'] = $_POST['field_prifile_district']['und'][0]['value'];
      $data->field_profile_province['und'][0]['value'] = $_POST['field_profile_province']['und'];
      $data->field_profile_zipcode['und'][0]['value'] = $_POST['field_profile_zipcode']['und'][0]['value'];
      $data->field_profile_user_id['und'][0]['value'] = $_POST['field_profile_user_id']['und'][0]['value'];
      $data->field_profile_institution['und'][0]['value'] = $_POST['field_profile_institution']['und'][0]['value'];
      
      if(!empty($_POST['field_profile_institution']['und'][0]['value'])){
        $institution = $_POST['field_profile_institution']['und'][0]['value'];
        $vocab = taxonomy_vocabulary_machine_name_load('Organization');
        $vid = $vocab->vid;

        $get_name_institution = taxonomy_term_load_multiple(array(), array('name' => trim($institution), 'vid' => $vid));

        if(empty($get_name_institution)){

          $term = new stdClass();
          $term->name = $institution;
          $term->vid = $vid;
          //$term->field_new['LANGUAGE_NONE'][0]['value'] = "1"; 
          taxonomy_term_save($term);

          // print "<pre>";
          // print_r($term);
          // print "</pre>";
          $data->field_organization['und'][0]['tid'] =  $term->tid;

        }
        else{
          foreach ($get_name_institution as $key => $value) {
            $data->field_organization['und'][0]['tid'] =  $value->tid;
          }
          
        }
        
        
      }


      


      //$data->field_organization['und'] = $_POST['field_profile_institution']['und'][0]['value'];
      if(isset($_POST['field_profile_join']['und'][1])){
        $data->field_profile_join['und'][0]['value'] = $_POST['field_profile_join']['und'][1];
      }
      else{
        $data->field_profile_join['und'][0]['value'] = 0;
      }
      if(isset($_POST['field_profile_join']['und'][2])){
        $data->field_profile_join['und'][1]['value'] = $_POST['field_profile_join']['und'][2];
      }
      else{
        $data->field_profile_join['und'][1]['value'] = 0;
      }
      // print($data);
      // exit();
      user_save($data);

     

    }
    else if(isset($_POST['op_contact']))
    {
      global $user;
      $data->mail = $_POST['mail'];
      $sql_profile= "select uid from users where mail like '".$_POST['mail']."'";
      //$sql_event_title = "select nid from node where title like '%".$text."%' and type='event'";
      $query_db_tax = db_query($sql_profile);
      $user_id = 0;
      foreach ($query_db_tax as $row) {
        $user_id =  $row->uid;
      }
      // print_r($user_id);
      // print "<pre>";
      // print_r($user->uid);
      // exit();
      if($user_id != 0 && $user->uid != $user_id){
        // drupal_goto('/user/', array(
        //     'query' => array(
        //         'respond_email' => '',
        //     ),
        //   )
        // );
        drupal_set_message(t('Email นี้มีผู้ใช้อยู่แล้ว'), 'error');
        drupal_goto('/user/');

      }
      else
      {
      

        $data->field_profile_phone['und'][0]['value'] = $_POST['field_profile_phone']['und'][0]['value'];
        if(isset($_POST['field_profile_contact']['und'][1]))
        {
          $data->field_profile_contact['und'][0]['value'] = $_POST['field_profile_contact']['und'][1];
        }
        else
        {
          $data->field_profile_contact['und'][0]['value'] = 0;
        }
        if(isset($_POST['field_profile_contact']['und'][2]))
        {
          $data->field_profile_contact['und'][1]['value'] = $_POST['field_profile_contact']['und'][2];
        }
        else
        {
          $data->field_profile_contact['und'][1]['value'] = 0;
        }
        if(isset($_POST['field_profile_contact']['und'][3]))
        {
          $data->field_profile_contact['und'][2]['value'] = $_POST['field_profile_contact']['und'][3];
        }
        else
        {
          $data->field_profile_contact['und'][2]['value'] = 0;
        }
        user_save($data);
      }
    }
    else if(isset($_POST['op_login']))
    {
      $stored_hash = $data->pass;
      $password = _password_crypt('sha512', $_POST['oldPassword'], $stored_hash);

      if($password != $data->pass)
      {
        drupal_goto('/user/', array(
            'query' => array(
                'respond' => 'รหัสผ่านเดิมไม่ตรงกัน',
            ),
          )
        );
        drupal_set_message("หัสผ่านเดิมไม่ตรงกัน", $type = 'error');
      }
      else{
        $data->pass = _password_crypt('sha512', $_POST['newPassword'], $stored_hash);
        $data->field_change_password_time['und'][0]['value'] = date("Y-m-d H:i:s");
        user_save($data);
      }
      


      // print "<pre>";
      // print_r($password);
      // print "</pre>";
    }
    else if(isset($_POST['op_problem'])){
      //$taxonomy_id = array('tid'=>55);
      $data->field_profile_problem_interest['und'] = array();
      //
      //user_save($data);
      $problem =array();
      foreach ($_POST['field_profile_problem_interest']['und'] as $key => $value) {
        
       $data->field_profile_problem_interest['und'][] =  array('tid'=>$value);
      }

      // print "<pre>";
      // print_r($data->field_profile_problem_interest['und']);
      // print "</pre>";
      user_save($data);
      // print "<pre>";
      // print_r(count($data->field_profile_problem_interest['und']));
      // print "</pre>";

      // print "<pre>";
      // print_r($data->field_profile_problem_interest);
      // print "</pre>";
    }
    else if(isset($_POST['op_target'])){
      //$taxonomy_id = array('tid'=>55);
      $data->field_profile_target_group['und'] = array();
      //
      //user_save($data);
      $problem =array();
      foreach ($_POST['field_profile_target_group']['und'] as $key => $value) {
       $data->field_profile_target_group['und'][] =  array('tid'=>$value);
       if($value==109){
         $data->field_profile_target_group_other['und'][0]['value'] = $_POST['field_profile_target_group_other']['und'][0]['value'];
       }else{
         $data->field_profile_target_group_other['und'][0]['value'] = "";
       }
      }
     
      // print "<pre>";
      // print_r($data);
      // print "</pre>";
      user_save($data);

    }
    else if(isset($_POST['op_skill'])){
      //$taxonomy_id = array('tid'=>55);
      $data->field_profile_skill_interest['und'] = array();
      //
      //user_save($data);
      $problem =array();
      $data->field_proflie_language['und'][0]['value'] = "";
      foreach ($_POST['field_profile_skill_interest']['und'] as $key => $value) {
       $data->field_profile_skill_interest['und'][] =  array('tid'=>$value);
       if($value==39){
          $data->field_proflie_language['und'][0]['value'] = $_POST['field_proflie_language']['und'][0]['value'];
       }else{
          //$data->field_proflie_language['und'][0]['value'] = "";
       }
      }
      
     
      $data->field_interest_other['und'][0]['value'] = $_POST['field_interest_other']['und'][0]['value'];
       //echo "<pre>";
       //print_r($data);
       //echo "</pre>";
       //exit();
      user_save($data);

    }
    else if(isset($_POST['op_intro'])){
      
      $data->field_intro_self['und'][0]['value'] = $_POST['field_intro_self']['und'][0]['value'];
      // print "<pre>";
      // print_r($data);
      // print "</pre>";
      user_save($data);

    }
    else if(isset($_POST['op_picture'])){
      global $user;
      $myuser = user_load($user->uid);

      //$data->picture = $_FILES['files'];
      //user_save($data);
      //ftp://khunakorn@changemakers.devfunction.com@changemakers.devfunction.com/public_html/sites/default/files/pictures

      

      $target_dir = "/public_html/sites/default/files/pictures/";
      $filename_upload = $_FILES["filesUpload"]["name"];
      $target_file = $target_dir . basename($_FILES["filesUpload"]["name"]);
      $uploadOk = 1;
      $imageFileType = pathinfo($target_file,PATHINFO_EXTENSION);
      // Check if image file is a actual image or fake image
      if(isset($_POST["op_picture"])) {
          $check = getimagesize($_FILES["filesUpload"]["tmp_name"]);
          if($check !== false) {
              //echo "success - " . $check["mime"] . ".";
              $uploadOk = 1;
          } else {
              echo "File is not an image.";
              $uploadOk = 0;
          }
      }

      // Check if file already exists
      if (file_exists($target_file)) {
          echo "Sorry, file already exists.";
          $uploadOk = 0;
      }
      // Check file size
      if ($_FILES["filesUpload"]["size"] > 500000) {
          echo "Sorry, your file is too large.";
          $uploadOk = 0;
      }
      // Allow certain file formats
      if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
      && $imageFileType != "gif" && $imageFileType != "JPG" ) {
          echo "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
          $uploadOk = 0;
      }
      // Check if $uploadOk is set to 0 by an error

      if ($uploadOk == 0) {
          echo "Sorry, your file was not uploaded.";
      // if everything is ok, try to upload file
      } else {
          if (move_uploaded_file($_FILES["filesUpload"]["tmp_name"], $target_file)) {
              echo "The file ". basename( $_FILES["filesUpload"]["name"]). " has been uploaded.";
          } else {
              echo "Sorry, there was an error uploading your file.";
          }
      }
      print "<pre>";
      print_r($_FILES["filesUpload"]["tmp_name"]);
      print "</pre>";

      print "<pre>";
      print_r($myuser);
      print "</pre>";

      
    }
    
    

    drupal_goto('/user');

  }
#end

#function for changemakers registration
 



  /*function changemakers_preprocess_user_register(&$vars) {
    $args = func_get_args();
    array_shift($args);
    $form_state['build_info']['args'] = $args; 
    $vars['form'] = drupal_build_form('user_register_form', $form_state['build_info']['args']);
  }


  function changemakers_register_validate($form, &$form_state) {
    entity_form_field_validate('user', $form, $form_state);
  } */


  function changemakers_register_submit_form($form, &$form_state) {
    // user_register_submit($form, $form_state);
    // $form_state['redirect'] = 'http://soc.devfunction.com/';

        $institution = $form['#user']->field_profile_institution['und'][0]['value'];
        $vocab = taxonomy_vocabulary_machine_name_load('Organization');
        $vid = $vocab->vid;

        if(!empty($institution)){
          $get_name_institution = taxonomy_term_load_multiple(array(), array('name' => trim($institution), 'vid' => $vid));

          if(empty($get_name_institution)){

            $term = new stdClass();
            $term->name = $institution;
            $term->vid = $vid;
            //$term->field_new['LANGUAGE_NONE'][0]['value'] = "1"; 
            taxonomy_term_save($term);
          }


          $get_name_institution_tid = taxonomy_term_load_multiple(array(), array('name' => trim($institution), 'vid' => $vid));

          if(!empty($get_name_institution_tid)){
            foreach ($get_name_institution_tid as $key => $value) {
              $form['field_organization']['und']['#value'] =  $value->name;
              //drupal_set_message("มาที่นี่");
            }
            //$institution = $form['#user']->field_profile_institution['und'][0]['value'];
            
          }
        }

      

    // print "<pre>";
    // print_r($form);
    // print "</pre>";
    // exit();
  }



  function changemakers_form_webform_client_form_92_alter(&$form, &$form_state) {
    
  }

  function changemakers_init() {
    // ========== debug code =========
    global $user;
    //print $user->roles[3];
    if(isset($user->roles[3])){
      if ($_GET['q'] === '/node/add/project') {
        drupal_add_js(drupal_get_path('module', 'changemakers') . '/js/script.js');
      }
      else if ($_GET['q'] === 'node/add/event') {
        drupal_add_js(drupal_get_path('module', 'changemakers') . '/script_checkbox.js');

        $maingroup =array(8,9,10,11,12,13,15,86); 
        $problems = array();
        foreach ($maingroup as $key => $value) {
          $terms = taxonomy_get_children($value);
          $terms_id = array();
          foreach ($terms as $key_term => $value_term) {
            $terms_id[] = $value_term->tid;
          }
          $problems[$value] = $terms_id; 
        }

        drupal_add_js(array('changemakers' => array('problems' => $problems)), array('type' => 'setting'));

      }
      else if ($_GET['q'] === '/node/add/news') {
        drupal_add_js(drupal_get_path('module', 'changemakers') . '/js/script.js');
      }
      else if ($_GET['q'] === '/node/add/knowledge') {
        drupal_add_js(drupal_get_path('module', 'changemakers') . '/js/script.js');
      }
      else if ($_GET['q'] === '/node/add/journal') {
        drupal_add_js(drupal_get_path('module', 'changemakers') . '/js/script.js');
      }
      else if ($_GET['q'] === '/node/add/campaign') {
        drupal_add_js(drupal_get_path('module', 'changemakers') . '/js/script.js');
      }

      
    }
  }

  function changemakers_menu_breadcrumb_alter(&$active_trail, $item) {
    // Always display a link to the current page by duplicating the last link in
    // the active trail. This means that menu_get_active_breadcrumb() will remove
    // the last link (for the current page), but since it is added once more here,
    // it will appear.
    global $user;


      if(isset($active_trail[1]['menu_name']) && $active_trail[1]['menu_name'] != 'user-menu'){
        $active_trail[1]['title'] = isset($active_trail[1]['path'])?$active_trail[1]['path']:"";
      }
    

       
      if(count($active_trail) < 3){
        $active_trail[1]['title'] = isset($active_trail[1]['path'])?$active_trail[1]['path']:"";

      }

      $actual_link = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";

      $url_ac = explode("/", $actual_link);
      $url_ac_search = explode("?",$url_ac[3]);

       

       
      


      // if(count($active_trail) == 3){
      //   $active_trail2[0] = $active_trail[0];
      //   $active_trail2[1] = $active_trail[1];
      // }

     

      // print "<pre>";
      // print_r($url_ac);
      // print "</pre>";

      // print "<pre>";
      // print_r($item);
      // print "</pre>";

      // foreach ($active_trail as $key => $crumb){

      //     //CHECK AGAINST NODE TYPE
      //     if($crumb['map'][1]->title == 'Dashboard'){

      //         //INSERT THE REPLACEMENT CRUMB
      //         $active_trail2[$key] = array( 
      //             'title' => t("Dashboard"),
      //             'href' => '/dashboard',
      //             'link_path' => '/dashboard', 
      //             'localized_options' => array(),
      //             'type' => 0
      //         );
      //         //RECREATE ITEM
      //         $active_trail2[] = $crumb;
      //     }

      // }
      // if($url_ac[5] == "journal"){
      //   $active_trail2[0] = $active_trail[0];
      //   $active_trail2[1] = $active_trail[1];
      //   $active_trail2[2] = $active_trail[2];
      //   // $active_trail2[1]['title'] = "Journal";

      //   // $active_trail2[2]['title'] = "Add Journal";

       
      // }

      // print "<pre>";
      // print_r($active_trail2);
      // print "</pre>";
      // Manage Admin
    if($url_ac[3] == "manage"){
       $active_trail[1]['title'] = "Managemant Menu";
       $active_trail[1]['href'] = "/manage/menu";
      if($url_ac[4] == "campaign"){
        // $active_trail[2]['title'] = "Manage Campaign";
        // $active_trail[2]['href'] = "/manage/campaign";
      }

          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        
    }
    //End Manage Admin
    if($url_ac[3] == "comment"){
      $node =node_load($item['page_arguments'][0]->nid);
      // print "<pre>";
      // print_r($node);
      // print "</pre>";
      $path_node = drupal_get_path_alias("node/".$node->nid);
        if($node->type == "news")
        {
            $active_trail[1]['title'] = "News";
            $active_trail[1]['href'] = "/news";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
        }else if($node->type == "event"){
            $active_trail[1]['title'] = "Event and Workshop";
            $active_trail[1]['href'] = "/event-and-workshop";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
        }else if( $node->type == "project"){ 
            $active_trail[1]['title'] = "Project";
            $active_trail[1]['href'] = "/projects/list";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
        }else if( $node->type == "knowledge"){  
            $active_trail[1]['title'] = "Knowledge";
            $active_trail[1]['href'] = "/knowledge/list";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
        }
        else if($node->type == "campaign"){  
            $active_trail[1]['title'] = "Campaigns";
            $active_trail[1]['href'] = "/campaign/list";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
        }
        
        global $user;
        if($node->field_journal_type['und'][0]['value']==1){
          if($node->type == "journal"){  
            $active_trail[1]['title'] = "Coach Journal";
            $active_trail[1]['href'] = "/journal-list-coach";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
          }
        }
        else{
          if( $node->type == "journal"){  
            $active_trail[1]['title'] = "Journal";
            $active_trail[1]['href'] = "/journal/list";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
          }

        }

        if($node->taxonomy_forums['und'][0]['tid']==7){
          if( $node->type == "forum"){  
            $active_trail[1]['title'] = "Coach Community";
            $active_trail[1]['href'] = "/coach-community/list";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
          }
        }
        elseif($node->taxonomy_forums['und'][0]['tid']==1){
          if( $node->type == "forum"){  
            $active_trail[1]['title'] = "Community";
            $active_trail[1]['href'] = "/community/list";
            $active_trail[2]['title'] = $node->title;
            $active_trail[2]['href'] = $path_node;
          }

        }
    }

    if($url_ac[5] == "journal"){
      if (!drupal_is_front_page()) {
          $end = end($active_trail);
        if ($item['href'] == $end['href']) {

          $active_trail[0] = $active_trail[0];
          $active_trail[1] = $active_trail[2];
          if(!empty($user->roles[5])){
            $active_trail[1]['title'] = "Create Coach Journal";
          }else{

             $active_trail[1]['title'] = "Create Journal";
          }
          
          // $active_trail[1]['localized_options'] = array("attributes"=>array("title" => "Journal"), "html" => 1);
          // $active_trail[1]['link_path'] = 'node/add/journal';
          // $active_trail[1]['router_path'] = 'node/add/journal';
          // $active_trail[1]['link_title'] = "Journal";
          $active_trail[2] = $active_trail[2];


          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        }
      }
    }elseif($url_ac[5] == "forum"){
      if (!drupal_is_front_page()) {
          $end = end($active_trail);
        if ($item['href'] == $end['href']) {

          $active_trail[0] = $active_trail[0];
          $active_trail[1] = $active_trail[2];
          $active_trail[1]['title'] = "Create Community";
          // $active_trail[1]['localized_options'] = array("attributes"=>array("title" => "Journal"), "html" => 1);
          // $active_trail[1]['link_path'] = 'node/add/journal';
          // $active_trail[1]['router_path'] = 'node/add/journal';
          // $active_trail[1]['link_title'] = "Journal";
          $active_trail[2] = $active_trail[2];


          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        }
      }
    }elseif($url_ac[5] == "forum?taxonomy-forums-tid=7"){
      if (!drupal_is_front_page()) {
          $end = end($active_trail);
        if ($item['href'] == $end['href']) {

          $active_trail[0] = $active_trail[0];
          $active_trail[1] = $active_trail[2];
          //$active_trail[1]['href'] = "/node/add/forum?taxonomy-forums-tid=7";
          //$active_trail[1]['router_path'] = "/node/add/forum?taxonomy-forums-tid=7";
          $active_trail[1]['title'] = "Create Coach Community";
          // $active_trail[1]['localized_options'] = array("attributes"=>array("title" => "Journal"), "html" => 1);
          // $active_trail[1]['link_path'] = 'node/add/journal';
          // $active_trail[1]['router_path'] = 'node/add/journal';
          // $active_trail[1]['link_title'] = "Journal";
          $active_trail[2] = $active_trail[2];


          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        }
      }
    }
    elseif($url_ac[5] == "forum?taxonomy-forums-tid=1"){
      if (!drupal_is_front_page()) {
          $end = end($active_trail);
        if ($item['href'] == $end['href']) {

          $active_trail[0] = $active_trail[0];
          $active_trail[1] = $active_trail[2];
          $active_trail[1]['title'] = "Create Community";
          // $active_trail[1]['localized_options'] = array("attributes"=>array("title" => "Journal"), "html" => 1);
          // $active_trail[1]['link_path'] = 'node/add/journal';
          // $active_trail[1]['router_path'] = 'node/add/journal';
          // $active_trail[1]['link_title'] = "Journal";
          $active_trail[2] = $active_trail[2];


          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        }
      }
    }
    else if($url_ac[5] == "project"){
      if (!drupal_is_front_page()) {
          $end = end($active_trail);
        if ($item['href'] == $end['href']) {

          $active_trail[0] = $active_trail[0];
          $active_trail[1] = $active_trail[2];
          $active_trail[1]['title'] = "Create Project";
          // $active_trail[1]['localized_options'] = array("attributes"=>array("title" => "Journal"), "html" => 1);
          // $active_trail[1]['link_path'] = 'node/add/journal';
          // $active_trail[1]['router_path'] = 'node/add/journal';
          // $active_trail[1]['link_title'] = "Journal";
          $active_trail[2] = $active_trail[2];


          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        }
      }
    }
    else if(arg(1) == "92"){



      //webform_set_breadcrumb(92);

        // $active_trail2[0] = $active_trail[0];
        // $active_trail2[1] = $active_trail[1];
        // $active_trail2[1]['title'] = "Projectss";
        // $active_trail2[1]['link_title'] = "Projectss";
        // //$active_trail2[1]['link_path'] = "/node/64";
        // $active_trail2[1]['href'] = "node/64";
      //   $active_trail2 = array();
        
      //   if (!drupal_is_front_page()) {
      //     $end = end($active_trail2);

      //       $active_trail = $active_trail2;
            

      //       print "<pre>";
      //     print_r($active_trail);
      //     print "</pre>";
      // }

       
    }
    else{
      $active_trail2 = array();
      if(arg(2) == "project"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Create Project";
        $active_trail2[1]['link_title'] = "Create Project";

       
      }

      


      

      if(arg(0) == "projects"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Project";
       
      }
      else if(arg(0) == "community"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Community";
       
      }
      else if(arg(0) == "event"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "News&Event";
       
      }
      else if(arg(0) == "knowledge"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Knowledge";
       
      }
      else if(arg(0) == "newsevent"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "News & Event";
       
      }
      else if(arg(0) == "campaign"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Campaign";
       
      }
      else if(arg(0) == "journal"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Journal";
       
      }
      else if(arg(0) == "journal-list-coach"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]['title'] = "Coach Journal";
       
      }
      else if($url_ac[3] == "verified-member"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Verified-member";
      
       
      }
      else if($url_ac[3] == "dashboard"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Dashboard";
      
       
      }
      else if($url_ac[3] == "add-project-update"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Add Project Update";
        
      }
      else if($url_ac[3] == "about-us"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "About Us";
      }
      else if($url_ac[3] == "Participate University Partner"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Participate University Partner";
      }
      else if($url_ac[3] == "participate-helpdesk"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Participate Helpdesk";
      }
      else if($url_ac[3] == "participate-coach"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Participate Coach";
      }
      else if($url_ac[3] == "Participate Changemaker"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Participate Changemaker";
      }
      else if($url_ac[3] == "coach-changemakers"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Coach Changemakers";
      }




      
      else if($url_ac[3] == "my-projects"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "My Projects";
      }
      else if($url_ac_search[0] == "search"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Search";
      }

      else if($url_ac[3] == "user"){
        $active_trail2[0] = $active_trail[0];
        $active_trail2[1] = $active_trail[1];
        $active_trail2[1]["title"] = "Profile";
      }


      if (!drupal_is_front_page()) {
          $end = end($active_trail2);
        if ($item['href'] == $end['href']) {


            $active_trail[0] = $active_trail2[0];
            $active_trail[1] = $active_trail2[1];
            $active_trail[2] = $active_trail2[1];
          

          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";
        }
      }
    }
  } 
          // print "<pre>";
          // print_r($active_trail);
          // print "</pre>";


  /*function changemakers_menu_breadcrumb_alter(&$active_trail, $item) {

    //STORE THE LAST ITEM
    $end = end($active_trail);

    foreach ($active_trail as $key => $crumb){

        //CHECK AGAINST NODE TYPE
        if($crumb['map'][1]->type == 'NODE_MACHINE_NAME'){

            //INSERT THE REPLACEMENT CRUMB
            $active_trail[$key] = array( 
                'title' => t("Title"),
                'href' => 'PATH',
                'link_path' => 'PATH', 
                'localized_options' => array(),
                'type' => 0
            );
            //RECREATE ITEM
            $active_trail[] = $crumb;
        }

    }


    //SHOW CURRENT PAGE IN BREADCRUMB BY DUPLICATING THE LAST ARRAY ITEM IN ACTIVE_TRAIL

    if (!drupal_is_front_page()) {
        if ($item['href'] == $end['href']) {
            $active_trail[] = $end;
        }       
    }

  }*/

  // function mymodule_menu_alter(&$items) {
  //   $items['comment/%/delete']['page callback'] = 'changemakers_comment_delete_function';
  //   $items['comment/%/delete']['page arguments'] = array(1);
  //   $items['comment/%/delete']['module'] = 'changemakers';
  //   $items['comment/%/delete']['file'] = 'changemakers.pages.inc';
  // }

  // function changemakers_comment_delete_function($cid) {
  //   if ($comment = comment_load($cid)) {
  //     comment_delete($comment->cid);
  //     drupal_set_message(t('The comment and all its replies have been deleted.'));
  //     watchdog('content', 'Deleted comment @cid and its replies.', array('@cid' => $comment->cid));
  //     // Clear the cache so an anonymous user sees that his comment was deleted.
  //     cache_clear_all();

  //     drupal_goto("node/$comment->nid");
  //   }
  //   return MENU_NOT_FOUND;
  // }

  function changemakers_node_view_alter(&$build)
  {
    $node = $build['#node'];


    // print "<pre>";
    // print_r($build);
    // print "<pre>";
    if($build['#view_mode'] == "full" && $node->type == "news")
    {
      $breadcrumb = array();
      $breadcrumb[] = l('Home', '<front>');
      $breadcrumb[] = l('News&Event', "/newsevent/list");
      $breadcrumb[] = l($node->title, "/news/".arg(1));
      drupal_set_breadcrumb($breadcrumb);
    }else if($build['#view_mode'] == "full" && $node->type == "event"){
      $breadcrumb = array();
      $breadcrumb[] = l('Home', '<front>');
      $breadcrumb[] = l('News&Event', "/newsevent/list");
      $breadcrumb[] = l($node->title, "/event/".arg(1));
      drupal_set_breadcrumb($breadcrumb);
    }else if($build['#view_mode'] == "full" && $node->type == "course"){
      $path_node = drupal_get_path_alias("node/".$node->nid);
  
      if($node->field_course_lession['und'][0]['value']==1){
  			$lession_title = "Module 1 : Idea evelopment";
  			$course_id = 580;
  		}elseif($node->field_course_lession['und'][0]['value']==2){
  			$lession_title = "Module 2 : Model and Plan";
  			$course_id = 580;
  		}elseif($node->field_course_lession['und'][0]['value']==3){
  			$lession_title = "Module 3 : Take action";
  			$course_id = 580;
  		}elseif($node->field_course_lession['und'][0]['value']==4){
  			$lession_title = "Module 4 : Stepping to the next";
  			$course_id = 580;
  		}elseif($node->field_course_lession['und'][0]['value']==5){
  			$lession_title = "1) Intro";
  			$course_id = 581;
  		}elseif($node->field_course_lession['und'][0]['value']==6){
  			$lession_title = "2) Background";
  			$course_id = 581;
  		}elseif($node->field_course_lession['und'][0]['value']==7){
  			$lession_title = "3) PRE";
  			$course_id = 581;
  		}elseif($node->field_course_lession['und'][0]['value']==8){
  			$lession_title = "4)  IN ACTION";
  			$course_id = 581;
  		}elseif($node->field_course_lession['und'][0]['value']==9){
  			$lession_title = "5) POST";
  			$course_id = 581;
  		}elseif($node->field_course_lession['und'][0]['value']==10){
  			$lession_title = "6) Platform for coach";
  			$course_id = 581;
  		}else{
  			$lession_title = "";
  		}

          $breadcrumb = array();
          $breadcrumb[] = l('Dashboard', '/dashboard');
          $breadcrumb[] = l('Online course', "/online-course");
          $breadcrumb[] = l($node->field_for_course['und'][0]['taxonomy_term']->name, "/online-course?field_for_course_tid=".$node->field_for_course['und'][0]['tid']);
          $breadcrumb[] = l($lession_title, "/online-course?field_for_course_tid=".$course_id."&field_course_lession_value=".$node->field_course_lession['und'][0]['value']);
          $breadcrumb[] = l($node->title, $path_node);

          drupal_set_breadcrumb($breadcrumb);
        }else if($build['#view_mode'] == "full" && $node->type == "project"){ 
           $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l('Project', "/projects/list");
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }else if($build['#view_mode'] == "full" && $node->type == "knowledge"){  
          $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l('Knowledge', "/knowledge/list");
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }
        else if($build['#view_mode'] == "full" && $node->type == "forum"){  
          $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l('Community', "/community/list");
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }
        else if($build['#view_mode'] == "full" && $node->type == "webform"){  
          $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }
        
        else if($build['#view_mode'] == "full" && $node->type == "campaign"){  
          $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l('Campaigns', "/campaign/list");
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }
        else if($build['#view_mode'] == "full" && $node->type == "page"){  
          $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }
        else if($build['#view_mode'] == "full" && $node->type == "banner"){  
          $path_node = drupal_get_path_alias("node/".$node->nid);
          $breadcrumb = array();
          $breadcrumb[] = l('Home', '<front>');
          $breadcrumb[] = l('Managemant Menu', "/manage/menu");
          $breadcrumb[] = l('Manage Banner', "/manage/banner");
          $breadcrumb[] = l($node->title, $path_node);
          drupal_set_breadcrumb($breadcrumb);
        }
        global $user;
        if($node->field_journal_type['und'][0]['value']==1){
          $path_node = drupal_get_path_alias("node/".$node->nid);
          if($build['#view_mode'] == "full" && $node->type == "journal"){  
            $breadcrumb = array();
            $breadcrumb[] = l('Home', '<front>');
            $breadcrumb[] = l('Coach Journal', "/journal-list-coach");
            $breadcrumb[] = l($node->title, $path_node);
            drupal_set_breadcrumb($breadcrumb);
          }
        }
        else{
          if($build['#view_mode'] == "full" && $node->type == "journal"){ 
            $path_node = drupal_get_path_alias("node/".$node->nid); 
            $breadcrumb = array();
            $breadcrumb[] = l('Home', '<front>');
            $breadcrumb[] = l('Journal', "/journal/list");
            $breadcrumb[] = l($node->title, $path_node);
            drupal_set_breadcrumb($breadcrumb);
          }

        }

        if($node->taxonomy_forums['und'][0]['tid']==7){
          if($build['#view_mode'] == "full" && $node->type == "forum"){  
            $path_node = drupal_get_path_alias("node/".$node->nid);
            $breadcrumb = array();
            $breadcrumb[] = l('Home', '<front>');
            $breadcrumb[] = l('Coach Community', "/coach-community/list");
            $breadcrumb[] = l($node->title, $path_node);
            drupal_set_breadcrumb($breadcrumb);
          }
        }
        elseif($node->taxonomy_forums['und'][0]['tid']==1){
          if($build['#view_mode'] == "full" && $node->type == "forum"){  
            $path_node = drupal_get_path_alias("node/".$node->nid);
            $breadcrumb = array();
            $breadcrumb[] = l('Home', '<front>');
            $breadcrumb[] = l('Community', "/community/list");
            $breadcrumb[] = l($node->title, $path_node);
            drupal_set_breadcrumb($breadcrumb);
          }
        }

      
      
  }

  function changemakers_user_presave(&$edit, $account, $category) {
    if (isset($edit['roles'])) {
      is_array($edit['roles']) ? '' : $edit['roles'] = array ( $edit['roles'] => $edit['roles'], 2 => '1' );
      $edit['roles'] = array_filter($edit['roles']);
    }
  }

  function changemakers_extra_validate_92(&$form, &$form_state) {
    global $user;
    //$form_state['redirect'] = 'project/'.$form['#submission']->data[7][0]."?fund";
    $form_state['redirect'] = array(
      'project/'.$form['#submission']->data[7][0],
      array(
        'query' => array(
          'fund'=>'fund',
        ),
      ),
    );
    // print "<pre>";
    // print_r($form);
    // print "</pre>";  
    // exit();

    // Now you can perform here api request and redirect 
  }

  /**
   * Implements hook_user_logout() 
  ** 
  */


  function changemakers_logout_destroy() {
    global $user;

    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

    module_invoke_all('user_logout', $user);

    // Destroy the current session, and reset $user to the anonymous user.
    session_destroy();

    drupal_set_message("แล้วพบกันใหม่");

    drupal_goto();
  }


  function changemakers_image_validate($form, &$form_state) {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    //form_set_error('field-name', t('Custom error message'));
  }



   


  function changemakers_form_alter(&$form, &$form_state, $form_id) {
        // echo "<pre>";
        // print_r($form); 
        // echo "</pre>";
      global $user;
      if(!isset($user->roles[3])){
         $form['field_id_old_content']['#access'] = 0;
      }else{
         $form['field_id_old_content']['#access'] = 1;
      }
     
      switch ($form_id) {
      case 'file_entity_add_upload':
      //$form_state['#media_browser']=0;
        //    echo "<pre>";
        // print_r($form); 
        // echo "</pre>";
      break;

      case 'views_exposed_form':
        
        foreach($form AS $key => $element) {

          // print "<pre>";
          // print_r($element);
          // print "</pre>";
          if (is_array($element) && isset($element['#description'])) {
            unset($form[$key]['#description']);
          }       
       
          if(strstr($key,'problem')){
              
            $entity =taxonomy_get_tree(4);
            foreach($entity as $key2 => $problem){
                
              if($problem->parents[0]!=0){
                @$element['#options'][$key2]->option[$problem->tid] = $problem->name;               
              }else{                       
                @$element['#options'][$key2]->option[$problem->tid] = '<span class="bold title-problem">'.$problem->name.'</span>';      
              }

              
             
            }
           
          }
          if(strstr($key,'target')){
            $entity =taxonomy_get_tree(5);
            foreach($entity as $key2 => $target){
              if($target->parents[0]!=0){
                $element['#options'][$key2]->option[$target->tid] = $target->name;               
              }else{                       
                $element['#options'][$key2]->option[$target->tid] = '<span class="bold">'.$target->name.'</span>';      
              }
              
            }
           
          }
          if(strstr($key,'course_interest')){
            $entity =taxonomy_get_tree(3);
            foreach($entity as $key2 => $interest){
              if($interest->parents[0]!=0){
                $element['#options'][$key2]->option[$interest->tid] = $interest->name;               
              }else{                       
                $element['#options'][$key2]->option[$interest->tid] = '<span class="bold">'.$interest->name.'</span>';      
              }
              
            }
           
          }
         
        };

        // Temporally fix BUG: https://www.drupal.org/node/339384
       
        //$form['taxonomy']['#type'] = 'checkbox';
      break;
      case 'user_register_form':



        $form['captcha'] = array(
          '#type' => 'captcha',
          '#captcha_type' => 'image_captcha/Image',
        );

        // print '<pre>';
        // print_r($form['account']['roles']);
        // print '</pre>';

        $form['resetbutton'] = array(
          '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
          '#weight' => 1000
        );

        $length = 6;
        $chars = array_merge(range(0,9));
        shuffle($chars);
        $randomnumber = implode(array_slice($chars, 0, $length));
        $form['field_profile_active_key']['und'][0]['value']['#default_value'] = $randomnumber;

        //$form['account']['roles'][10]= TRUE;
        // $form['account']['roles'][10] = array(
        //                       '#type' => 'radios',
        //                       '#title' => 'unvierfied',
        //                       '#default_value' => 10,
        //                   );

        //drupal_goto("/node/4");

        //$form['#validate'][] = 'changemakers_register_validate';
        // Add the final user registration form submit handler.
        //$form['#submit'][] = 'changemakers_register_submit';
        $form['#submit'][] = 'changemakers_register_submit_form';

        $form['field_profile_problem_interest']['und']['#options'] = str_replace("-","",$form['field_profile_problem_interest']['und']['#options']);
        $form['field_profile_skill_interest']['und']['#options'] = str_replace("-","",$form['field_profile_skill_interest']['und']['#options']);

        // print '<pre>';
        // print_r($form);
        // print '</pre>';
        return $form;
        break;

      case 'user_profile_form':
        global $user;
       
          $actual_link = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";

          $url_ac = explode("?", $actual_link);
          $url_ac_search = explode("=",$url_ac[1]);

          if($url_ac_search[0] == "pass-reset-token"){
            $form['field_following_project']['#access'] = 0;
            $form['field_profile_active_key']['#access'] = 0;
            $form['field_profile_password_otp']['#access'] = 0;
            $form['field_profile_user_id']['#access'] = 0;
            $form['field_organization_name_th']['#access'] = 0;
            $form['field_organization_name_en']['#access'] = 0;
            $form['field_organization_position']['#access'] = 0;
            $form['field_following_project']['#access'] = 0;
            $form['field_profile_nickname']['#access'] = 0;
            $form['field_organization']['#access'] = 0;
            $form['field_profile_title']['#access'] = 0;
            $form['field_profile_firstname']['#access'] = 0;
            $form['field_profile_lastname']['#access'] = 0;
            $form['field_profile_birthdate']['#access'] = 0;
            $form['field_profile_address']['#access'] = 0;
            $form['field_profile_province']['#access'] = 0;
            $form['field_profile_zipcode']['#access'] = 0;
            $form['field_profile_social']['#access'] = 0;
            $form['field_profile_social_name']['#access'] = 0;
            $form['field_profile_phone']['#access'] = 0;
            $form['field_profile_contact']['#access'] = 0;
            $form['field_profile_to_study']['#access'] = 0;
            $form['field_profile_education_level']['#access'] = 0;
            $form['field_profile_education_year']['#access'] = 0;
            $form['field_profile_institution']['#access'] = 0;
            $form['field_profile_faculty']['#access'] = 0;
            $form['field_profile_major']['#access'] = 0;
            $form['field_profile_problem_interest']['#access'] = 0;
            $form['field_profile_target_group']['#access'] = 0;
            $form['field_profile_target_group_other']['#access'] = 0;
            $form['field_proflie_language']['#access'] = 0;
            $form['field_profile_skill_interest']['#access'] = 0;
            $form['field_interest_other']['#access'] = 0;
            $form['field_intro_self']['#access'] = 0;
            $form['field_profile_nickname']['#access'] = 0;
            $form['field_following_project']['#access'] = 0;
            $form['picture']['#access'] = 0;
            $form['field_change_password_time']['#access'] = 0;
            $form['field_profile_join_interest']['#access'] = 0;
            

          }else{

            $form['account']['roles']['#type'] = 'radios';
            $form['account']['roles']['#required'] = TRUE;
            foreach($form['account']['roles']['#default_value'] as $key => $default){
                if($default != 2){
                    $form['account']['roles']['#default_value'] = $form['account']['roles']['#default_value'][$key];
                }
            }

            if($user->roles[3]){
              $form['field_profile_user_id']['#access'] = 0;
              $form['field_organization_position']['#access'] = 0;
              $form['field_profile_password_otp']['#access'] = 0;
              $form['field_profile_active_key']['#access'] = 0;
              $form['field_following_project']['#access'] = 0;
              $form['field_change_password_time']['#access'] = 0;

              
            }
            else
            {
              
              $form['field_profile_active_key']['#access'] = 0;
              $form['field_profile_password_otp']['#access'] = 0;
              $form['field_profile_user_id']['#access'] = 0;
              $form['field_organization_name_th']['#access'] = 0;
              $form['field_organization_name_en']['#access'] = 0;
              $form['field_organization_position']['#access'] = 0;
              $form['field_following_project']['#access'] = 0;
              $form['field_profile_nickname']['#access'] = 0;
              $form['field_change_password_time']['#access'] = 0;

            }
          }

          $form['field_profile_problem_interest']['und']['#options'] = str_replace("-","",$form['field_profile_problem_interest']['und']['#options']);
          $form['field_profile_skill_interest']['und']['#options'] = str_replace("-","",$form['field_profile_skill_interest']['und']['#options']);

          $form['#submit'][] = 'changemakers_profile_form_submit';

        

        break;
      case 'user_login':

        $form['name'] = array(
          '#type' => 'textfield',
          '#title' => '',
          '#size' => 60,
          '#maxlength' => 60,
          //'#required' => 1,
          '#placeholder' => 'E-mail',
          );
        $form['pass'] = array(
          '#type' => 'password',
          '#title' => '',
          '#size' => 60,
          '#maxlength' => 60,
          //'#required' => 1,
          '#placeholder' => 'Password',
          );
        $form['#validate'][0] = 'changemakers_login_name_validate';
        $form['#validate'][1] = 'changemakers_login_authenticate_validate';
        $form['#validate'][2] = 'changemakers_login_final_validate';

       // $form['action']['submit']['#value'] = 'Login My';
        $form['actions'] = array(
          '#type' => 'actions',
          'submit' => array(
            '#type' => 'submit',
            '#value' => 'Log in'
          ),
          '#weight' => 1,
        );

        $form['links'] = array(
          '#markup' => '<div  id="forgot_password"><a href="/user/password" title="Forgot your password">Forgot your password</a></div>',
          '#weight' => 10,
          );
        //$form['redirect'] = 'node/65';
        // $form['links'] = array(
        //   '#markup' => 'Forgot your password',
        // );

        //$form['#']
        // $form['#validate'][0] = array(
        //   [0] => 'changemakers_login_name_validate',
        //   [1] => 'changemakers_login_authenticate_validate',
        //   [2] => 'changemakers_login_final_validate',
        // );
        

        // print '<pre>';
        // print_r($form);
        // print '</pre>';

        break;
      case 'user_pass':
        $form['#submit'][] = 'changemakers_password_recover_submit';
        break;
      case 'course_node_form':
        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#access'] = 0;

        break;
      case 'forum_node_form': //add new forum for admintrator and user and coach
        global $user;
        //print "tong 1 ";
        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#access'] = 0;
        if(arg(0)=="node" && arg(2)=="edit"){

        }else{
           $form['resetbutton'] = array(
            '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
            '#weight' => 1000
          );
        }
       
        $form['actions']['submit']['#attributes'] = array('id' => array('edit-submit','submit_forum')); 
        $form['title']['#title'] = "หัวข้อ";
        $form['body']['und'][0]['#title'] = "รายละเอียด";

          $data = array();
          $data[] = array('id'=>"_none",'value'=>"- None -");
          if(!isset($user->roles[3])){
            if(isset($user->roles[5])){
              $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                 
              }

              $coach_project = db_select('node', 'n');
              $coach_project->join('field_data_field_coach_project', 'c', 'n.nid = c.entity_id');
              $coach_project->fields('n', array('nid','title'));
              $coach_project->condition('field_coach_project_uid', $user->uid,'=');
              $results_coach_project = $coach_project->execute();
              while($record = $results_coach_project->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                  
              }

             

            }if(isset($user->roles[8])){
              $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                 
              }

            

            }if(isset($user->roles[9])){
              $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                 
              }

              // $coach_project = db_select('node', 'n');
              // $coach_project->join('field_data_field_partner_project', 'c', 'n.nid = c.entity_id');
              // $coach_project->fields('n', array('nid','title'));
              // $coach_project->condition('field_partner_project_uid', $user->uid,'=');
              // $results_coach_project = $coach_project->execute();
              // while($record = $results_coach_project->fetchAssoc()) {
              //     $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                  
              // }             

            }else{
                $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);         
              }

            } 

              $data_join_nid_1 = array();
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '1','=')
                    ->condition('data', $user->uid,'=')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_1[] = $record['sid'];         
              }
              if(!empty($data_join_nid_1)):
              $data_join_nid_1= array_unique($data_join_nid_1);
              $data_join_nid_2 = array();
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '3','=')
                    ->condition('data', 1,'=')
                    ->condition('sid', $data_join_nid_1,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_2[] = $record['sid'];         
              }
              
              $data_join_nid_2= array_unique($data_join_nid_2);
              $data_join_nid = array();
              endif;
              if(!empty($data_join_nid_2)):
                  $results_userjoin = db_select('webform_submitted_data', 'w')
                        ->fields('w')
                        ->condition('cid', '2','=')
                        ->condition('sid', $data_join_nid_2,'in')
                        ->condition('nid', 2,'=')
                        ->execute();
                  while($record = $results_userjoin->fetchAssoc()) {
                      $data_join_nid[] = $record['data'];         
                  }
                 
                  $results_join = db_select('node', 'n')
                        ->fields('n', array('nid','title'))
                        ->condition('type', 'project','=')
                        ->condition('nid', $data_join_nid,'in')
                        ->condition('status', 0,'>')
                        ->execute();
                  while($record = $results_join->fetchAssoc()) {
                      $data[] = array('id'=>$record['nid'],'value'=>$record['title']);         
                  }
              endif;

            $form['field_community_project']['und']['#options'] = array();
            foreach ($data as $key => $value) {
               $form['field_community_project']['und']['#options'][$value['id']] = $value['value'];
            } 
          }

       /* $form['body'] = array(
            '#type' => 'container',
            '#attributes' => array(
                'class' => array(
                        0 => 'field-type-text-with-summary',
                        1 => 'field-name-body',
                        2 => 'field-widget-text-textarea-with-summary'
                    )
            ),
            '#weight' => 7,
            '#tree' => 1,
            '#language' => 'und',
            'und' => array(
                    0 => array(
                            '#entity_type' => 'node',
                            '#bundle' => 'forum',
                            '#field_name' => 'body',
                            '#language' => 'und',

                            '#columns' => array(
                                    0 => 'value',
                                    1 => 'summary',
                                    2 => 'format'
                              ),

                            '#title' => 'รายละเอียด',
                            '#delta' => 0,
                            '#weight' => 0,
                            '#type' => 'text_format',
                            '#rows' => 10,
                            '#attributes' => array(
                                    'class' => array
                                        (
                                            0 => 'text-full'
                                        )
                                ),

                            '#base_type' => 'textarea',
                    ),      

                    //'#theme' => 'field_multiple_value_form',
                    '#field_name' => 'body',
                    '#cardinality' => 1,
                    '#title' => 'Body',
                    '#max_delta' => 0,
                    '#after_build' => array(
                            0 => 'field_form_element_after_build'
                        ),

                    '#language' => 'und',
                ),

            '#access' => 1,
        );*/

        if(isset($user->roles[5]) == "coach"){
          $form['taxonomy_forums']['#access'] = 1;
        }
        else if(($user->roles[3]) == "administrator"){
          $form['taxonomy_forums']['#access'] = 1;
        }
        else
        {
          $form['taxonomy_forums']['#access'] = 0;
          $form['field_community_forum_topic_type']['und']['#options'] = array(111=>'NEED',112=>'OFFER',115 => 'ANNOUNCEMENT', 117 => 'OTHERS');
          //$form['taxonomy_forums']['und']['#default_value'] = array( 1 => 'Member Community');
        }

        $form['field_commuity_date']['#access'] = 0;
        $form['options']['#access'] = 0;
        $form['author']['#access'] = 0;
        $form['comment_settings']['#access']=0;
        $form['path']['#access']=0;
        $form['revision_information']['#access']=0;
        $form['actions']['submit']['#value'] = "Publish";
        $form['shadow']['#access']=0;

        //$form['field_commuity_image']['#validate'] = 'changemakers_image_validate';
        // print "<pre>";
        // print_r($form);
        // print "</pre>";

        break;
      case 'session_offer_node_form':
        $form['title'] = array(
            '#type' => 'textfield',
            '#title' => 'Session Offer and Available Time',
            '#default_value' => "Session Offer and Available Time",
            '#required' => 1,
            '#maxlength' => 255,
            '#weight' => -5);

        $form['field_session']['und']['#suffix'] = '<div class="help-text-peoject">โปรดเลือกหัวข้อ session ที่ต้องการให้คำปรึกษาแก่ Changemakers</div>';
        break;
      case 'banner_node_form':
        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#access'] = 0;
        //  print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'project_node_form':
        global $user;
        
        // echo "<div>
        //         <p>ต้องการดูตัวอย่าง ขั้นตอนสำหรับสร้างโครงการ</p><br>
        //         <input class='btn btn--delete pagebigtab__2btn' type='button' name='guideline' id='guideline' value='Guideline how to create a project'>
        //       </div>";
        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#access'] = 0;
        $form['resetbutton'] = array(
          '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
          '#weight' => 1000
        );

        if(empty($user->roles[3])){

          $form['guideline_button'] = array(
            '#markup' => "<div class='row' id='guideline_div'>
                            <p>วิธีการสร้างโปรเจกต์บนเว็บไซต์</p>
                            <a target='_blank' href='/how-create-project'>
                              <input class='btn btn-primary form-submit' type='button' name='guideline' id='guideline' value=\"Guideline's how to create a project\">
                            </a>
                          </div>",
            '#weight' => 0
          );
        }


        $form['field_user_join_project']['#access'] = 0;
       


        // $form['field_project_conditions_partici']['und']['#options'] = array(1 => 'สมาชิกที่ขอเข้าร่วมโปรเจคได้ต้องเป็น Verified Member เท่านั้น',
        //                                                                      2 => 'สมาชิกที่เข้าร่วมโปรเจคได้ต้องได้รับเชิญเท่านั้น');

        unset($form['field_project_conditions_partici']['und']['#options']['_none']); 
        // print "<pre>";
        //   print_r($form['field_project_conditions_partici']['und']['#options']);
        //   print "</pre>";
        


          if($user->roles[3]){
            $form['field_project_status']['#access'] = 1;
            $form['field_follow_project']['#access'] = 1;
            $form['field_count_views_project']['#access'] = 1;

            $form['field_coach_project']['#access'] = 1;
            $form['field_organization_project']['#access'] = 1;
            $form['field_partner_project']['#access'] = 1;
            $form['field_helpdesk_project']['#access'] = 1;

            $form['field_didi']['#access'] = 1;
            $form['field_swot']['#access'] = 1;
            $form['field_brainstorming']['#access'] = 1;
            $form['field_idea_selection']['#access'] = 1;
            $form['field_theory_of_change']['#access'] = 1;
            $form['field_impact_value']['#access'] = 1;
            $form['field_drafting_your_business_mod']['#access'] = 1;
            $form['field_value_proposition']['#access'] = 1;
            $form['field_stakeholder_analysis']['#access'] = 1;
            $form['field_business_model_canvas']['#access'] = 1;
            $form['field_build_value_proposition_hy']['#access'] = 1;
            $form['field_other_document_project']['#access'] = 1;

            $form['field_project_stage']['#access'] = 1;
            $form['field_verification']['#access'] = 1;
            $form['field_count_views_project']['#access'] = 0;

          }else{
            $form['field_project_status']['#access'] = 0;
            $form['field_follow_project']['#access'] = 0;
            $form['field_count_views_project']['#access'] = 0;

            $form['field_coach_project']['#access'] = 0;
            $form['field_organization_project']['#access'] = 0;
            $form['field_partner_project']['#access'] = 0;
            $form['field_helpdesk_project']['#access'] = 0;

            $form['field_didi']['#access'] = 0;
            $form['field_swot']['#access'] = 0;
            $form['field_brainstorming']['#access'] = 0;
            $form['field_idea_selection']['#access'] = 0;
            $form['field_theory_of_change']['#access'] = 0;
            $form['field_impact_value']['#access'] = 0;
            $form['field_drafting_your_business_mod']['#access'] = 0;
            $form['field_value_proposition']['#access'] = 0;
            $form['field_stakeholder_analysis']['#access'] = 0;
            $form['field_business_model_canvas']['#access'] = 0;
            $form['field_build_value_proposition_hy']['#access'] = 0;
            $form['field_other_document_project']['#access'] = 0;

            $form['field_project_stage']['#access'] = 0;
            $form['field_verification']['#access'] = 0;
            $form['field_measure_testing_and_data_c']['#access'] = 0;
            $form['field_learn_feedback_analysis']['#access'] = 0;
            $form['field_decide_criteria_for_making']['#access'] = 0;
            $form['field_business_plan']['#access'] = 0;
            $form['field_workplan']['#access'] = 0;
            $form['field_factsheet']['#access'] = 0;
            $form['field_visual']['#access'] = 0;
            $form['field_verbal']['#access'] = 0;
            $form['field_profit_loss_projection']['#access'] = 0;
            $form['field_aar']['#access'] = 0;
            $form['field_scaling_plan']['#access'] = 0;




            if($user->roles[10]){
              $form['field_verification']['und']['#default_value'][0]= 3;
            }
            

          }

          

          $form['title'] = array(
            '#type' => 'textfield',
            '#title' => 'ชื่อโครงการ',
            '#default_value' => $form['#node']->title,
            '#required' => 1,
            '#maxlength' => 255,
            '#weight' => -5);

          $form['actions'] = array( 
            '#type'=> 'actions',
            'submit'=> array(
              '#type' => 'submit',
              '#access' => 1,
              '#value' => 'Submit',
              '#weight' => 5,
              '#submit' => array( 0 => 'node_form_submit')),
          );

          $form['options']['promote']['#default_value'] = 0;
          $form['field_problem_topic']['und']['#options'] = str_replace("-","",$form['field_problem_topic']['und']['#options']);

          $form['field_project_solutions']['und']['#suffix'] = '<div class="help-text-peoject">ระบุวิธีที่ทางโครงการเลือกที่จะใช้ป้องกัน หรือแก้ไขปัญหาสังคมดังกล่าว</div>';

          $form['field_project_impact']['und']['#suffix'] = '<div class="help-text-peoject">อธิบายผลที่คาดว่าจะเกิดขึ้นในทางสังคมหากทำโครงการนี้สำเร็จ</div>';


          $form['field_project_background']['und']['#suffix'] = '<div class="help-text-peoject">อธิบายเหตุผลหรือแรงบันดาลใจในการริเริ่มโครงการ และโครงการนี้มีความเชื่อมโยงกับทีมงานที่คิดริเริ่มโครงการอย่างไร</div>';


          $form['field_describe_problem']['und']['#suffix'] = '<div class="help-text-peoject">อธิบายถึงสถานการณ์ของประเด็นปัญหานั้นๆ พร้อมเล่าสาเหตุหลักที่ทำให้เกิดปัญหา</div>';

          // $form['field_project_website']['und']['#suffix'] = '<div class="help-text-peoject">ตัวอย่างการใส่ เว็บโซต์ : www.schoolofchangemakers.com </div>';

          // print "<pre>";
          // print_r($form);
          // print "</pre>";
        break;
      case 'comment_node_knowledge_form':

        $form['subject']['#title'] = "หัวข้อ *";
        $form['subject']['#default_value'] = "comment_knowledge";
        //$form['subject']['#access'] = 0;
        $form['field_like_knowledge']['#access'] = 0;
        $form['field_user_like_knowledge']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;
        $form['#attributes'] = array('name' => 'comment_knowledge_form','class' => array('0' => 'comment-form'));

        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );

        // $form['submit_comment'] = array(
        //   '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
        //   '#weight' => 1000
        // );
        $form['actions']['submit']['#attributes'] = array('id' => 'knowledge_comment'); 
        $form['author']['_author']['#access'] = 0;
        //$form['actions']['submit']['#type'] = 'button'; 

        //$form['actions']['submit']['#attributes'] = array('id' => 'project_comment'); 
       
        break;
      case 'comment_node_project_form':

        $form['subject']['#title'] = "หัวข้อ *";
        $form['subject']['#default_value'] = "comment_project";
        //$form['subject']['#access'] = 0;
        $form['field_like']['#access'] = 0;
        $form['field_user_like']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;
        $form['#attributes'] = array('name' => 'comment_project_form','class' => array('0' => 'comment-form'));

        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );

        // $form['submit_comment'] = array(
        //   '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
        //   '#weight' => 1000
        // );
        $form['actions']['submit']['#attributes'] = array('id' => 'project_comment'); 
        $form['author']['_author']['#access'] = 0;
        //$form['actions']['submit']['#type'] = 'button'; 

        //$form['actions']['submit']['#attributes'] = array('id' => 'project_comment'); 
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'comment_node_event_form':

        $form['author']['_author']['#access'] = 0;

        $form['#attributes']['id'] = 'event_comment_form_id';

        $form['subject']['#title'] = "หัวข้อ";
        $form['subject']['#default_value'] = "comment_event";
        //$form['subject']['#access'] = 0;
        $form['field_like_event']['#access'] = 0;
        $form['field_user_like_event']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;
        $form['#attributes'] = array('name' => 'comment_event_form','class' => array('0' => 'comment-form'));

        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );

        $form['actions']['submit']['#attributes'] = array('id' => 'event_comment');
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'comment_node_journal_form':
        $form['author']['_author']['#access'] = 0;
        $form['#attributes']['id'] = 'journal_comment_form_id';

        $form['subject']['#title'] = "หัวข้อ";
        $form['subject']['#default_value'] = "comment_journal";
        //$form['subject']['#access'] = 0;
        $form['field_like_event']['#access'] = 0;
        $form['field_user_like_event']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;
        $form['#attributes'] = array('name' => 'comment_journal_form','class' => array('0' => 'comment-form'));

        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );

        $form['actions']['submit']['#attributes'] = array('id' => 'journal_comment');
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'comment_node_news_form':
        $form['author']['_author']['#access'] = 0;
        $form['subject']['#title'] = "หัวข้อ";
        $form['subject']['#default_value'] = "comment_news";
        //$form['subject']['#access'] = 0;
        $form['field_like_news']['#access'] = 0;
        $form['field_user_like_news']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;

        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );

        $form['actions']['submit']['#attributes'] = array('id' => 'news_comment');
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'comment_node_forum_form':
        $form['author']['_author']['#access'] = 0;
        $form['subject']['#title'] = "หัวข้อ";
        //$form['subject']['#access'] = 0;
        $form['field_like_forum']['#access'] = 0;
        $form['field_user_like_forum']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;
        $form['#attributes'] = array('name' => 'comment_community_form','class' => array('0' => 'comment-form'));
        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );

        $form['actions']['submit']['#attributes'] = array('id' => 'community_comment');
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'comment_node_campaign_form':
        $form['author']['_author']['#access'] = 0;


        $form['subject']['#title'] = "หัวข้อ";
        $form['subject']['#default_value'] = "comment_node_campaign_form";
        $form['subject']['#access'] = 0;
        $form['field_like_campaign']['#access'] = 0;
        $form['field_user_like_campaign']['#access'] = 0;
        $form['actions']['preview']['#access'] = 0;

        $form['actions'] = array( 
          '#type'=> 'actions',
          'submit'=> array(
            '#type' => 'submit',
            '#access' => 1,
            '#value' => 'Submit',
            '#weight' => 5,
            )
        );
        //$form['#attributes'] = array('name' => 'comment_node_campaign_form');
        $form['#attributes'] = array('name' => 'comment_campaign_form','class' => array('0' => 'comment-form'));
        $form['actions']['submit']['#attributes'] = array('id' => 'campaign_comment');
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'journal_node_form':
        global $user; 

        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#access'] = 0;

         $data = array();
          $data[] = array('id'=>"_none",'value'=>"- None -");
          if(!isset($user->roles[3])){
            if(isset($user->roles[5])){
              $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                 
              }

              $coach_project = db_select('node', 'n');
              $coach_project->join('field_data_field_coach_project', 'c', 'n.nid = c.entity_id');
              $coach_project->fields('n', array('nid','title'));
              $coach_project->condition('field_coach_project_uid', $user->uid,'=');
              $results_coach_project = $coach_project->execute();
              while($record = $results_coach_project->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                  
              }

             

            }if(isset($user->roles[8])){
              $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                 
              }

              // $coach_project = db_select('node', 'n');
              // $coach_project->join('field_data_field_helpdesk_project', 'c', 'n.nid = c.entity_id');
              // $coach_project->fields('n', array('nid','title'));
              // $coach_project->condition('field_helpdesk_project_uid', $user->uid,'=');
              // $results_coach_project = $coach_project->execute();
              // while($record = $results_coach_project->fetchAssoc()) {
              //     $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                  
              // }

             

            }if(isset($user->roles[9])){
              $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                 
              }

              $coach_project = db_select('node', 'n');
              $coach_project->join('field_data_field_partner_project', 'c', 'n.nid = c.entity_id');
              $coach_project->fields('n', array('nid','title'));
              $coach_project->condition('field_partner_project_uid', $user->uid,'=');
              $results_coach_project = $coach_project->execute();
              while($record = $results_coach_project->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);
                  
              }

             

            }else{
                $results = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('uid', $user->uid,'=')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);         
              }

              

           
              //  echo "<prE>";
              // print_r($data);
              // echo "</pre>";

            } 

              $data_join_nid_1 = array();
               $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '1','=')
                    ->condition('data', $user->uid,'=')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_1[] = $record['sid'];         
              }
              if(!empty($data_join_nid_1)):
              $data_join_nid_1= array_unique($data_join_nid_1);
              $data_join_nid_2 = array();
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '3','=')
                    ->condition('data', 1,'=')
                    ->condition('sid', $data_join_nid_1,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_2[] = $record['sid'];         
              }
              endif;
              if(count($data_join_nid_2) > 0){
                $data_join_nid_2= array_unique($data_join_nid_2);
              }
              
              $data_join_nid = array();
              if(!empty($data_join_nid_2)):
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '2','=')
                    ->condition('sid', $data_join_nid_2,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid[] = $record['data'];         
              }
             
              $results_join = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('nid', $data_join_nid,'in')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results_join->fetchAssoc()) {
                  $data[] = array('id'=>$record['nid'],'value'=>$record['title']);         
              }
              endif;

            $form['field_project_related']['und']['#options'] = array();
            foreach ($data as $key => $value) {
               $form['field_project_related']['und']['#options'][$value['id']] = $value['value'];
              } 
            // $form['field_project_related']['und']['#options'][1] = "NotZa";
          }

        // $form['resetbutton'] = array(
        //   '#markup' => '<button type="button" id="journal_reset" class="btn btn-danger"  >RESET</button>',
        //   '#weight' => 1000
        // );
        $form['field_journal_project_id']['#access'] = 0;
        $form['field_file_journal']['#access'] = 0;
        $form['field_journal_date']['#access'] = 0;
        $form['actions']['submit']['#value'] = "Publish Now";

        $destination = (!isset($node->nid) || isset($node->is_new)) ? 'node/add/journal' : "node/{'journal'}";



        // $form['actions']['cancel'] = array(
        //   '#markup' => l(t('Cancel'), $destination),
        //   '#weight' => 20,
        // // );
        $actual_link = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";



        $get_path = explode("/", $actual_link);
        $form['title']['#title']= "หัวข้อ";
        $form['body']['und'][0]['#title']= "รายละเอียดบันทึก";
        if($get_path[3] == "project"){
          if($user->roles[5]){
              $form['field_journal_type']['und']['#default_value'][0] = "1";
          }else{
            $form['field_journal_type']['und']['#default_value'][0] = "0";
            $form['field_journal_type']['#access'] = 0;
          }

        }else if($user->roles[3]){
          $form['field_journal_type']['#access'] = 1;
        }
        else{
          if(!empty($user->roles[5])){
            if(!empty($_GET['type_coach'])):
           //  	$path = current_path();
           //  	$breadcrumb = array();
	          // $breadcrumb[] = l('Home', '<front>');
	          // $breadcrumb[] = l('Create Journal', $path);
	          drupal_set_breadcrumb($breadcrumb);
              $form['field_journal_type']['und']['#default_value'][0] = "0";
            else :
              $form['field_journal_type']['und']['#default_value'][0] = "1";
            endif;
            $form['field_journal_type']['#access'] = 0;
          }else{
            $form['field_journal_type']['und']['#default_value'][0] = "0";
            $form['field_journal_type']['#access'] = 0;
          }

        }

  
        // global $theme;
        // if($theme=="changemakers"){
        //   $form['field_journal_type']['#access'] = 1;
        // }
        $form['options']['#access'] = 0;
        $form['author']['#access'] = 0;
        $form['comment_settings']['#access']=0;
        $form['path']['#access']=0;
        $form['revision_information']['#access']=0;

        $form['field_journal_interest']['und']['#options'] = str_replace("-","",$form['field_journal_interest']['und']['#options']);
        $form['field_journal_problem']['und']['#options'] = str_replace("-","",$form['field_journal_problem']['und']['#options']);
        
        
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        //   print "<pre>";
        // print_r($get_path);
        // print "</pre>";
        break; 
      case 'campaign_node_form':
        global $user;
         $form['resetbutton'] = array(
          '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
          '#weight' => 1000
        );
        $form['field_count_views']['#access'] = 0;
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
          //$form['field_project_join']['und'][0]['field_join_by_user']['und'][0]['value'] = $user->uid;
        $form['field_campaign_problems']['und']['#options'] = str_replace("-","",$form['field_campaign_problems']['und']['#options']);
        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#title'] = "ปักหมุดสไลด์หน้าแรก";

        $form['field_sponsored']['und']['#file_upload_title'] = "Add a new logo/icon";
       
        break;
      case 'webform_client_form_92':
        $arg1 = arg(1);
        // $form["submitted"]['nid']['#default_value'] = $arg1;
        // $form["submitted"]['nid']['#access'] = 0;

       
        
       $form['resetbutton'] = array(
          '#markup' => '<button type="button" id="webform_client_form_92_reset" class="btn btn-danger" >ยกเลิกการเพิ่มบันทึกทุน</button>',
          '#weight' => 1000
        );

        $form['nid']['#access'] = 0;
        $form['actions']['submit']['#value'] = "เพิ่มบันทึกทุน";


       
        if(!empty($form['#submission']->sid)){
           $form['#submit'][] = 'changemakers_extra_validate_92';
        }

        
        //$form['#submit'][] = 'changemakers_edit_fund';
        //unset($form['#submit'][1]);
        
        // $form['#action'] = '/changemakers/update_fund';

      
        

        break;
      case 'webform_client_form_1':

        global $user;

        if($user->uid != 0){
          $form['submitted']['your_name']['#default_value'] = $user->name;
          $form['submitted']['email']['#default_value'] = $user->mail;
        }

        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        break;
      case 'event_node_form':
        // print "<pre>";
        // print_r($form);
        // print "</pre>";
       $form['resetbutton'] = array(
          '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
          '#weight' => 1000
        );

       $form['field_event_skill_interest']['und']['#options'] = str_replace("-","",$form['field_event_skill_interest']['und']['#options']);
       $form['field_problem_interest']['und']['#options'] = str_replace("-","",$form['field_problem_interest']['und']['#options']);

       $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#title'] = "ปักหมุดสไลด์หน้าแรก";
        

        break;
      case 'news_node_form':
        
       $form['resetbutton'] = array(
          '#markup' => '<button type="reset" id="btn-reset" class="btn btn-danger" >RESET</button>',
          '#weight' => 1000
        );

        $form['field_problem_interest']['und']['#options'] = str_replace("-","",$form['field_problem_interest']['und']['#options']);
       
        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#title'] = "ปักหมุดสไลด์หน้าแรก";

        // print "<pre>";
        // print_r($form);
        // print "</pre>";
        

        break;
      case 'knowledge_node_form':
        $form['field_knowledge_date']['#access'] = 0;
        $form['field_knowledge_problem']['und']['#options'] = str_replace("-","",$form['field_knowledge_problem']['und']['#options']);

        $form['options']['promote']['#access'] = 0;
        $form['options']['sticky']['#access'] = 0;

        //  print "<pre>";
        // print_r($form);
        // print "</pre>";

        break;

      case 'node_delete_confirm':
        if ($form['#node']->type == 'project') {
          $form['#submit'][] = 'changemakers_redirect_tracker_delete';
        }
        break;
      // case 'journal_node_form':
      //   break;
      

      default:
        // print "<pre>";
        // print_r($form_state);
        // print "</pre>";
        # code...
        break;
     }
  }

  function changemakers_redirect_tracker_delete($form, &$form_state) {
    $form_state['redirect'] = '/projects/list';
  }


  function changemakers_password_recover_submit($form, &$form_state){
    global $base_url;
    $form_state['redirect'] =  $base_url;//"http://$_SERVER[HTTP_HOST]"; //'http://soc.devfunction.com/';
  }

  function changemakers_profile_form_submit($form, &$form_state){
    global $user;
    $form_state['redirect'] = 'user/'.$user->uid;
  }

  function changemakers_edit_fund($form, &$form_state){
    // print "<pre>";
    // print_r($form);
    // print "</pre>";

    module_load_include('inc','webform','includes/webform.submissions');
    // node เป็นก้อน สำหรับ webform
    $node_webform = node_load(92);

    webform_submission_update($node_webform,  $form['submission']);
    //drupal_goto("/project/65");
  }

  function changemakers_login_default_validators() {
    return array('changemakers_login_name_validate', 'changemakers_login_authenticate_validate', 'changemakers_login_final_validate');
  }

  /**
   * A FAPI validate handler. Sets an error if supplied username has been blocked.
   */
  function changemakers_login_name_validate($form, &$form_state) {
    if (!empty($form_state['values']['name']) && user_is_blocked($form_state['values']['name'])) {
      // Blocked in user administration.
      form_set_error('name', t('The username %name has not been activated or is blocked.', array('%name' => $form_state['values']['name'])));
    }
  }

  function changemakers_login_final_validate($form, &$form_state) {
    if (empty($form_state['uid'])) {
      // Always register an IP-based failed login event.
      flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
      // Register a per-user failed login event.
      if (isset($form_state['flood_control_user_identifier'])) {
        flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
      }

      if (isset($form_state['flood_control_triggered'])) {
        if ($form_state['flood_control_triggered'] == 'user') {
          form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
        }
        else {
          // We did not find a uid, so the limit is IP-based.
          form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
        }
      }
      else {
        form_set_error('name', t('อีเมลหรือรหัสผ่านไม่ถูกต้อง', array('@password' => url('user/password', array('query' => array('name' => $form_state['values']['name']))))));
        watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
      }
    }
    elseif (isset($form_state['flood_control_user_identifier'])) {
      // Clear past failures for this user so as not to block a user who might
      // log in and out more than once in an hour.
      flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
    }
  }

  function changemakers_login_authenticate_validate($form, &$form_state) {
    $password = trim($form_state['values']['pass']);
    if (!empty($form_state['values']['name']) && !empty($password)) {
      // Do not allow any login from the current user's IP if the limit has been
      // reached. Default is 50 failed attempts allowed in one hour. This is
      // independent of the per-user limit to catch attempts from one IP to log
      // in to many different user accounts.  We have a reasonably high limit
      // since there may be only one apparent IP for all users at an institution.
      if (!flood_is_allowed('failed_login_attempt_ip', variable_get('user_failed_login_ip_limit', 50), variable_get('user_failed_login_ip_window', 3600))) {
        $form_state['flood_control_triggered'] = 'ip';
        return;
      }
      $account = db_query("SELECT * FROM {users} WHERE name = :name OR mail = :name AND status = 1", array(':name' => $form_state['values']['name']))->fetchObject();
      if ($account) {
        if (variable_get('user_failed_login_identifier_uid_only', FALSE)) {
          // Register flood events based on the uid only, so they apply for any
          // IP address. This is the most secure option.
          $identifier = $account->uid;
        }
        else {
          // The default identifier is a combination of uid and IP address. This
          // is less secure but more resistant to denial-of-service attacks that
          // could lock out all users with public user names.
          $identifier = $account->uid . '-' . ip_address();
        }
        $form_state['flood_control_user_identifier'] = $identifier;

        // Don't allow login if the limit for this user has been reached.
        // Default is to allow 5 failed attempts every 6 hours.
        if (!flood_is_allowed('failed_login_attempt_user', variable_get('user_failed_login_user_limit', 5), variable_get('user_failed_login_user_window', 21600), $identifier)) {
          $form_state['flood_control_triggered'] = 'user';
          return;
        }
      }
      // We are not limited by flood control, so try to authenticate.
      // Set $form_state['uid'] as a flag for user_login_final_validate().
      $isEmail = 0;
      if (!filter_var($form_state['values']['name'], FILTER_VALIDATE_EMAIL) === false) {
        $isEmail = 1;
      } else {
        $isEmail = 0;
      }
      $form_state['uid'] = changemakers_user_authenticate($isEmail, $form_state['values']['name'], $password);
    }
  }

  function changemakers_user_authenticate($isEmail, $name, $password){
    $uid = FALSE;
    if (!empty($name) && !empty($password)) {
      if($isEmail == 1){
        $account = user_load_by_mail($name);
      }
      else{
        $account = user_load_by_name($name);
      }
      
      if ($account) {
        // Allow alternate password hashing schemes.
        require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
        if (user_check_password($password, $account)) {
          // Successful authentication.
          $uid = $account->uid;

          // Update user to new password scheme if needed.
          if (user_needs_new_hash($account)) {
            user_save($account, array('pass' => $password));
          }
        }
      }
    }
    return $uid;
  }

  // function changemakers_user_login_redirect($form, &$form_state) {
  //   $form_state['redirect'] = 'tong';
  // }
  function changemakers_user_login(&$edit, $account) {
    //print_r($edit);
    global $base_url;
    $url_register = $base_url."/user/register";
    $url_host = "http://$_SERVER[HTTP_HOST]";
    if($_SERVER['HTTP_REFERER'] == $url_register){
       $edit['redirect'] = $base_url;
    }
    else{
       $edit['redirect'] = $_SERVER['HTTP_REFERER'];
    }
   
    //drupal_goto( referer_uri() );
  }

  function changemakers_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
    if ($form_id == 'views_exposed_form') {
        global $user;
        //$form['tid']['#options']['All'] = t('Search');
        //community post
        $form['field_community_forum_topic_type_tid']['#options']['All'] = t('All');

        $form['taxonomy_forums_tid']['#options']['All'] = t('All');

        if((isset($user->roles[5]) && $user->roles[5]!="coach") && (isset($user->roles[3]) && $user->roles[3]!="administrator"))
        {
          $form['taxonomy_forums_tid']['#access'] = FALSE;
          $form['#info']['filter-taxonomy_forums_tid']['label'] = "";
        }
        //end community post
         
        // print '<pre>';
        // print_r($user);
        // print '</pre>';
    }
  }

  function changemakers_confirm_register(){
    $activekey = $_POST['activekey'];
    $result = db_query("select a.entity_id from field_revision_field_profile_active_key a where a.field_profile_active_key_value = ".$activekey);
    $user_data = null;
    foreach ($result as $row) {
      $user_data = user_load($row->entity_id);
    
      $json_data[]=array(
        "uid"=>$user_data->uid,
        "mail"=>$user_data->mail,
      );
    }

    if($user_data != null)
    {
      //$json = json_encode($json_data);
      //$password = "123456";
      $user_data->status = 1;
      //$user_data->pass = user_hash_password($password);
      user_save($user_data);


       
      // $to = "khunakorn@diversition.co.th"; // to e-mail address
      // $from = "admin_tong@example.com"; // from e-mail address
       
      // $subject = "activatedkey success"; // subject of e-mail
      // $body = "your password :".$password; //it might be any variable from the form eg. $form_state['values']['your_field']
       
       
      // //params is the array passed to hook_mail function 
      // $params = array(
      //     'subject' => $subject,
      //     'body' => $body,
      //     );
       
      // drupal_mail('changemakers', 'information', $to, language_default(), $params, $from);

      // $module = "changemakers";
      // $key = "activatedkey";
      // $language = "TH";
      // $to = $user_data->mail;
      // $subject ="activatedkey success";

      // drupal_mail($module, $key, $to, $language, $params = array('body'=>'password is :'.$password,'subject'=>$subject), $from = "admin@example.com", $send = TRUE);
      // $strTo = $user_data->mail;//"nalin@diversition.co.th"; 
      // $strSubject = "activatedkey success"; 
  
      // $strHeader="From: system@changemakers.devfunction.com \r\n".
      //             "Reply-To: ".$user_data->mail."\r\n".
      //             "MIME-Version: 1.0\r\n".
      //             "Content-Type: text/plain; charset=UTF-8";  
      // $strMessage = "password : ".$password;
    
      // @mail($strTo,$strSubject,$strMessage,$strHeader);

        $to = $user_data->mail;
        $subject = "Activatedkey success";

        $message = "
        <html>
        <head>
        <title>Activatedkey success</title>
        </head>
        <body>
        <p>นี่คือ password ชั่วคราว สำหรับการล็อกอินเข้าระบบ เมื่อท่านเข้าระบบเรียบร้อยแล้วกรุณาเปลี่ยน password</p>
        <table>
        <tr>
        <th>Passwors :</th>
        <th>".$password."</th>
        </tr>
        </table>
        </body>
        </html>
        ";

        // Always set content-type when sending HTML email
        $headers = "MIME-Version: 1.0" . "\r\n";
        $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";

        // More headers
        $headers .= 'From: <changemakers@example.com>' . "\r\n";
        $headers .= 'Cc: myboss@example.com' . "\r\n";

        mail($to,$subject,$message,$headers);
          

      
      //echo $user_data->pass; 
      drupal_goto('/registration/confirmed');


    }
    else
    {
      echo "active key incorrect";

      $options = array('query' => array('incorrect'=>1));
      drupal_goto('/user/register/activatedkey/',$options);
    }
    
    // $query = db_select("select uid from users where field_profile_active_key = 961843");
    // foreach ($query as $key => $value) {
      
    // }
    // // $query = db_select('users')
    // //           ->fields('field_profile_active_key')
    // //           ->condition('field_profile_active_key','value','961843');
    // // $row = $query->execute();

    // // $result = db_query("select a.uid,a.name,b.field_per_org_tid from users a,field_data_field_per_org b where a.uid = b.entity_id and b.field_per_org_tid = :org",
    // //   array(
    // // ":org"=>arg(2)
    // // ));
    
    // // echo $row;
    // echo $query;
  }

  function changemakers_save_otp(){

    global $user;

    $user_data = user_load($user->uid);

    $user_phone = $user_data->field_profile_phone['und'][0]['value'] ;
    $mobile = "66" . substr($user_phone,1);

    if(isset($_POST['submit']))
    {
      $length = 6;
      $chars = array_merge(range(0,9));
      shuffle($chars);
      $randomnumber = implode(array_slice($chars, 0, $length));

      $mobile = "66" . substr($user_phone,1);
      //$message = "Changemakers Verified Member, OTP =".$randomnumber;
      $user_data->field_profile_password_otp['und'][0]['value'] = $randomnumber;
      
      user_save($user_data);

      // Encode Messagge
      //$message=rawurlencode($message);

      // check if it's Ranya number, no need to send sms
      // remove this if else when on production
      // keep only the $status = file_get_contents(.....) line
      /*
      $mobile_list = array('66867847488');
      if(in_array($mobile, $mobile_list)):
        $status = '1701|Developer Number';
      else:
        $status = file_get_contents('http://api.rushsms.com:8080/?username=div-pinspirer&password=mypspr&type=5&delivery=1&mobile=' . $mobile . '&sender=PINSPIRER&message=' . $message);
      endif;
      */
      // end of development checking here
      //+66875777884&sender=Pinspirer&message=send
      //http://api.rushsms.com/?username=div-pinspirer&password=mypspr&type=0&delivery=1&mobile=66875777884&sender=Pinspirer&message=send
      // $status = file_get_contents('http://api.rushsms.com/?username=div-pinspirer&password=mypspr&type=0&delivery=1&mobile='. 
      //   $mobile . '&sender=Pinspirer&message='.$message);
      // $message=rawurlencode($message);

      // $status = file_get_contents("http://api.rushsms.com/?username=div-pinspirer&password=mypspr&type=0&delivery=1&mobile=".$mobile."&sender=Pinspirer&message=".$message);

      //require('sendMessageService.php');

      // define account and password
      $account = 'post01@socweb';
      $password = '56F6BFF5F38DC2474E31B418FBC66CE2D6B421F7F07A71A58CD918A880D2E876';

      // Send Single Message
      $mobile_no = $user_phone;
      $message = "Changemakers Verified Member, OTP =".$randomnumber;
      $category = 'General';
      $sender_name = '';

      $results = SendMessageService::sendMessage($account, $password, $mobile_no, $message, '', $category, $sender_name);



      // use http proxy
      //$proxy = 'localhost:8888';
      //$proxy_userpwd = 'username:password';
      //$results = SendMessageService::sendMessage($account, $password, $mobile_no, $message, '', $category, $sender_name, $proxy, $proxy_userpwd);

      if ($results['result']) {
        echo 'Send Success.'.' Task ID='.$results['task_id'].', Message ID='.$results['message_id'];
      } else {
        echo $results['error'];
      }
      
      //echo 'http://api.rushsms.com:8080/?username=div-pinspirer&password=mypspr&type=0&delivery=1&mobile=' . $mobile . '&sender=PINSPIRER&message='.$message;
      // $sms = new SmsLog();
      // $sms->mobile = $mobile;
      // $sms->message = $message;
      // $sms->return = $status;
      // $sms->create_at = date("Y-m-d H:i:s");
      // $sms->save();
      $options = array('query' => array('send-sms'=>1));
      drupal_goto('/verified-member',$options);
    }
  }

  function changemakers_verified_member(){
    global $user;

    $user_data = user_load($user->uid);

    $otp_phone = $user_data->field_profile_password_otp['und'][0]['value'];
    //$user_data->field_profile_user_id['und'][0]['value'] = $_POST['user_id_card'];
    if($_POST['otp'] != $otp_phone)
    {
      //drupal_goto('/node/46/incorrect');
      drupal_set_message(t('รหัสยืนยันไม่ถูกต้อง'), 'error');
      drupal_goto('/verified-member');


    }
    else
    {
      $myuserroles = $user_data->roles; 
      $myuserroles[4]  = 'verified'; 
      $myuserroles[10]  = "";

      $sql= "select nid from node where type='project' and uid ='".$user->uid."'";
      $query_db = db_query($sql);

      foreach ($query_db as $key => $value) {
        $node_project = node_load($value->nid);
        // print '<pre>';
        // print_r($node_project);
        // print '</pre>';
        $node_project->field_verification['und'][0]['value'] = 2;
        node_save($node_project);
      }
      // print '<pre>';
      // print_r($myuserroles);
      // print '</pre>';
      module_invoke('user', 'save', $user_data, array('roles' => $myuserroles)); 

      
      

      // $user_data->roles[10] = "";
      // $user_data->roles[4] = "verified";
      // user_save($user_data);
      drupal_goto('/user');
    }
  }
#end function changemakers registration

#function for changemakers project
  //***************************************************** function for changemakers project *********************************************************//
  function changemakers_get_status_team_partner($nid){
    global $user;
    $node_data = node_load($nid);
    $team = 0;

    if(count($node_data->field_partner_project['und']) != 0){
      foreach ($node_data->field_partner_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }
    return $team;
    
  }

  function changemakers_get_status_team($nid){
    global $user;
    $node_data = node_load($nid);
    $team = 0;
    if(count($node_data->field_coach_project['und']) != 0){
      foreach ($node_data->field_coach_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }
    if(count($node_data->field_partner_project['und']) != 0){
      foreach ($node_data->field_partner_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }
    if(count($node_data->field_helpdesk_project['und']) != 0){
      foreach ($node_data->field_helpdesk_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }
    return $team;
    
  }

  function changemakers_get_status_team_org($nid){
    global $user;
    $node_data = node_load($nid);
    $user_data = user_load($user->uid);
    $team = 0;
    if(count($node_data->field_organization_project['und']) != 0){
      foreach ($node_data->field_organization_project['und'] as $key => $value) {
        if($value['tid'] == $user_data->field_organization['und'][0]['tid']){
          $team = 1;
        }
      }
    }
        // print "<pre>";
        // print_r($node_data);
        // print "</pre>";
    return $team;
    
  }

  function changemakers_get_role_upload_document($nid){
    global $user;
    $node_data = node_load($nid);
    $team = 0;
    if(count($node_data->field_coach_project['und']) != 0){
      foreach ($node_data->field_coach_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }

    if(count($node_data->field_helpdesk_project['und']) != 0){
      foreach ($node_data->field_helpdesk_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }
    return $team;
    
  }

  function changemakers_get_status_journal_team($nid){
    global $user;
    $node_data = node_load($nid);
    $team = 0;
    if(count($node_data->field_coach_project['und']) != 0){
      foreach ($node_data->field_coach_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }

    if(count($node_data->field_partner_project['und']) != 0){
      foreach ($node_data->field_partner_project['und'] as $key => $value) {
        if($value['uid'] == $user->uid){
          $team = 1;
        }
      }
    }
    return $team;
    
  }

  function changemakers_delete_data_request_project(){
    $nid = $_POST['nid'];
    $sid = $_POST['sid'];
    $uid = $_POST['uid'];
    module_load_include('inc','webform','includes/webform.submissions');
    $node_webform = node_load(2);

    $submission = webform_get_submission(2, $sid);//(array('nid'=>2,'sid'=>$sid));


    webform_submission_delete($node_webform,  $submission);
    $u = user_load($uid);
    for ($i=0; $i < count($u->field_following_project['und'])  ; $i++) { 
      if($u->field_following_project['und'][$i]['nid'] == $nid){
        unset($u->field_following_project['und'][$i]);
      }
    }

    $u->field_following_project['und'][]['nid']=$nid;

    //print_r($node_id);
    user_save($u);

    drupal_set_message("ลบข้อมูลเรียบร้อย");

    $options = array('query' => array('type' => 'participation'));
    $alias = drupal_get_path_alias('node/'.$nid);

    drupal_goto('/'.$alias, $options);
  }

  function changemakers_join_project(){
    global $user;
    module_load_include('inc','webform','includes/webform.submissions');

    $seleteions = webform_get_submissions(array('nid'=>2));

    




    $result = array();
    $i = 0;
    $check = 0;
    foreach ($seleteions as $key => $value) {
      if($value->data[1][0] == $_POST['submitted']['uid'] && $value->data[2][0] == $_POST['submitted']['nid'])
      {
        $check = 1;
      }
    }

    // print "<pre>";
    //     print_r($_POST['submitted']['nid']);
    //     print "</pre>";

    //Start Webform //
    if($check == 0){

      if($_POST['op'])
      {
        $web_form = node_load(2);
        $node_id =$_POST['submitted']['nid'];
        if($user->roles[3]){
            $data = array(
            1 => array('0' => $_POST['submitted']['uid']),
            2 => array('0' => $_POST['submitted']['nid']),
            3 => array('0' => 1),
            );
        }
        else{
          $chcek_follow = 0;
          $u = user_load($_POST['submitted']['uid']);
          if(count($u->field_following_project['und']) != 0){
            foreach ($u->field_following_project['und'] as $key => $value) {
              if($node_id == $value['nid']){
                $chcek_follow = 1;
              }
            }
          }

          if($chcek_follow == 0){
            
            $u->field_following_project['und'][]['nid']=$_POST['submitted']['nid'];
            user_save($u);

          }
            
            $data = array(
            1 => array('0' => $_POST['submitted']['uid']),
            2 => array('0' => $_POST['submitted']['nid']),
            3 => array('0' => $_POST['submitted']['status']),
            );
            drupal_set_message(t('โปรดรอการอนุมัติจากผู้ดูแลโครงการ'));
        }
        $submission = (object) array(
          // 'nid' => 1,
          'uid' => $_POST['submitted']['uid'],
          'submitted' => REQUEST_TIME,
          'remote_addr' => ip_address(),
          'is_draft' => FALSE,
          'data' => $data,
        );



        
        
        $submission = webform_submission_insert($web_form,$submission);
        $alias = drupal_get_path_alias('node/'.$_POST['submitted']['nid']);
        drupal_goto('/'.$alias);


      }
    }else{
      //drupal_set_message(t('โปรดรอการอนุมัติจากผู้ดูแลโครงการ'));
      $alias = drupal_get_path_alias('node/'.$_POST['submitted']['nid']);
      drupal_goto('/'.$alias);
    }
   
   

    // End web form //
  }

  function changemakers_project_delete_file(){
    //$path = $_POST['path'];
    $nid = $_POST['nid'];
    $file_index = $_POST['file_index'];
    $node = node_load($nid);
    if($file_index == 1){
      $node->field_didi = array();
    }else if($file_index == 2){
      $node->field_swot = array();
    }else if($file_index == 3){
      $node->field_brainstorming = array();
    }else if($file_index == 4){
      $node->field_idea_selection = array();
    }else if($file_index == 5){
      $node->field_theory_of_change = array();
    }else if($file_index == 6){
      $node->field_impact_value = array();
    }else if($file_index == 7){
      $node->field_drafting_your_business_mod = array();
    }else if($file_index == 8){
      $node->field_value_proposition = array();
    }else if($file_index == 9){
      $node->field_stakeholder_analysis = array();
    }else if($file_index == 10){
      $node->field_business_model_canvas = array();
    }else if($file_index == 11){
      $node->field_build_value_proposition_hy = array();
    }else if($file_index == 12){
      $node->field_measure_testing_and_data_c = array();
    }else if($file_index == 13){
      $node->field_learn_feedback_analysis = array();
    }else if($file_index == 14){
      $node->field_decide_criteria_for_making = array();
    }else if($file_index == 15){
      $node->field_business_plan = array();
    }else if($file_index == 16){
      $node->field_workplan = array();
    }else if($file_index == 17){
      $node->field_factsheet = array();
    }else if($file_index == 18){
      $node->field_visual = array();
    }else if($file_index == 19){
      $node->field_verbal = array();
    }else if($file_index == 20){
      $node->field_profit_loss_projection = array();
    }else if($file_index == 21){
      $node->field_aar = array();
    }else if($file_index == 22){
      $node->field_scaling_plan = array();
    }
    else if($file_index == 23){
      $i = 0;
      foreach ($node->field_other_document_project['und'] as $key => $value) {
        if($value['fid'] == $_POST['fid']){
          $node->field_other_document_project['und'][$i] = array();
        }
        $i++;
      }
    }

    node_save($node);
    
    
    // //$path = 'public://not_imported_longanswer.csv';
    // $fid = db_query("select fid FROM {file_managed} WHERE uri = :path", array(':path' => $path))->fetchField();
    // if ($fid) {
    //   $file = file_load($fid);
    //   file_delete($file);
    // }
    // else {
    //   file_unmanaged_delete($path);
    // }

    print "<pre>";
    print_r($node->field_other_document_project['und']);
    print "</pre>";

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$nid);
    drupal_goto('/'.$alias, $options);
  }
  function changemakers_get_project_join_community($nid){
    global $user;
    $sql= "select c.entity_id 
    from field_data_field_community_project c
    inner join node n on c.entity_id = n.nid
    left join field_data_field_community_status s on s.entity_id = n.nid
    left join field_data_taxonomy_forums t on t.entity_id = n.nid
    where c.field_community_project_nid ='".$nid."' 
    and s.field_community_status_value = 1
    and t.taxonomy_forums_tid = 1
    order by n.created DESC ";
    $query_db = db_query($sql);
    $i = 0;
    $commu_data = array();
    foreach ($query_db as $row){
      $node_commu = node_load($row->entity_id);
      $data_user = user_load($node_commu->uid);

        $date_campaign = $node_commu->field_commuity_date['und'][0]['value'];
        $date_for_campaign = changemakers_get_date_start_date($date_campaign);
        $date_created = changemakers_format_date_thai_short($node_commu->created);
        $commu_data[$i]['title'] = $node_commu->title;
        if($node_commu->field_commuity_image['und'][0]['filename']){
           $commu_data[$i]['picture'] =  image_style_url("cover-image", $node_commu->field_commuity_image['und'][0]['uri']); 
        }else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 111){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_need.jpg';
        }else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 117){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_other.jpg';
        }
        else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 112){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_offer.jpg';
        }else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 113){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_other.jpg';
        }
        else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 114){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_other.jpg';
        }
        else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 115){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_announcement.jpg';
        }
        else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 116){
           $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_coach_record.jpg';
        }

       
        $commu_data[$i]['date'] = $date_created;
        $commu_data[$i]['nid'] =  $node_commu->nid;
        $i++;

      // else if(isset($user->roles[5]) || isset($user->roles[3]))
      // {
      //   $date_campaign = $node_commu->field_commuity_date['und'][0]['value'];
      //   $date_for_campaign = changemakers_get_date_start_date($date_campaign);
      //   $date_created = changemakers_format_date_thai_short($node_commu->created);
      //   $commu_data[$i]['title'] = $node_commu->title;
      //   if($node_commu->field_commuity_image['und'][0]['filename']){
      //      $commu_data[$i]['picture'] =  image_style_url("cover-image", $node_commu->field_commuity_image['und'][0]['uri']); 
      //   }else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 111){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_need.jpg';
      //   }else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 117){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_other.jpg';
      //   }
      //   else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 112){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_offer.jpg';
      //   }else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 113){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_other.jpg';
      //   }
      //   else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 114){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_other.jpg';
      //   }
      //   else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 115){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_announcement.jpg';
      //   }
      //   else if($node_commu->field_community_forum_topic_type['und'][0]['tid'] == 116){
      //      $commu_data[$i]['picture'] =  '/sites/all/themes/changemakers/images/default_coach_record.jpg';
      //   }

       
      //   $commu_data[$i]['date'] = $date_created;
      //   $commu_data[$i]['nid'] =  $node_commu->nid;
      //   $i++;
      // }
    //    print "<pre>";
    // print_r($node_commu->field_community_forum_topic_type['und'][0]['tid']);
    // print "</pre>";
    }
       
    return $commu_data;
  }
  function changemakers_get_data_from_webform_project($nid){
    module_load_include('inc','webform','includes/webform.submissions');
    $seleteions = webform_get_submissions(array('nid'=>2));

    $result = array();
    foreach ($seleteions as $key => $value) {
      if($value->data[2][0] == $nid)
      {
        $result[] = $value;
      }
    }
    return $result;
  }

  function changemakers_get_data_from_webform_project_fund($nid){
    module_load_include('inc','webform','includes/webform.submissions');
    $seleteions = webform_get_submissions(array('nid'=>92));

    $result = array();
    foreach ($seleteions as $key => $value) {
      if($value->data[7][0] == $nid)
      {
        $result[] = $value;
      }
    }

    return $result;
  }

  function changemakers_check_join_project($result, $nid){
    global $user; 
    $checkJoinProject = 0;
    for ($i=0; $i < count($result); $i++) 
    { 
      if($result[$i]->data[1][0] == $user->uid && $result[$i]->data[2][0] == $nid)
      {
        $checkJoinProject  = 1;
      }
    }
    return $checkJoinProject;
  }

  function changemakers_check_join_project_status($result, $nid){
    global $user; 
    $checkJoinProjectStatus = 3;
    for ($i=0; $i < count($result); $i++) 
    { 
      if($result[$i]->data[1][0] == $user->uid && $result[$i]->data[2][0] == $nid)
      {
        $checkJoinProjectStatus  = $result[$i]->data[3][0];
      }
    }
    return $checkJoinProjectStatus;
  }

  function changemakers_check_team_project_status($nid){
    global $user; 
    $checkJoinProjectStatus = 0;
    $sql= "select field_coach_project_uid from field_data_field_coach_project where entity_id ='".$nid."'";
    $query_db = db_query($sql);
    $i = 0;
    foreach ($query_db as $row){
      if($row->field_coach_project_uid == $user->uid){
        $checkJoinProjectStatus = 1;
      }
    }
    return $checkJoinProjectStatus;
  }

  function changemakers_get_team($result){
    $data_user = array();
    $i = 0;
    foreach ($result as $key => $value) 
    {
      if($value->data[3][0] == 1)
      {
        $user_join = user_load($value->data[1][0]);
        if($user_join->name){
          $data_user[$i]['name'] = '/users/'.$user_join->name;
          if(empty($user_join->picture)){
            $data_user[$i]['picture'] = '/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg';
          }else{
            $data_user[$i]['picture'] = image_style_url('thumbnail', $user_join->picture->uri);
          }
          
          $data_user[$i]['fname'] = $user_join->field_profile_firstname['und'][0]['value'];
          $data_user[$i]['lname'] = $user_join->field_profile_lastname['und'][0]['value'];
          $data_user[$i]['phone'] = $user_join->field_profile_phone['und'][0]['value'];  
          $data_user[$i]['uid'] = $user_join->uid;
          $data_user[$i]['sid'] = $value->sid;
          $data_user[$i]['status'] = $value->data[3][0];
          $data_user[$i]['username'] = $user_join->name;
          if($user_join->roles[3] == "administrator"){
            $data_user[$i]['role'] = "Administrator";
          }
          else{
            $data_user[$i]['role'] = "User join Project";
          }
          $i++;   
        }  
      }

    }

    // print "<pre>";
    // print_r($data_user);
    // print "</pre>";


    
    return $data_user;
  }

  function changemakers_get_team_project($nid){
    $data_user = node_load($nid);

    $user_join_project = array();
    $count_index = 0;
    for ($i=0; $i < count($data_user->field_coach_project['und']) ; $i++) { 
      $user_join = user_load($data_user->field_coach_project['und'][$i]['uid']);
      $user_join_project[$count_index]['name'] = '/users/'.$user_join->name;
      if(empty($user_join->picture)){
        $user_join_project[$count_index]['picture'] = '/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg';
      }else{
        $user_join_project[$count_index]['picture'] = image_style_url('thumbnail', $user_join->picture->uri); // '/sites/default/files/pictures/'.$user_join->picture->filename;
      }
      $user_join_project[$count_index]['username'] = $user_join->name;
      $user_join_project[$count_index]['phone'] = $user_join->field_profile_phone['und'][0]['value'];
      $user_join_project[$count_index]['fname'] = $user_join->field_profile_firstname['und'][0]['value'];
      $user_join_project[$count_index]['lname'] = $user_join->field_profile_lastname['und'][0]['value']; 
      $user_join_project[$count_index]['uid'] = $user_join->uid;
      $user_join_project[$count_index]['role'] = "Coach";
      $count_index++;
    }

    for ($i=0; $i < count($data_user->field_organization_project['und']) ; $i++) { 

      // print "<pre>";
      // print_r($data_user->field_organization_project['und'][$i]['taxonomy_term']->name);
      // print "</pre>"; 
      //$user_join = user_load($data_user->field_organization_project['und'][$i]['uid']);
      $user_join_project[$count_index]['name'] = "organization";
      if($data_user->field_organization_project['und'][$i]['taxonomy_term']->field_organization_icon['und'][0]['filename']){
        $user_join_project[$count_index]['picture'] = '/sites/default/files/'.$data_user->field_organization_project['und'][$i]['taxonomy_term']->field_organization_icon['und'][0]['filename'];
      }
      else{
        $user_join_project[$count_index]['picture'] = "/sites/all/themes/changemakers/images/soc-organizedisplay-default2.jpg";
      }
      $user_join_project[$count_index]['username'] = $data_user->field_organization_project['und'][$i]['taxonomy_term']->name;
      //$user_join_project[$count_index]['phone'] = $data_user->field_profile_phone['und'][0]['value'];
      // $user_join_project[$count_index]['fname'] = $data_user->field_organization_project['und'][$i]['taxonomy_term']->name;
      $user_join_project[$count_index]['lname'] = "";
      $user_join_project[$count_index]['uid'] = "";
      $user_join_project[$count_index]['role'] = "Organization";
      $count_index++;
    }

    for ($i=0; $i < count($data_user->field_partner_project['und']) ; $i++) { 
      $user_join = user_load($data_user->field_partner_project['und'][$i]['uid']);
      $user_join_project[$count_index]['name'] = '/users/'.$user_join->name;
      if(empty($user_join->picture)){
        $user_join_project[$count_index]['picture'] = '/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg';
      }else{
        $user_join_project[$count_index]['picture'] = image_style_url('thumbnail', $user_join->picture->uri);
      }
      $user_join_project[$count_index]['username'] = $user_join->name;
      $user_join_project[$count_index]['phone'] = $user_join->field_profile_phone['und'][0]['value'];
      $user_join_project[$count_index]['fname'] = $user_join->field_profile_firstname['und'][0]['value'];
      $user_join_project[$count_index]['lname'] = $user_join->field_profile_lastname['und'][0]['value']; 
      $user_join_project[$count_index]['uid'] = $user_join->uid;
      $user_join_project[$count_index]['role'] = "Partner";
      $count_index++;
    }

    for ($i=0; $i < count($data_user->field_helpdesk_project['und']) ; $i++) { 
      $user_join = user_load($data_user->field_helpdesk_project['und'][$i]['uid']);
      $user_join_project[$count_index]['name'] = '/users/'.$user_join->name;
      if(empty($user_join->picture)){
        $user_join_project[$count_index]['picture'] = '/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg';
      }else{
        $user_join_project[$count_index]['picture'] = image_style_url('thumbnail', $user_join->picture->uri);
      }
      $user_join_project[$count_index]['username'] = $user_join->name;
      $user_join_project[$count_index]['phone'] = $user_join->field_profile_phone['und'][0]['value'];
      $user_join_project[$count_index]['fname'] = $user_join->field_profile_firstname['und'][0]['value'];
      $user_join_project[$count_index]['lname'] = $user_join->field_profile_lastname['und'][0]['value']; 
      $user_join_project[$count_index]['uid'] = $user_join->uid;
      $user_join_project[$count_index]['role'] = "Helpdesk";
      $count_index++;
    }

    

    // print "<pre>";
    // print_r($data_user->field_organization_project['und']);
    // print "</pre>"; 
    
    return $user_join_project;
  }
  function changemakers_get_following_project($nid){
    $data = array();
    $sql= "select entity_id from field_data_field_following_project where field_following_project_nid ='".$nid."'";
    $query_db = db_query($sql);
    $i = 0;
    foreach ($query_db as $row){
      $user_data= user_load($row->entity_id);
      $data[$i]['name'] = $user_data->name; //$user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
      $data[$i]['uid'] = $user_data->uid;
      if(empty($user_data->picture)){
        $data[$i]['picture'] = '/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg';
      }else{
        $data[$i]['picture'] =  image_style_url('thumbnail', $user_data->picture->uri); //'/sites/default/files/pictures/'.$user_data->picture->filename;
      }

      $i++;
    }
    return $data;
  }
  function changemakers_get_join_project($nid){
    module_load_include('inc','webform','includes/webform.submissions');
    $seleteions = webform_get_submissions(array('nid'=>2));

    $result = array();
    $i = 0;
    foreach ($seleteions as $key => $value) {
      if($value->data[2][0] == $nid)
      {
        $user_data= user_load($value->data[1][0]);
        $result[$i]['name'] = $user_data->name;//$user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
        if(empty($user_data->picture)){
          $result[$i]['picture'] = "/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg";
        }
        else{
          $result[$i]['picture'] = image_style_url('thumbnail', $user_data->picture->uri); //'/sites/default/files/pictures/'.$user_data->picture->filename;
        }
        
        $i++;
      }
    }

    // print "<pre>";
    // print_r($result);
    // print "</pre>"; 
    return $result;
  }

  function changemakers_get_journal($nid){
    global $user;
    $data = array();
    $sql= "select f.entity_id 
          from field_data_field_project_related f
          inner join node n on f.entity_id = n.nid
          where f.field_project_related_nid='".$nid."'
          order by n.created desc ";
    $query_db = db_query($sql);
    $journal_id = array();
    $i = 0;
    foreach ($query_db as $row){
      $journal_id= node_load($row->entity_id);
      // print "<pre>";
      // print_r($journal_id->field_journal_type);
      // print "</pre>";
      $user_data = user_load($journal_id->uid);
      if($journal_id->field_journal_type['und'][0]['value'] == 1 && $user->roles[5] || $journal_id->field_journal_type['und'][0]['value'] == 1 && $user->roles[3]){

        $data[$i]['journal_pictrue'] = image_style_url("cover-image", $journal_id->field_journal_image['und'][0]['uri']);
        $data[$i]['title'] = $journal_id->title;
        $string = $journal_id->body['und'][0]['value'];
        $append="...";
        $length=300;
        if(strlen($string) > $length) {
          $string = wordwrap($string, $length);
          $string = explode("\n", $string, 2);
          $string = $string[0] . $append;
        }
        $data[$i]['content'] = $string ; 
        $data[$i]['date'] = timeAgo(date("y-m-d H:i:s ",$journal_id->created));
        $data[$i]['nid'] = $row->entity_id;
        $path = drupal_get_path_alias("node/".$row->entity_id);
        $path_journal = explode("/",$path);
        $check_string = is_numeric($path);

        if(count($path_journal) == 2){
          $data[$i]['path'] = "/".$path;
        }
        else{
          if(is_numeric($path)){
            $data[$i]['path'] = "/".$path;
          }else{
            $data[$i]['path'] = $path;
          }

        }

        
        $data[$i]['nid'] = $row->entity_id;

        
        for ($j=0; $j < count($journal_id->field_journal_target['und']) ; $j++) { 
          if($j==0){
            $data[$i]['target'] = taxonomy_term_load($journal_id->field_journal_target['und'][$j]['tid'])->name;
          }
          else{
            $data[$i]['target'] =  $data[$i]['target'].", ".taxonomy_term_load($journal_id->field_journal_target['und'][$j]['tid'])->name;
          }
        }
        $i++;
      }else if($journal_id->field_journal_type['und'][0]['value'] == 0){
        $data[$i]['journal_pictrue'] = image_style_url("cover-image", $journal_id->field_journal_image['und'][0]['uri']);
        $data[$i]['title'] = $journal_id->title;
        $string = $journal_id->body['und'][0]['value'];
        $append="...";
        $length=300;
        if(strlen($string) > $length) {
          $string = wordwrap($string, $length);
          $string = explode("\n", $string, 2);
          $string = $string[0] . $append;
        }
        $data[$i]['content'] = $string ; 
        $data[$i]['date'] = timeAgo(date("y-m-d H:i:s ",$journal_id->created));
        $data[$i]['nid'] = $row->entity_id;
        $path = drupal_get_path_alias("node/".$row->entity_id);
        $path_journal = explode("/",$path);
        $check_string = is_numeric($path);

        if(count($path_journal) == 2){
          $data[$i]['path'] = "/".$path;
        }
        else{
          if(is_numeric($path)){
            $data[$i]['path'] = "/".$path;
          }else{
            $data[$i]['path'] = $path;
          }

        }

        
        $data[$i]['nid'] = $row->entity_id;

        
        for ($j=0; $j < count($journal_id->field_journal_target['und']) ; $j++) { 
          if($j==0){
            $data[$i]['target'] = taxonomy_term_load($journal_id->field_journal_target['und'][$j]['tid'])->name;
          }
          else{
            $data[$i]['target'] =  $data[$i]['target'].", ".taxonomy_term_load($journal_id->field_journal_target['und'][$j]['tid'])->name;
          }
        }
        $i++;
      }
    }

    
    return $data;
  }

  function changemakers_get_request_join_project(){
    $node_id = arg(1);
    module_load_include('inc','webform','includes/webform.submissions');

    $seleteions = webform_get_submissions(array('nid'=>2));

    $result = array();
    $i = 0;
    foreach ($seleteions as $key => $value) {
      if($value->data[2][0] == $node_id)
      {
        $get_user = user_load($value->data[1][0]);
    //     print '<pre>';
    // print_r($get_user);
    // print '</pre>';
        $result[$i]['uid'] = $value->data[1][0];
        if(!empty($get_user->picture->filename)){
          $result[$i]['picture'] = '/sites/default/files/pictures/'.$get_user->picture->filename;
        }
        else{
          $result[$i]['picture'] = '/sites/all/themes/changemakers/images/icon-user.png';
        }
        
        $result[$i]['username'] = $get_user->name;
        $result[$i]['name'] = $get_user->field_profile_firstname['und'][0]['value']." ".$get_user->field_profile_lastname['und'][0]['value'];
        $result[$i]['status'] = $value->data[3][0];
        $result[$i]['sid'] = $value->sid;
        
        $result[$i]['fname'] = $get_user->field_profile_firstname['und'][0]['value'];
        $result[$i]['lname'] = $get_user->field_profile_lastname['und'][0]['value']; 
        $i++;
      }
    }
    

    return $result;
  }

  function changemakers_approve_join_project(){
    $uid = $_POST['uid'];
    $nid = $_POST['nid'];
    $sid = $_POST['sid'];

    $node_id = $_POST['nid'];
    $u = user_load($uid);
    for ($i=0; $i < count($u->field_following_project['und'])  ; $i++) { 
      if($u->field_following_project['und'][$i]['nid'] == $node_id){
        unset($u->field_following_project['und'][$i]);
      }
    }
    

    print "<pre>";
    print_r($u->field_following_project);
    print "</pre>";
    user_save($u);





    $data = node_load($nid);
    if($data->field_user_join_project)
    {
      $data->field_user_join_project['und'][] = array('uid'=>$uid);
    }
    else
    {
      $data->field_user_join_project['und'][0] = array('uid'=>$uid);
    }
    node_save($data);

    module_load_include('inc','webform','includes/webform.submissions');
    // node เป็นก้อน สำหรับ webform
    $node_webform = node_load(2);

    $submission = webform_get_submission(2, $sid);
    $submission->data[3][0] = 1;

    webform_submission_update($node_webform,  $submission);
    // print '<pre>';
    // print_r($node_webform);
    // print '</pre>';

    $options = array('query' => array('type' => 'participation'));
    $alias = drupal_get_path_alias('node/'.$nid);

    drupal_goto('/'.$alias, $options);
  }

  function changemakers_delete_fund(){
    $sid = $_POST['sid'];
    $nid = $_POST['nid'];
    module_load_include('inc','webform','includes/webform.submissions');
    // node เป็นก้อน สำหรับ webform
    $node_webform = node_load(92);

    $submission = webform_get_submission(92, $sid);//(array('nid'=>2,'sid'=>$sid));


    webform_submission_delete($node_webform,  $submission);

    $options = array('query' => array('fund' => 'fund'));
    drupal_goto('/project/'.$nid, $options);
  }
  function changemakers_update_fund(){
    $submitted = $_POST['submitted'];
    $details = $_POST['details'];

    module_load_include('inc','webform','includes/webform.submissions');

    $submission = webform_get_submission(92, $details['sid']);

    print "<pre>";
    print_r($submitted);
    print "</pre>";

    print "<pre>";
    print_r($submission);
    print "</pre>";


    $submission->data[1][0] = $submitted['date_fund_project']['year']."-".$submitted['date_fund_project']['month']."-".$submitted['date_fund_project']['day'];
    $submission->data[2][0] = $submitted['to_date_fund_project']['year']."-".$submitted['to_date_fund_project']['month']."-".$submitted['to_date_fund_project']['day'];
    $submission->data[3][0] = $submitted['fund_source_project'];
    $submission->data[4][0] = $submitted['fund_type_project'];
    $submission->data[5][0] = $submitted['fund_amount_project'];
    $submission->data[6][0] = $submitted['fund_use_project'];
    // node เป็นก้อน สำหรับ webform
    $node_webform = node_load(92);

    webform_submission_update($node_webform,  $submission);

    // module_load_include('inc','webform','includes/webform.submissions');
    // // node เป็นก้อน สำหรับ webform
    // $node_webform = node_load(71);

    // $submission = webform_get_submission(71, $sid);//(array('nid'=>2,'sid'=>$sid));


    // webform_submission_delete($node_webform,  $submission);
    //drupal_goto('/project/'.$submitted['nid']);
  }

  function changemakers_leave_project() {
    $uid = $_POST['uid'];
    $nid = $_POST['nid'];
    $sid = $_POST['sid'];

    module_load_include('inc','webform','includes/webform.submissions');
    // node เป็นก้อน สำหรับ webform
    $node_webform = node_load(2);

    $submission = webform_get_submission(2, $sid);//(array('nid'=>2,'sid'=>$sid));
    $submission->data[3][0] = 0;

    webform_submission_update($node_webform,  $submission);

    $u = user_load($uid);
    $u->field_following_project['und'][]['nid']=$nid;

    //print_r($node_id);
    user_save($u);

    

    $data = node_load($nid);
    $i = 0;
    foreach ($data->field_user_join_project['und'] as $key => $value) 
    {
      if($value['uid'] == $uid)
      {
        $data->field_user_join_project['und'][$i] = "";
      }
      $i++;
    }

    
    // print '<pre>';
    // print_r($data);
    // print '</pre>';
    node_save($data);

    $options = array('query' => array('type' => 'participation'));
    $alias = drupal_get_path_alias('node/'.$nid);

    drupal_goto('/'.$alias, $options);
  }

  //user following projects
  function changemakers_check_user_following_project()
  {
    //global $user;
  }

  function changemakers_get_progress_project($value){
    if($value == 1){
      return "Idea";
    }
    else if($value == 2){
      return "Prototyping";
    }
    else if($value == 3){
      return "Scaling";
    }
    else{
      return "Done";
    }
  }

  function changemakers_user_following_project() {
    global $user;
    print_r($user->uid);

    // if(isset($_POST['submit']))
    // {
      $node_id = $_POST['node_id'];
      $u = user_load($user->uid);
      $u->field_following_project['und'][]['nid']=$node_id;

      //print_r($node_id);
      user_save($u);
      drupal_goto('/project/'.$node_id);
    // }
  }

  function changemakers_user_unfollowing_project() {
    global $user;
    //print_r($user->uid);

    // if(isset($_POST['submit']))
    // {
      $node_id = $_POST['node_id'];
      $u = user_load($user->uid);
      for ($i=0; $i < count($u->field_following_project['und'])  ; $i++) { 
        if($u->field_following_project['und'][$i]['nid'] == $node_id){
          unset($u->field_following_project['und'][$i]);
        }
      }
      //1476691126
      //$u->changed = 1423415057;
      

     
      user_save($u);

      print "<pre>";
      print_r($u);
      print "</pre>";
      drupal_goto('/project/'.$node_id);
    // }
  }

  function changemakers_get_other_document($nid){
    $data = node_load($nid);
    $other_doc = array();
    for ($i=0; $i < count($data->field_other_document_project['und']) ; $i++) { 
      $other_doc[$i]['fid']  = $data->field_other_document_project['und'][$i]['fid'] ;
      $other_doc[$i]['name'] = $data->field_other_document_project['und'][$i]['filename'] ;
      $other_doc[$i]['size'] = "(".round(($data->field_other_document_project['und'][$i]['filesize'] / 1024), 0)." Kb )";
      $other_doc[$i]['date'] = timeAgo(date('Y-m-d H:i:s', $data->field_other_document_project['und'][$i]['timestamp'] ));
      //$time_p =  timeAgo(date('Y-m-d H:i:s', $data->field_other_document_project['und'][$i]['timestamp'] ));
      //$time = strtotime($timestamp);
      // $dbDate = new DateTime($time);
      // $currDate = new DateTime();
      // $interval = $currDate->diff($dbDate);
      // $other_doc[$i]['date_this'] =  $interval->s." sec ".$interval->i." min"; //$changemakers_timeAgo_cmk($data->field_other_document_project['und'][$i]['timestamp']); //date("y-m-d H:s ",$data->field_other_document_project['und'][$i]['timestamp']);

      // print "<pre>";
      // print_r($time_p);
      // print "</pre>";
    }

    
    return $other_doc;

  }

  function changemakers_timeAgo_cmk($timestamp){
    $time = strtotime($timestamp);
    $dbDate = new DateTime($time);
    $currDate = new DateTime();
    $interval = $currDate->diff($dbDate);
    return $interval->s." sec ".$interval->i." min";
  }

  function changemakers_form_document1($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document1_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048 * 2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
        drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
  }

  function changemakers_form_document1_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_didi['und'][0]['fid'] = $file->fid;
      $node->field_didi['und'][0]['uid'] = $file->uid;
      $node->field_didi['und'][0]['filename'] = $file->filename;
      $node->field_didi['und'][0]['uri'] = $file->uri;
      $node->field_didi['und'][0]['filemime'] = $file->filemime;
      $node->field_didi['und'][0]['filesize'] = $file->filesize;
      $node->field_didi['und'][0]['status'] = 1;
      $node->field_didi['und'][0]['timestamp'] = $file->timestamp;
      $node->field_didi['und'][0]['rdf_mapping'] = array();
      $node->field_didi['und'][0]['display'] = 1;
      $node->field_didi['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document2($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document2_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document2_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_swot['und'][0]['fid'] = $file->fid;
      $node->field_swot['und'][0]['uid'] = $file->uid;
      $node->field_swot['und'][0]['filename'] = $file->filename;
      $node->field_swot['und'][0]['uri'] = $file->uri;
      $node->field_swot['und'][0]['filemime'] = $file->filemime;
      $node->field_swot['und'][0]['filesize'] = $file->filesize;
      $node->field_swot['und'][0]['status'] = 1;
      $node->field_swot['und'][0]['timestamp'] = $file->timestamp;
      $node->field_swot['und'][0]['rdf_mapping'] = array();
      $node->field_swot['und'][0]['display'] = 1;
      $node->field_swot['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document3($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document3_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document3_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_brainstorming['und'][0]['fid'] = $file->fid;
      $node->field_brainstorming['und'][0]['uid'] = $file->uid;
      $node->field_brainstorming['und'][0]['filename'] = $file->filename;
      $node->field_brainstorming['und'][0]['uri'] = $file->uri;
      $node->field_brainstorming['und'][0]['filemime'] = $file->filemime;
      $node->field_brainstorming['und'][0]['filesize'] = $file->filesize;
      $node->field_brainstorming['und'][0]['status'] = 1;
      $node->field_brainstorming['und'][0]['timestamp'] = $file->timestamp;
      $node->field_brainstorming['und'][0]['rdf_mapping'] = array();
      $node->field_brainstorming['und'][0]['display'] = 1;
      $node->field_brainstorming['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document4($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document4_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document4_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_idea_selection['und'][0]['fid'] = $file->fid;
      $node->field_idea_selection['und'][0]['uid'] = $file->uid;
      $node->field_idea_selection['und'][0]['filename'] = $file->filename;
      $node->field_idea_selection['und'][0]['uri'] = $file->uri;
      $node->field_idea_selection['und'][0]['filemime'] = $file->filemime;
      $node->field_idea_selection['und'][0]['filesize'] = $file->filesize;
      $node->field_idea_selection['und'][0]['status'] = 1;
      $node->field_idea_selection['und'][0]['timestamp'] = $file->timestamp;
      $node->field_idea_selection['und'][0]['rdf_mapping'] = array();
      $node->field_idea_selection['und'][0]['display'] = 1;
      $node->field_idea_selection['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document5($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document5_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document5_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_theory_of_change['und'][0]['fid'] = $file->fid;
      $node->field_theory_of_change['und'][0]['uid'] = $file->uid;
      $node->field_theory_of_change['und'][0]['filename'] = $file->filename;
      $node->field_theory_of_change['und'][0]['uri'] = $file->uri;
      $node->field_theory_of_change['und'][0]['filemime'] = $file->filemime;
      $node->field_theory_of_change['und'][0]['filesize'] = $file->filesize;
      $node->field_theory_of_change['und'][0]['status'] = 1;
      $node->field_theory_of_change['und'][0]['timestamp'] = $file->timestamp;
      $node->field_theory_of_change['und'][0]['rdf_mapping'] = array();
      $node->field_theory_of_change['und'][0]['display'] = 1;
      $node->field_theory_of_change['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document6($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document6_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document6_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_impact_value['und'][0]['fid'] = $file->fid;
      $node->field_impact_value['und'][0]['uid'] = $file->uid;
      $node->field_impact_value['und'][0]['filename'] = $file->filename;
      $node->field_impact_value['und'][0]['uri'] = $file->uri;
      $node->field_impact_value['und'][0]['filemime'] = $file->filemime;
      $node->field_impact_value['und'][0]['filesize'] = $file->filesize;
      $node->field_impact_value['und'][0]['status'] = 1;
      $node->field_impact_value['und'][0]['timestamp'] = $file->timestamp;
      $node->field_impact_value['und'][0]['rdf_mapping'] = array();
      $node->field_impact_value['und'][0]['display'] = 1;
      $node->field_impact_value['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document7($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document7_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document7_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_drafting_your_business_mod['und'][0]['fid'] = $file->fid;
      $node->field_drafting_your_business_mod['und'][0]['uid'] = $file->uid;
      $node->field_drafting_your_business_mod['und'][0]['filename'] = $file->filename;
      $node->field_drafting_your_business_mod['und'][0]['uri'] = $file->uri;
      $node->field_drafting_your_business_mod['und'][0]['filemime'] = $file->filemime;
      $node->field_drafting_your_business_mod['und'][0]['filesize'] = $file->filesize;
      $node->field_drafting_your_business_mod['und'][0]['status'] = 1;
      $node->field_drafting_your_business_mod['und'][0]['timestamp'] = $file->timestamp;
      $node->field_drafting_your_business_mod['und'][0]['rdf_mapping'] = array();
      $node->field_drafting_your_business_mod['und'][0]['display'] = 1;
      $node->field_drafting_your_business_mod['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document8($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document8_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document8_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_value_proposition['und'][0]['fid'] = $file->fid;
      $node->field_value_proposition['und'][0]['uid'] = $file->uid;
      $node->field_value_proposition['und'][0]['filename'] = $file->filename;
      $node->field_value_proposition['und'][0]['uri'] = $file->uri;
      $node->field_value_proposition['und'][0]['filemime'] = $file->filemime;
      $node->field_value_proposition['und'][0]['filesize'] = $file->filesize;
      $node->field_value_proposition['und'][0]['status'] = 1;
      $node->field_value_proposition['und'][0]['timestamp'] = $file->timestamp;
      $node->field_value_proposition['und'][0]['rdf_mapping'] = array();
      $node->field_value_proposition['und'][0]['display'] = 1;
      $node->field_value_proposition['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document9($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document9_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document9_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_stakeholder_analysis['und'][0]['fid'] = $file->fid;
      $node->field_stakeholder_analysis['und'][0]['uid'] = $file->uid;
      $node->field_stakeholder_analysis['und'][0]['filename'] = $file->filename;
      $node->field_stakeholder_analysis['und'][0]['uri'] = $file->uri;
      $node->field_stakeholder_analysis['und'][0]['filemime'] = $file->filemime;
      $node->field_stakeholder_analysis['und'][0]['filesize'] = $file->filesize;
      $node->field_stakeholder_analysis['und'][0]['status'] = 1;
      $node->field_stakeholder_analysis['und'][0]['timestamp'] = $file->timestamp;
      $node->field_stakeholder_analysis['und'][0]['rdf_mapping'] = array();
      $node->field_stakeholder_analysis['und'][0]['display'] = 1;
      $node->field_stakeholder_analysis['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document10($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document10_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document10_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_business_model_canvas['und'][0]['fid'] = $file->fid;
      $node->field_business_model_canvas['und'][0]['uid'] = $file->uid;
      $node->field_business_model_canvas['und'][0]['filename'] = $file->filename;
      $node->field_business_model_canvas['und'][0]['uri'] = $file->uri;
      $node->field_business_model_canvas['und'][0]['filemime'] = $file->filemime;
      $node->field_business_model_canvas['und'][0]['filesize'] = $file->filesize;
      $node->field_business_model_canvas['und'][0]['status'] = 1;
      $node->field_business_model_canvas['und'][0]['timestamp'] = $file->timestamp;
      $node->field_business_model_canvas['und'][0]['rdf_mapping'] = array();
      $node->field_business_model_canvas['und'][0]['display'] = 1;
      $node->field_business_model_canvas['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document11($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document11_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
        drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document11_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_build_value_proposition_hy['und'][0]['fid'] = $file->fid;
      $node->field_build_value_proposition_hy['und'][0]['uid'] = $file->uid;
      $node->field_build_value_proposition_hy['und'][0]['filename'] = $file->filename;
      $node->field_build_value_proposition_hy['und'][0]['uri'] = $file->uri;
      $node->field_build_value_proposition_hy['und'][0]['filemime'] = $file->filemime;
      $node->field_build_value_proposition_hy['und'][0]['filesize'] = $file->filesize;
      $node->field_build_value_proposition_hy['und'][0]['status'] = 1;
      $node->field_build_value_proposition_hy['und'][0]['timestamp'] = $file->timestamp;
      $node->field_build_value_proposition_hy['und'][0]['rdf_mapping'] = array();
      $node->field_build_value_proposition_hy['und'][0]['display'] = 1;
      $node->field_build_value_proposition_hy['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }

    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
    
  }

  function changemakers_form_document12($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document12_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document12_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_measure_testing_and_data_c['und'][0]['fid'] = $file->fid;
      $node->field_measure_testing_and_data_c['und'][0]['uid'] = $file->uid;
      $node->field_measure_testing_and_data_c['und'][0]['filename'] = $file->filename;
      $node->field_measure_testing_and_data_c['und'][0]['uri'] = $file->uri;
      $node->field_measure_testing_and_data_c['und'][0]['filemime'] = $file->filemime;
      $node->field_measure_testing_and_data_c['und'][0]['filesize'] = $file->filesize;
      $node->field_measure_testing_and_data_c['und'][0]['status'] = 1;
      $node->field_measure_testing_and_data_c['und'][0]['timestamp'] = $file->timestamp;
      $node->field_measure_testing_and_data_c['und'][0]['rdf_mapping'] = array();
      $node->field_measure_testing_and_data_c['und'][0]['display'] = 1;
      $node->field_measure_testing_and_data_c['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document13($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document13_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document13_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_learn_feedback_analysis['und'][0]['fid'] = $file->fid;
      $node->field_learn_feedback_analysis['und'][0]['uid'] = $file->uid;
      $node->field_learn_feedback_analysis['und'][0]['filename'] = $file->filename;
      $node->field_learn_feedback_analysis['und'][0]['uri'] = $file->uri;
      $node->field_learn_feedback_analysis['und'][0]['filemime'] = $file->filemime;
      $node->field_learn_feedback_analysis['und'][0]['filesize'] = $file->filesize;
      $node->field_learn_feedback_analysis['und'][0]['status'] = 1;
      $node->field_learn_feedback_analysis['und'][0]['timestamp'] = $file->timestamp;
      $node->field_learn_feedback_analysis['und'][0]['rdf_mapping'] = array();
      $node->field_learn_feedback_analysis['und'][0]['display'] = 1;
      $node->field_learn_feedback_analysis['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document14($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document14_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document14_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_decide_criteria_for_making['und'][0]['fid'] = $file->fid;
      $node->field_decide_criteria_for_making['und'][0]['uid'] = $file->uid;
      $node->field_decide_criteria_for_making['und'][0]['filename'] = $file->filename;
      $node->field_decide_criteria_for_making['und'][0]['uri'] = $file->uri;
      $node->field_decide_criteria_for_making['und'][0]['filemime'] = $file->filemime;
      $node->field_decide_criteria_for_making['und'][0]['filesize'] = $file->filesize;
      $node->field_decide_criteria_for_making['und'][0]['status'] = 1;
      $node->field_decide_criteria_for_making['und'][0]['timestamp'] = $file->timestamp;
      $node->field_decide_criteria_for_making['und'][0]['rdf_mapping'] = array();
      $node->field_decide_criteria_for_making['und'][0]['display'] = 1;
      $node->field_decide_criteria_for_making['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document15($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document15_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document15_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_business_plan['und'][0]['fid'] = $file->fid;
      $node->field_business_plan['und'][0]['uid'] = $file->uid;
      $node->field_business_plan['und'][0]['filename'] = $file->filename;
      $node->field_business_plan['und'][0]['uri'] = $file->uri;
      $node->field_business_plan['und'][0]['filemime'] = $file->filemime;
      $node->field_business_plan['und'][0]['filesize'] = $file->filesize;
      $node->field_business_plan['und'][0]['status'] = 1;
      $node->field_business_plan['und'][0]['timestamp'] = $file->timestamp;
      $node->field_business_plan['und'][0]['rdf_mapping'] = array();
      $node->field_business_plan['und'][0]['display'] = 1;
      $node->field_business_plan['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document16($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document16_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document16_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_workplan['und'][0]['fid'] = $file->fid;
      $node->field_workplan['und'][0]['uid'] = $file->uid;
      $node->field_workplan['und'][0]['filename'] = $file->filename;
      $node->field_workplan['und'][0]['uri'] = $file->uri;
      $node->field_workplan['und'][0]['filemime'] = $file->filemime;
      $node->field_workplan['und'][0]['filesize'] = $file->filesize;
      $node->field_workplan['und'][0]['status'] = 1;
      $node->field_workplan['und'][0]['timestamp'] = $file->timestamp;
      $node->field_workplan['und'][0]['rdf_mapping'] = array();
      $node->field_workplan['und'][0]['display'] = 1;
      $node->field_workplan['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document17($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document17_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document17_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_factsheet['und'][0]['fid'] = $file->fid;
      $node->field_factsheet['und'][0]['uid'] = $file->uid;
      $node->field_factsheet['und'][0]['filename'] = $file->filename;
      $node->field_factsheet['und'][0]['uri'] = $file->uri;
      $node->field_factsheet['und'][0]['filemime'] = $file->filemime;
      $node->field_factsheet['und'][0]['filesize'] = $file->filesize;
      $node->field_factsheet['und'][0]['status'] = 1;
      $node->field_factsheet['und'][0]['timestamp'] = $file->timestamp;
      $node->field_factsheet['und'][0]['rdf_mapping'] = array();
      $node->field_factsheet['und'][0]['display'] = 1;
      $node->field_factsheet['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document18($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document18_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document18_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_visual['und'][0]['fid'] = $file->fid;
      $node->field_visual['und'][0]['uid'] = $file->uid;
      $node->field_visual['und'][0]['filename'] = $file->filename;
      $node->field_visual['und'][0]['uri'] = $file->uri;
      $node->field_visual['und'][0]['filemime'] = $file->filemime;
      $node->field_visual['und'][0]['filesize'] = $file->filesize;
      $node->field_visual['und'][0]['status'] = 1;
      $node->field_visual['und'][0]['timestamp'] = $file->timestamp;
      $node->field_visual['und'][0]['rdf_mapping'] = array();
      $node->field_visual['und'][0]['display'] = 1;
      $node->field_visual['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document19($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document19_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document19_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_verbal['und'][0]['fid'] = $file->fid;
      $node->field_verbal['und'][0]['uid'] = $file->uid;
      $node->field_verbal['und'][0]['filename'] = $file->filename;
      $node->field_verbal['und'][0]['uri'] = $file->uri;
      $node->field_verbal['und'][0]['filemime'] = $file->filemime;
      $node->field_verbal['und'][0]['filesize'] = $file->filesize;
      $node->field_verbal['und'][0]['status'] = 1;
      $node->field_verbal['und'][0]['timestamp'] = $file->timestamp;
      $node->field_verbal['und'][0]['rdf_mapping'] = array();
      $node->field_verbal['und'][0]['display'] = 1;
      $node->field_verbal['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document20($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document20_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document20_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_profit_loss_projection['und'][0]['fid'] = $file->fid;
      $node->field_profit_loss_projection['und'][0]['uid'] = $file->uid;
      $node->field_profit_loss_projection['und'][0]['filename'] = $file->filename;
      $node->field_profit_loss_projection['und'][0]['uri'] = $file->uri;
      $node->field_profit_loss_projection['und'][0]['filemime'] = $file->filemime;
      $node->field_profit_loss_projection['und'][0]['filesize'] = $file->filesize;
      $node->field_profit_loss_projection['und'][0]['status'] = 1;
      $node->field_profit_loss_projection['und'][0]['timestamp'] = $file->timestamp;
      $node->field_profit_loss_projection['und'][0]['rdf_mapping'] = array();
      $node->field_profit_loss_projection['und'][0]['display'] = 1;
      $node->field_profit_loss_projection['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document21($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document21_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document21_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_aar['und'][0]['fid'] = $file->fid;
      $node->field_aar['und'][0]['uid'] = $file->uid;
      $node->field_aar['und'][0]['filename'] = $file->filename;
      $node->field_aar['und'][0]['uri'] = $file->uri;
      $node->field_aar['und'][0]['filemime'] = $file->filemime;
      $node->field_aar['und'][0]['filesize'] = $file->filesize;
      $node->field_aar['und'][0]['status'] = 1;
      $node->field_aar['und'][0]['timestamp'] = $file->timestamp;
      $node->field_aar['und'][0]['rdf_mapping'] = array();
      $node->field_aar['und'][0]['display'] = 1;
      $node->field_aar['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document22($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document22_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document22_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      $node->field_scaling_plan['und'][0]['fid'] = $file->fid;
      $node->field_scaling_plan['und'][0]['uid'] = $file->uid;
      $node->field_scaling_plan['und'][0]['filename'] = $file->filename;
      $node->field_scaling_plan['und'][0]['uri'] = $file->uri;
      $node->field_scaling_plan['und'][0]['filemime'] = $file->filemime;
      $node->field_scaling_plan['und'][0]['filesize'] = $file->filesize;
      $node->field_scaling_plan['und'][0]['status'] = 1;
      $node->field_scaling_plan['und'][0]['timestamp'] = $file->timestamp;
      $node->field_scaling_plan['und'][0]['rdf_mapping'] = array();
      $node->field_scaling_plan['und'][0]['display'] = 1;
      $node->field_scaling_plan['und'][0]['description'] = "";
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }

  function changemakers_form_document_other($form, &$form_state) {

    
    
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('Browse'), 
    );

    $form['project_submit_button'] = array(

      '#type' => 'submit', 
      '#value' => t('upload'), 
    );

    // print "<pre>";
    // print_r($node_id);
    // print "</pre>";

    return $form;
  }

  function changemakers_form_document_other_validate($form, &$form_state) {
    $node_id = arg(1);
    $file = file_save_upload('file', array(
      'file_validate_extensions' => array('pdf jpg'),
      'file_validate_size' => array(2048*2048), 
    ));

    $parts = pathinfo($file->filename);
    $uri = 'public://'.$node_id.'-'. $file->filename;

    //$path = 'public://files/';
    //drupal_realpath($uri);
    if ($file) {
      if ($file = file_move($file, $uri)) {
        $form_state['values']['file'] = $file;
      }
      else {
        form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      form_set_error('file', t('No file was uploaded.'));
    }
  }

  function changemakers_form_document_other_submit($form, &$form_state) {


    $node_id = arg(1);

    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $file->status = FILE_STATUS_PERMANENT;
    if(file_save($file)){
      $node = node_load($node_id);
      if(count($node->field_other_document_project['und']) == 0){
        $node->field_other_document_project['und'][0]['fid'] = $file->fid;
        $node->field_other_document_project['und'][0]['uid'] = $file->uid;
        $node->field_other_document_project['und'][0]['filename'] = $file->filename;
        $node->field_other_document_project['und'][0]['uri'] = $file->uri;
        $node->field_other_document_project['und'][0]['filemime'] = $file->filemime;
        $node->field_other_document_project['und'][0]['filesize'] = $file->filesize;
        $node->field_other_document_project['und'][0]['status'] = 1;
        $node->field_other_document_project['und'][0]['timestamp'] = $file->timestamp;
        $node->field_other_document_project['und'][0]['rdf_mapping'] = array();
        $node->field_other_document_project['und'][0]['display'] = 1;
        $node->field_other_document_project['und'][0]['description'] = "";

      }else{
        $index = count($node->field_other_document_project['und']);
        $node->field_other_document_project['und'][$index]['fid'] = $file->fid;
        $node->field_other_document_project['und'][$index]['uid'] = $file->uid;
        $node->field_other_document_project['und'][$index]['filename'] = $file->filename;
        $node->field_other_document_project['und'][$index]['uri'] = $file->uri;
        $node->field_other_document_project['und'][$index]['filemime'] = $file->filemime;
        $node->field_other_document_project['und'][$index]['filesize'] = $file->filesize;
        $node->field_other_document_project['und'][$index]['status'] = 1;
        $node->field_other_document_project['und'][$index]['timestamp'] = $file->timestamp;
        $node->field_other_document_project['und'][$index]['rdf_mapping'] = array();
        $node->field_other_document_project['und'][$index]['display'] = 1;
        $node->field_other_document_project['und'][$index]['description'] = "";
      }
      
      //$myuser->picture->uri = "public://pictures/".$file->filename;
      if(node_save($node)){
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }else{
        drupal_set_message(t('อัพโหลดไฟล์สำเร็จ'));
      }
      
    }
    else{
      drupal_set_message(t('ไม่สามารถอัพโหลดไฟล์ได้'));
    }
    $options = array('query' => array('type' => 'document'));
    $alias = drupal_get_path_alias('node/'.$node->nid);
    drupal_goto('/'.$alias, $options);
  }






  function changemakers_get_join_campaign($nid){
    $nodes = node_load_multiple(array(), array('type' => 'Campaign'));


    $result = array();
    $i =0;
    $check = 0;

    foreach ($nodes as $key => $value) {
      for ($j=0; $j < count($value->field_project_join['und']); $j++) { 
        $data_result =  field_collection_item_load($value->field_project_join['und'][$j]['value'] , $reset = FALSE)->field_join_project['und'][0]['nid'];
        if($data_result == $nid && $value->field_campaign_active['und'][0]['value'] != 0){
          $check = 1;
        }

        //$result[$i][$j] = $result[$i][$j]->field_join_project;
      }



      
      if($check == 1){

        //if($value->field_campaign_active['und'][0]['value'] != 0){
        // print '<pre>';
        // print_r($value->field_campaign_active['und'][0]['value']);
        // print '</pre>';

          // print '<pre>';
          // print_r($check);
          // print '</pre>';

          $result[$i]['node_id'] = $value->nid;
          $result[$i]['title'] = $value->title;
          $result[$i]['date'] = changemakers_format_date_thai_short($value->created);
          $result[$i]['last_update'] = $value->created;
          if($value->field_campaign_image['und'][0]['filename']){
            $result[$i]['picture'] = image_style_url('thumbnail', $value->field_campaign_image['und'][0]['uri']); //"/sites/default/files/".;
          }
          
          $result[$i]['path'] = "/".drupal_get_path_alias('node/'.$value->nid);
          //$result[$i] = $value;
          $i++;
          $check = 0;
        //}
      }
      
      
    }
    //usort($result, 'changemakers_sortByOrder');

    //       print '<pre>';
    // print_r($result);
    // print '</pre>';
    

    return  $result;

    

  }
  function changemakers_get_data_in_list($number){
    if($number == 1){
      return "Project Update";
    }
    else if($number == 2){
      return "Journal";
    }
  }

#end function for changemakers project

#function for changemakers campaign
  function changemakers_get_projects_join_campaigns_final($campaign_id){
    $project_join_campaign = node_load($campaign_id);
    $get_project_data = array();
    $i=0;
    foreach ($project_join_campaign->field_project_join['und'] as $key => $value) {
      $get_project_id = field_collection_item_load( $value['value'], $reset = FALSE);
      $get_project = node_load($get_project_id->field_join_project['und'][0]['nid']);//->field_join_project['und'][0]['value'];
      if(isset($get_project_id->field_join_project['und'][0]['nid']) && $get_project_id->field_join_status['und'][0]['value'] == 1){
        $get_project_data[$i]['title'] =  $get_project->title;
        $get_project_data[$i]['picture'] =  "/sites/default/files/".$get_project->field_project_image['und'][0]['filename'];
        $get_project_data[$i]['last_update'] =  changemakers_format_date_thai_short($get_project->changed);
        $get_project_data[$i]['nid'] =  $get_project->nid;
        $i++;
      }
    }
    // print '<pre>';
    // print_r($get_project_data);
    // print '</pre>';
    return $get_project_data;
    
  }

  function changemakers_get_projects_join_campaigns($campaign_id){
    $project_join_campaign = node_load($campaign_id);
    $get_project_data = array();
    $i=0;
    foreach ($project_join_campaign->field_project_join['und'] as $key => $value) {
      $get_project_id = field_collection_item_load( $value['value'], $reset = FALSE);
      $get_project = node_load($get_project_id->field_join_project['und'][0]['nid']);//->field_join_project['und'][0]['value'];
      if(isset($get_project_id->field_join_project['und'][0]['nid'])){
        $get_project_data[$i]['title'] =  $get_project->title;

        if($get_project->field_project_image['und'][0]['filename']!=""){
          $get_project_data[$i]['picture'] =  "/sites/default/files/".$get_project->field_project_image['und'][0]['filename'];
        }else{
          $get_project_data[$i]['picture'] =  "/sites/all/themes/changemakers/images/project1.jpg";
        }

        $get_project_data[$i]['last_update'] =  changemakers_format_date_thai_short($get_project->changed);
        $get_project_data[$i]['nid'] =  $get_project->nid;
        $i++;
      }
    }
    // print '<pre>';
    // print_r($get_project_data);
    // print '</pre>';
    return $get_project_data;
    
  }

  function changemakers_get_projects_in_final($campaign_id){
    $project_join_campaign = node_load($campaign_id);
    $get_project_data = array();
    $count = 0;

    foreach ($project_join_campaign->field_project_join['und'] as $key => $value) {
      $get_project_id = field_collection_item_load( $value['value'], $reset = FALSE);
      //$get_project = node_load($get_project_id->field_join_project['und'][0]['nid']);//->field_join_project['und'][0]['value'];
      if($get_project_id->field_fund_project['und'][0]['value'] > 0){
        $count++;


      }

      

      
    }
    // print '<pre>';
    //     print_r($count);
    //     print '</pre>';



    return $count;
    
  }

  function changemakers_get_active_campaign(){
    $nodes = node_load_multiple(array(), array('type' => 'Campaign'));
    $result = array();

    $count = 0;
    foreach ($nodes as $key => $value) {
      if($value->field_campaign_active['und'][0]['value'] == 1){
        $count += 1;
      }
      // for ($j=0; $j < count($value->field_project_join['und']); $j++) { 
      //   $data_result =  field_collection_item_load($value->field_project_join['und'][$j]['value'] , $reset = FALSE)->field_join_project['und'][0]['nid'];
      //   if($data_result == $nid){
      //     $check = 1;
      //   }

      //   //$result[$i][$j] = $result[$i][$j]->field_join_project;
      // }
      
    }

    // print '<pre>';
    // print_r($nodes);
    // print '</pre>';
    return $count;

  }
  function changemakers_get_end_campaign(){
    $nodes = node_load_multiple(array(), array('type' => 'Campaign'));
    $result = array();

    $count = 0;
    foreach ($nodes as $key => $value) {
      if($value->field_campaign_active['und'][0]['value'] != 1){
        $count += 1;
      }
      // for ($j=0; $j < count($value->field_project_join['und']); $j++) { 
      //   $data_result =  field_collection_item_load($value->field_project_join['und'][$j]['value'] , $reset = FALSE)->field_join_project['und'][0]['nid'];
      //   if($data_result == $nid){
      //     $check = 1;
      //   }

      //   //$result[$i][$j] = $result[$i][$j]->field_join_project;
      // }
      
    }

    // print '<pre>';
    // print_r($nodes);
    // print '</pre>';
    return $count;

  }
  function changemakers_get_count_project_join_campaign_active(){
    $nodes = node_load_multiple(array(), array('type' => 'Campaign'));
    $result = array();

    $count = 0;
    foreach ($nodes as $key => $value) {
      for ($j=0; $j < count($value->field_project_join['und']); $j++) 
      { 
        $count++;
      }
      
    }

    // print '<pre>';
    // print_r($nodes);
    // print '</pre>';
    return $count;

  }
  function changemakers_join_campaign(){
    global $user;

    if (isset($_POST['submit'])) 
    {
      $project_id = $_POST['project_id'];
      $campaign_id = $_POST['campaign_id'];


      // print "<pre>";
      // print_r($project->field_organization_project['und']);
      // print "</pre>";


      

     // print_r($_POST['project_id']);
      if($_POST['project_id'] != 0)
      {
        $node = node_load($campaign_id);
        $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_project_join'));
        $field_collection_item->field_join_project['und'][]['nid'] = $project_id;
        $field_collection_item->field_join_status['und'][]['value']= 0;//$item['id'];
        $field_collection_item->field_join_by_user['und'][]['value']= $user->uid;
        $field_collection_item->field_user_join['und'][]['value']= $user->uid;
        $field_collection_item->setHostEntity('node', $node);
        $field_collection_item->save();
      
        $alias = drupal_get_path_alias('node/'.$campaign_id);
        $project = node_load($project_id);

        $c_org = array();
        $p_org = array();
        if(count($node->field_supported_organization['und']) != 0){
          foreach ($node->field_supported_organization['und'] as $key => $value) {
            $c_org[] = $value['tid'];
          }
        }

        if(count($node->field_organization_project['und'])){
          foreach ($project->field_organization_project['und'] as $key => $value) {
            $p_org[] = $value['tid'];
          }
        }
        unset($project->field_organization_project['und']);

        foreach ($c_org as $key => $value) {
          if(!in_array($value, $p_org)){
            $p_org[] = $value;
          }
        }
        $i = 0;
        foreach ($p_org as $key => $value) {
          $project->field_organization_project['und'][$i]['tid'] = $value;
          $i++;
        }

        node_save($project);

        drupal_set_message(t('คุณได้เข้าร่วมแคมเปญแล้ว'),'status');
        if(isset($alias)){
          drupal_goto('/'.$alias);
        }else{
          drupal_goto('/campaign/'.$campaign_id);
        }

      }
      else
      {
        $alias = drupal_get_path_alias('node/'.$campaign_id);
          drupal_set_message(t('กรุณาเลือกโปรเจกต์ที่จะเข้าร่วม'),'error');
          if(isset($alias)){
             drupal_goto('/'.$alias);
          }else{
            drupal_goto('/campaign/'.$campaign_id);
          }
         
      } 
    }else{
      drupal_goto('/campaign/list');
    }
    //$node->field_project_id = $project_id;
    // $result = field_collection_item_load_multiple(array(15), array(), FALSE);

    // print '<pre>';
    // print_r($result);
    // print '</pre>';
    //Create field collection item field_quiz_result
    
  }
  function changemakers_chcek_join_campaign($node){
    global $user;
    //$node_project =  node_load_multiple(array(),array('type'=> 'project'));
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->propertyCondition('uid', $user->uid)
      ->propertyCondition('type', array('project'))
      ->propertyOrderBy('created', 'DESC');
    $result = $query->execute();

    $nids = array_keys($result['node']);
    $result_filter_project = node_load_multiple($nids);

    $project_value_join = field_get_items('node', $node, 'field_project_join');
    $query_data = array();
    for ($i=0; $i < count($project_value_join); $i++) 
    { 
      if(!empty($project_value_join[$i]['value'])){
        $query_db = db_query("select field_join_project_nid from field_data_field_join_project where entity_id =".$project_value_join[$i]['value']);
        foreach ($query_db as $row) 
        {
            $query_data[] = $row->field_join_project_nid;
        }

      }
      
    }
    module_load_include('inc','webform','includes/webform.submissions');
    $seleteions = webform_get_submissions(array('nid'=>2));
    $result_join_project = array();
    $result_user_join_data = array();
    foreach ($seleteions as $key => $value) {
      $result_join_project[] = $value;
    }

   //if($user->roles[6] == "organization")
   // {
      foreach ($result_join_project as $key => $value) 
      {
        if($user->uid == $value->data[1][0])
        {
          $result_user_join_data[] = $value;
        }
      }
   // }

    $check_duplicate = array();
    $index = 0;
    $select_tile = array();
    $count_index = 0;
    for ($i=0; $i < count($result_filter_project); $i++) 
    { 
      for ($j=0; $j < count($query_data) ; $j++) 
      { 
        if($query_data[$j] == $result_filter_project[$nids[$i]]->nid)
        {
          $check_duplicate[$index] = $i;  
          $index++;
          // print '<pre>';
          // print_r($query_data);
          // print '</pre>';  
        }
      }

      $select_tile[$i][0] = $result_filter_project[$nids[$i]]->title;
      $select_tile[$i][1] = $result_filter_project[$nids[$i]]->nid;
      $count_index++;
    }



    for ($i=0; $i < count($result_user_join_data); $i++) 
    { 
      for ($j=0; $j < count($query_data) ; $j++) 
      { 
        if($query_data[$j] == $result_user_join_data[$i]->data[2][0])
        {
          $check_duplicate[$index] = $count_index;

          $index++;
        }
      }
      $data_load = node_load($result_user_join_data[$i]->data[2][0]);
      

      $select_tile[$count_index][0] = $data_load->title;
      $select_tile[$count_index][1] = $data_load->nid;
      $count_index++;
    }

    foreach ($check_duplicate as $key => $value) 
    {
      $select_tile[$value] = 1;
    }

    return $select_tile;
  }
#end function for changemakers campaign 

#function for changemakers news&&event
  function changemakers_check_user_join_event($uid, $nid)
  {
    module_load_include('inc','webform','includes/webform.submissions');
    $seleteions = webform_get_submissions(array('nid'=>3));
    $check = 0;
    foreach($seleteions as $key => $value) 
    {
      if($value->data[1][0] == $uid && $value->data[2][0] == $nid)
      {
        $check = 1;
      }
    }
    return $check;
  }
  function changemakers_join_event(){
    module_load_include('inc','webform','includes/webform.submissions');
    //Start Webform //
    if($_POST['op'])
    {
      $web_form = node_load(3);
      $data = array(
        1 => array('0' => $_POST['submitted']['uid']),
        2 => array('0' => $_POST['submitted']['nid']),
        3 => array('0' => $_POST['submitted']['answer_1']),
        4 => array('0' => $_POST['submitted']['answer_2']),
        5 => array('0' => $_POST['submitted']['answer_3']),
        6 => array('0' => $_POST['submitted']['answer_4']),
        7 => array('0' => $_POST['submitted']['answer_5']),
        );
      $submission = (object) array(
        // 'nid' => 1,
        'uid' => $_POST['submitted']['uid'],
        'submitted' => REQUEST_TIME,
        'remote_addr' => ip_address(),
        'is_draft' => FALSE,
        'data' => $data,
      );
      // print "<pre>";
      // print_r($_POST['submitted']);
      // print "</pre>";

      $submission = webform_submission_insert($web_form,$submission);
      //drupal_goto('event/'.$_POST['submitted']['nid']);
      drupal_set_message(t('ลงทะเบียนเข้าร่วมกิจกรรมเรียบร้อยแล้ว'));
      drupal_goto($_POST['path']);

    }
    // print "<pre>";
    // print_r($_POST['submitted']['nid']);
    // print "</pre>";
   

    // End web form //
  }

  

  function changemakers_close_event(){
    $nid = $_POST['nid'];
    $path =  $_POST['path'];
    $node_event = node_load($nid);
    $node_event->field_event_status['und'][0]['value'] = 2;
    node_save($node_event);
    drupal_goto($path);
  }

  function changemakers_cancelled_event(){
    $nid = $_POST['nid'];
    $node_event = node_load($nid);
    $node_event->field_event_status['und'][0]['value'] = 3;
    node_save($node_event);
    drupal_goto($_POST['path']);
  }

  function changemakers_get_event_status($nid){
    $node_event = node_load($nid);
    if($node_event->field_event_status['und'][0]['value'] == 1){
      return "เปิดให้ลงชื่อ";
    }
    else if($node_event->field_event_status['und'][0]['value'] == 2){
      return "ปิดกิจกรรม";
    }
    else{
      return "ยกเลิกกิจกรรม";
    }
    // print "<pre>";
    // print_r($node_event->field_event_status);
    // print "</pre>";
  }

  function changemakers_get_user_join_event($nid){
    module_load_include('inc','webform','includes/webform.submissions');
    //Start Webform //
    $seleteions = webform_get_submissions(array('nid'=>3));

    $result = array();
    $i = 0;
    foreach ($seleteions as $key => $value) {
      if($value->data[2][0] == $nid)
      {
        $user_data= user_load($value->data[1][0]);
        if($user_data->uid != 0){
          $result[$i]['name'] = $user_data->name;//$user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
          if(empty($user_data->picture)){
            $result[$i]['picture'] = "/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg";
          }
          else{
             $result[$i]['picture'] = '/sites/default/files/pictures/'.$user_data->picture->filename;
          }
         
          $result[$i]['username'] = $user_data->name;
          $result[$i]['uid'] = $user_data->uid;
          $result[$i]['sid'] = $value->sid;
          $result[$i]['status'] = $value->data[8][0] ;
          $i++;
        }
      }
    }

    // print "<pre>";
    // print_r($result);
    // print "</pre>"; 
    return $result;
  }

  function changemakers_get_user_join_evenr_csv($nid){

    module_load_include('inc','webform','includes/webform.submissions');
    //Start Webform //
    $seleteions = webform_get_submissions(array('nid'=>3));

    $result_csv = array();
    $i = 0;
    foreach ($seleteions as $key => $value) {
      if($value->data[2][0] == $nid)
      {



        $user_data= user_load($value->data[1][0]);

        // print "<pre>";
        // print_r($value->data[3][0]);
        // print "</pre>"; 
        if($value->data[3][0]){
          $result_csv[$i]['answer1'] = str_replace("\"","", strip_tags($value->data[3][0]));
        }else{
          $result_csv[$i]['answer1'] = "";
        }

        if($value->data[4][0]){
          $result_csv[$i]['answer2'] = str_replace("\"","", strip_tags($value->data[4][0]));
        }else{
          $result_csv[$i]['answer2'] = "";
        }

        if($value->data[5][0]){
          $result_csv[$i]['answer3'] = str_replace("\"","", strip_tags($value->data[5][0]));
        }else{
          $result_csv[$i]['answer3'] = "";
        }

        if($value->data[6][0]){
          $result_csv[$i]['answer4'] = str_replace("\"","", strip_tags($value->data[6][0]));
        }else{
          $result_csv[$i]['answer4'] = "";
        }

        if($value->data[7][0]){
          $result_csv[$i]['answer5'] = str_replace("\"","", strip_tags($value->data[7][0]));
        }else{
          $result_csv[$i]['answer5'] = "";
        }

        $result_csv[$i]['fname'] = $user_data->field_profile_firstname['und'][0]['value'];
        $result_csv[$i]['lname'] = $user_data->field_profile_lastname['und'][0]['value'];
        $result_csv[$i]['email'] = $user_data->mail;
        $result_csv[$i]['phone'] = $user_data->field_profile_phone['und'][0]['value'];
        $result_csv[$i]['username'] = $user_data->name;

        if($user_data->roles){
          foreach ($user_data->roles as $key => $value) {
            $result_csv[$i]['role'] = $result_csv[$i]['role']."/".$value;
            $result_csv[$i]['role'] = str_replace("/authenticated user/","",$result_csv[$i]['role']);
          }
        }
        $result_csv[$i]['uid'] = $user_data->uid;

        

        
        
        // $result_csv[$i]['answer3'] = strip_tags($value->data[3][0]);
        // $result_csv[$i]['answer4'] = strip_tags($value->data[3][0]);
        // $result_csv[$i]['answer5'] = strip_tags($value->data[3][0]);



        // foreach ($value->data as $key => $value2) {
        //   if($value2[0] != 1 && $value2[0] != 2 && isset($value2[0])){
        //     $answer = "answer".$index;
        //     $result[$i]["answer"] = $value2[0];
        //     $index++;
        //   }
          
        // }

        //$result[$i]['phone'] = $user_data->field_profile_phone['und'][0]['value'];


        //$user_data->field_profile_lastname['und'][0]['value'];

        
        $i++;
      }
    }

    // print "<pre>";
    // print_r($result_csv);
    // print "</pre>"; 
    return $result_csv;
  }
  function changemakers_check_questions($node){
    $check = 0;

    if($node->field_question_1['und'][0]['value'] != ""){
      $check++;
    }else if($node->field_question_2['und'][0]['value'] != ""){
      $check++;
    }else if($node->field_question_3['und'][0]['value'] != ""){
      $check++;
    }else if($node->field_question_4['und'][0]['value'] != ""){
      $check++;
    }else if($node->field_question_5['und'][0]['value'] != ""){
      $check++;
    }


    return $check;
  }
#end function for changemakers news&&event

#function for journal
  function changemakers_get_my_journal($uid){
    global $user;
    $sql= "select * from node where uid='".$uid."' and type='journal' LIMIT 2";
    $query_db = db_query($sql);
    $my_journal = array();
    $i =0;
    foreach ($query_db as $key => $rows) {
      $journal = node_load($rows->nid);
      $user_data = user_load($uid);
      $my_journal[$i]['title'] = $journal->title;
      $photo = file_create_url($journal->field_journal_image['und'][0]['uri']); 
      if(!empty($journal->field_journal_image['und'][0]['uri'])){
        $my_journal[$i]['user_picture'] =  $photo;
      }
      else{
        $my_journal[$i]['user_picture'] = "/sites/all/themes/changemakers/images/journal1.jpg"; 
      }
      
      $my_journal[$i]['path'] = drupal_get_path_alias('/journal/'.$rows->nid);
      //$my_journal[$i]['date'] = timeAgo(strip_tags(str_replace("(All day)", "", $fields['field_knowledge_date']->content)));
      $my_journal[$i]['date'] = timeAgo(date('d-m-Y', $journal->created));
      $i++;
    }
    // print "<pre>";
    // print_r($my_journal);
    // print "</pre>";

    return $my_journal;

  }
  function changemakers_check_my_journal(){
    global $user;
    $results = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('type', 'journal','=')
          ->condition('uid', $user->uid,'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
        $data[] = array('id'=>$record['nid']);         
    }

    return count($data);
    // print "<pre>";
    // print_r($data);
    // print "</pre>";
  }
#end function for journal

#function for changemakers dashboard
  function changemakers_get_user_follow_project_dashboard(){
    global $user;
    $user_data = user_load($user->uid);
    $user_follow_project = array();

    $sql= "select f.field_following_project_nid, n.changed from field_data_field_following_project f
           inner join node n
           on f.field_following_project_nid = n.nid  
           where f.entity_id ='".$user->uid."'
           order by n.changed DESC";
    $query_db = db_query($sql);
    $following_project = array();
    $i = 0;
    foreach ($query_db as $row) 
    {
      $project_id[$i]['nid'] = $row->field_following_project_nid;
      $query_c = db_select('comment', 'z')
          ->fields('z', array('nid','changed'))
          ->condition('z.nid', $row->field_following_project_nid )
          ->orderBy('z.changed', 'DESC')
          ->range(0, 1)
          ->execute();
      $get_node_c = $query_c->fetchObject();

      if( !empty($get_node_c->nid)){

        if($get_node_c->changed > $row->changed ){
          $project_id[$i]['last_update'] = $get_node_c->changed;
        }
        else{
          $project_id[$i]['last_update'] = $row->changed;
        }
  
      }else{
        $project_id[$i]['last_update'] = $row->changed;
      }
      $i++;

    }
    usort($project_id, 'changemakers_sortByOrder');
    $i = 0;
    foreach ($project_id as $key => $value) {

        $project = node_load($value['nid']);

        //$project = node_load($user_data->field_following_project['und'][$i]['nid']);
        if(!empty($project->field_project_image['und'][0]['filename'])){
          $user_follow_project[$i]['picture'] = image_style_url("cover-image",$project->field_project_image['und'][0]['uri']);
        }else{
          $user_follow_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        
        $user_follow_project[$i]['title'] = $project->title;
        $user_follow_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        $user_follow_project[$i]['nid'] = $user_data->field_following_project['und'][$i]['nid'];
        $user_follow_project[$i]['status'] = $project->field_project_status['und'][0]['value'];
        
        $path = drupal_get_path_alias("node/".$project->nid);
        if(is_numeric($path)){
          $path = "/project/".$path;
        }
        $user_follow_project[$i]['path'] = $path;
        $i++;



      }
  


      // print "<pre>";
      // print_r($project_id);
      // print "</pre>"; 


    return $user_follow_project;
  }
  function changemakers_get_user_join_project_dashboard(){
    global $user;
    module_load_include('inc','webform','includes/webform.submissions');
    //Start Webform //
    $seleteions = webform_get_submissions(array('nid'=>2));

    // $sql = "select *  from webform_submissions w
    //         inner join webform_submitted_data s on  w.sid = s.sid
    //         where w.nid  = 2 
    //         and w.uid = '".$user->uid."'
    //         and cid = 3";
    // $get_join = db_query($sql);

    // foreach ($get_join as $key => $value) {
    //   print '<pre>';
    //   print_r($value); 
    //   print '</pre>';
    // }

    $user_join_project = array();
    $i = 0;
    $project_id = array();
    foreach ($seleteions as $key => $value) {
      if($value->data[1][0] == $user->uid && $value->data[3][0] == 1)
      {
        // $sql_node = "select nid, changed from node 
        //           where nid = '".$value->data[2][0]."'
        //           group by nid
        //           order by changed
        //           LIMIT 1 ";

        $query = db_select('node', 'z')
          ->fields('z', array('nid','changed'))
          ->condition('z.nid', $value->data[2][0])
          ->range(0, 1)
          ->execute();
        $query_node = $query->fetchObject();


        // print '<pre>';
        // print_r($query_node->nid);   
        // print '</pre>';
        //$query_node = db_query($sql_node);
        //$query_node = db_query($sql_node, array(":city" => $city))->fetchField();

        $node = node_load($query_node->nid);
        if(!empty($query_node->nid)){
          $project_id[$i]['nid'] = $query_node->nid;
      
          $query_c = db_select('comment', 'z')
            ->fields('z', array('nid','changed'))
            ->condition('z.nid', $value->data[2][0])
            ->orderBy('z.changed', 'DESC')
            ->range(0, 1)
            ->execute();
          $get_node_c = $query_c->fetchObject();

          if( !empty($get_node_c->nid)){

              if($get_node_c->changed > $node->changed ){
                $project_id[$i]['last_update'] = $get_node_c->changed;
              }
              else{
                $project_id[$i]['last_update'] = $node->changed;
              }
        
          }else{
            $project_id[$i]['last_update'] = $node->changed;
          }
          $i++;
        
        }
      }
    }

      
      usort($project_id, 'changemakers_sortByOrder');
      // print '<pre>';
      // print_r($project_id);   
      // print '</pre>';
      $i=0;
      foreach ($project_id as $key => $value) {
        $project = node_load($value['nid']);
        if(!empty($project->title)){
          //$user_join_project[$i]['picture'] = "/sites/default/files/".$project->field_project_image['und'][0]['filename'];
          if(isset($project->field_project_image['und'][0]['filename'])){
            $user_join_project[$i]['picture'] = image_style_url("cover-image",$project->field_project_image['und'][0]['uri']);
          }else{
            $user_join_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
          }
          $user_join_project[$i]['title'] = $project->title;
          $user_join_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
          $user_join_project[$i]['status'] = $project->field_project_status['und'][0]['value'];
          $user_join_project[$i]['nid'] = $project->nid;
          $path = drupal_get_path_alias("node/".$project->nid);
          if(is_numeric($path)){
            $path = "/project/".$path;
          }
          $user_join_project[$i]['path'] = $path;
          $i++;

        }
        
      }
    

    
   

    return $user_join_project;
  }
  function changemakers_get_user_create_project_dashboard(){
    global $user;
   
    $sql= "select * 
    from node where uid='".$user->uid."' 
    and type='project' 
    order by changed desc";

    
    $query_db = db_query($sql);
    $journal_id = array();
    $i = 0;
    $user_create_project = array();
    foreach ($query_db as $row){
      $project_id[$i]['nid'] = $row->nid;
      $query_c = db_select('comment', 'z')
        ->fields('z', array('nid','changed'))
        ->condition('z.nid', $row->nid)
        ->orderBy('z.changed', 'DESC')
        ->range(0, 1)
        ->execute();
      $get_node_c = $query_c->fetchObject();

      if( !empty($get_node_c->nid)){

          if($get_node_c->changed > $row->changed ){
            $project_id[$i]['last_update'] = $get_node_c->changed;
          }
          else{
            $project_id[$i]['last_update'] = $row->changed;
          }
    
      }else{
        $project_id[$i]['last_update'] = $row->changed;
      }
      $i++;

    }

    usort( $project_id, "changemakers_sortByOrder");
    $i = 0;
    foreach ($project_id as $key => $value) {

      $data = node_load($value['nid']);
      $user_create_project[$i]['title'] = $data->title;
      if(isset($data->field_project_image['und'][0]['filename'])){
        $user_create_project[$i]['picture'] = image_style_url("cover-image",$data->field_project_image['und'][0]['uri']);
      }else{
        $user_create_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
      }
      
      $user_create_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
      $user_create_project[$i]['status'] = $data->field_project_status['und'][0]['value'];
      $user_create_project[$i]['nid'] = $value['nid'];

      $path = drupal_get_path_alias($value['nid']);
      if(is_numeric($path)){
        $path = "/project/".$path;
      }

      $user_create_project[$i]['path'] = $path;
      $i++;
    }
    // print '<pre>';
    // print_r($user_create_project); 
    // print '</pre>';
    return $user_create_project;
  }

  function changemakers_get_project_related_campaign_dashboard($project_id){

    $sql= "select n.entity_id from field_data_field_project_join n JOIN field_data_field_join_project c ON c.entity_id = n.field_project_join_value WHERE c.field_join_project_nid = ".$project_id;
    $query_db = db_query($sql);
    $i = 0;
    $project_joincampaign = array();
    foreach ($query_db as $row){
      $campaign = node_load($row->entity_id);
      $project_joincampaign[$i]['nid'] = $row->entity_id;
      $project_joincampaign[$i]['title'] = $campaign->title;
      $project_joincampaign[$i]['status'] = $campaign->field_campaign_stage['und'][0]['value'];
      $project_joincampaign[$i]['period'] = changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value2']);
      // print '<pre>';
      // print_r($project_joincampaign); 
      // print '</pre>';
      // foreach ($project_join_campaign->field_project_join['und'] as $key => $value) {
      //   $get_project_id = field_collection_item_load( $value['value'], $reset = FALSE);
      //   if($get_project_id->field_join_status['und'][0]['value'] == 1){
      //     $count++;


      //   } 
      // }
    }
    return $project_joincampaign;
  }

  function changemakers_get_project_related_event($skill){
    $skill_data = array();
    $target = array();
    if(!empty($skill)){
      foreach ($skill as $key => $value) {
        $skill_data[] = $value['tid'];
      }
    }
    

    if(!empty($skill)){

      $query = db_select('field_data_field_event_skill_interest', 'fm');
          //$query->join('field_data_field_problem_topic', 'fi', 'fm.entity_id = fi.entity_id');
          $query->fields('fm', array('entity_id'));
          $query->condition('fm.field_event_skill_interest_tid', $skill_data ,"in" );
          // $query->condition('fm.field_project_status_value', 1 ,"=" );
          // $query->condition('fi.field_problem_topic_tid', $taxo , "=");
          $query->range(0,1);
      $result_get_status = $query->distinct()->execute();
    }

    // foreach ($result_get_status as $key => $value) {
    //   print "<pre>";
    //   print_r($value);
    //   print "</pre>";
    // }
    // $sql= "select entity_id from field_data_field_event_skill_interest GROUP BY entity_id ";
    // $query_db = db_query($sql);
    // $x = 0;
    // foreach ($query_db as $key => $rows) {
    //   $sql2= "select field_event_skill_interest_tid from field_data_field_event_skill_interest where entity_id = '".$rows->entity_id."'";
    //   $query_db_2 = db_query($sql2);
    //   $event_use_skill[$x]['nid'] = $rows->entity_id;
    //   foreach ($query_db_2 as $key => $rows2) {
    //     $event_use_skill[$x]['tid'][] = $rows2->field_event_skill_interest_tid;
    //   }
    //   $x++;
      
    // }

    

    

    

    //$event_use_skill = node_load_multiple(array(), array('type' => 'event'));
    $event_use_skill_user = array();
    $i =0;
    if(!empty($result_get_status)){
      foreach ($result_get_status as $key => $value) {
        $check = node_load($value->entity_id);
        $event_use_skill_user[$i]['nid'] = $check->nid;
        $event_use_skill_user[$i]['title'] = $check->title;
        $event_use_skill_user[$i]['facilities'] = $check->field_event_facilities['und'][0]['value'];
        $event_use_skill_user[$i]['period'] = changemakers_get_date_thai_short($check->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($check->field_news_event_date['und'][0]['value2']);
        $i++;
      } 
    }
    
    // print '<pre>';
    // print_r($event_use_skill_user); 
    // print '</pre>';
    return $event_use_skill_user;
  }

  function changemakers_get_user_related_join_event(){
    global $user;
    module_load_include('inc','webform','includes/webform.submissions');
    //Start Webform //
    $seleteions = webform_get_submissions(array('nid'=>3));

    $user_join_event = array();
    $node_event = array();
    $nodefix =array();
    $i = 0;
    $x = 0;
    foreach ($seleteions as $key => $value) {
        
      if($value->data[1][0] == $user->uid )
      {
        $node_event[$x]['nid'] = $value->data[2][0];
        $x++;
      }
    }

    usort($node_event, "changemakers_sortDescNid");

    $count_event = 0;
    foreach ($node_event as $key => $value) {
      if($count_event < 3){
        if(!in_array($value['nid'], $nodefix)){
           $nodefix[] = $value['nid'];
           $count_event++;
        }
      }
     
    }
    foreach ($nodefix as $key => $value) {
        $check = node_load($value);
        $user_join_event[$i]['nid'] = $check->nid;
        $user_join_event[$i]['title'] = $check->title;
        $user_join_event[$i]['facilities'] = $check->field_event_facilities['und'][0]['value'];
        $user_join_event[$i]['period'] = changemakers_get_date_thai_short($check->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($check->field_news_event_date['und'][0]['value2']);
        $i++;
    }

    
    // print '<pre>';
    //   print_r($user->uid); 
    //   print '</pre>';


    return $user_join_event;
  }

  function changemakers_get_partner_related_campaign_dashboard(){
    global $user;
      $query = db_select('field_data_field_partner_campaign', 'fm');
      $query->fields('fm', array('entity_id'));
      $query->condition('fm.field_partner_campaign_uid', $user->uid ,"=" );
      $query->range(0,5);
      $result = $query->distinct()->execute();
      $i = 0;
      foreach ($result as $key => $value) {
        $campaign = node_load($value->entity_id);
        $partner_joincampaign[$i]['nid'] = $value->entity_id;
        $path = drupal_get_path_alias("node/".$value->entity_id);
        if(is_numeric($path)){
          $path = "/campaign/".$path;
        }
        $partner_joincampaign[$i]['path'] = $path;
        $partner_joincampaign[$i]['title'] = $campaign->title;
        $partner_joincampaign[$i]['status'] = $campaign->field_campaign_stage['und'][0]['value'];
        $partner_joincampaign[$i]['period'] = changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value2']);
        $i++;
      }
    return $partner_joincampaign;
  }

  function changemakers_get_user_related_campaign_dashboard($problem, $target){
    $get_problem = array();
    if(count($problem) != 0){
      foreach ($problem as $key => $value) {
       $get_problem[] = $value["tid"];
      }
    }
    

    $get_target = array();
    if(count($target) != 0){
      foreach ($target as $key => $value) {
       $get_target[] = $value["tid"];
      }

    }
    

    if(!empty($get_target) && !empty($get_problem)){

      $query = db_select('field_data_field_campaign_problems', 'fm');
      $query->join('field_data_field_campaign_target', 'fi', 'fm.entity_id = fi.entity_id');
      $query->fields('fm', array('entity_id'));
      $db_or = db_or();
      if(!empty($get_problem)){
        $db_or->condition('fm.field_campaign_problems_tid', $get_problem ,"in");
      }
      
      if(!empty($get_target)){
        $db_or->condition('fi.field_campaign_target_tid', $get_target ,"in" );
      }
      $query->condition($db_or);

      $query->range(0,5);
      $result = $query->distinct()->execute();


    }else if(!empty($get_problem)){
      $result_cnt = db_select('field_data_field_campaign_problems', 't');
      $result = $result_cnt
        ->fields('t', array('entity_id'))
        ->condition('t.field_campaign_problems_tid', $get_problem,"in")
        ->groupBy('t.entity_id')
        ->range(0, 5)
        ->execute();
    }
    else if(!empty($get_target)){
      $result_cnt = db_select('field_data_field_campaign_target', 't');
      $result = $result_cnt
        ->fields('t', array('entity_id'))
        ->condition('t.field_campaign_target_tid', $get_target,"in")
        ->groupBy('t.entity_id')
        ->range(0, 5)
        ->execute();
    }
    $i = 0;
    if(count($result) != 0){
      foreach ($result as $key => $value) {
        // print "<pre>";
        // print_r($value);
        // print "</pre>";
        $campaign = node_load($value->entity_id);
        $user_join_campaign[$i]['nid'] = $value->entity_id;
        $path = drupal_get_path_alias("node/".$value->entity_id);
        if(is_numeric($path)){
          $path = "/campaign/".$path;
        }

        $user_join_campaign[$i]['path'] = $path;
        $user_join_campaign[$i]['title'] = $campaign->title;
        $user_join_campaign[$i]['status'] = $campaign->field_campaign_stage['und'][0]['value'];
        $user_join_campaign[$i]['period'] = changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value2']);

        $img = image_style_url('large', $campaign->field_campaign_image['und'][0]['uri']);

        $user_join_campaign[$i]['picture'] = $img;
        $user_join_campaign[$i]['last_update'] = changemakers_format_date_thai_short($campaign->changed);
        $user_join_campaign[$i]['project_related'] = count($campaign->field_project_join['und']);
        $user_join_campaign[$i]['project_in_campaign'] = $count_project;

        $date_campaign = $campaign->field_campaign_date['und'][0]['value']." to ".$campaign->field_campaign_date['und'][0]['value2'];

        $date_ca = changemakers_get_date_start_date_campaign_list($date_campaign);

        $date_ca =  $date_ca[0]."- ".$date_ca[1]; 

        $user_join_campaign[$i]['date'] = $date_ca;

        $i++;
      }
    }
    usort( $user_join_campaign, "changemakers_sortByOrder");

    return $user_join_campaign;
  }

  function changemakers_get_user_related_campaign_my_campaign($problem, $target){
    global $user;
    $get_problem = array();
    if(count($problem) != 0){
      foreach ($problem as $key => $value) {
       $get_problem[] = $value["tid"];
      }
    }
    

    $get_target = array();
    if(count($target) != 0){
      foreach ($target as $key => $value) {
       $get_target[] = $value["tid"];
      }
    }
    $project = array();
    $results_join = db_select('node', 'n')
          ->fields('n', array('nid','title'))
          ->condition('type', 'project','=')
          ->condition('uid', $user->uid,'=')
          ->condition('status', 0,'>')
          ->execute();
    while($record = $results_join->fetchAssoc()) {
        $project[] = $record['nid']; 
    }

    $result = array();
    $i =0;
    $check = 0;

    


    if(!empty($get_problem)){
      $result_cnt = db_select('field_data_field_campaign_problems', 't');
      $result = $result_cnt
        ->fields('t', array('entity_id'))
        ->condition('t.field_campaign_problems_tid', $get_problem,"in")
        ->groupBy('t.entity_id')
        ->range(0, 5)
        ->execute();
    }
   
   if(!empty($get_target)){
      $result_cnt = db_select('field_data_field_campaign_target', 't');
      $result2 = $result_cnt
        ->fields('t', array('entity_id'))
        ->condition('t.field_campaign_target_tid', $get_target,"in")
        ->groupBy('t.entity_id')
        ->range(0, 5)
        ->execute();
    }
    $i = 0;

    if(count($result) != 0){
      $node_campaign = array();
      foreach ($result as $key => $value) {
       $node_campaign[] = $value->entity_id;
      }

      foreach ($result2 as $key => $value) {
        if(!in_array($value->entity_id, $node_campaign)){
          $node_campaign[] = $value->entity_id;
        }
      }
      $data_user = user_load($user->uid);
      foreach ($node_campaign as $key => $value) {
        $check = 0;
        $campaign = node_load($value);  
        for ($j=0; $j < count($campaign->field_project_join['und']); $j++) { 
          $data_result =  field_collection_item_load($campaign->field_project_join['und'][$j]['value'] , $reset = FALSE)->field_join_project['und'][0]['nid'];

          if(in_array($data_result, $project)){
            $check = 1;
          }
        }

        
        if(count($campaign->field_partner_campaign['und']) != 0){
          foreach ($campaign->field_partner_campaign['und']as $key => $value_field_partner_campaign) {
            if($value_field_partner_campaign['uid'] == $user->uid){
              $check = 1;
            }
          }
        }
        // print "<pre>";
        // print_r($user);
        // print "</pre>";
        if(isset($user->roles[6])){

          if(count($campaign->field_supported_organization['und']) != 0){
            foreach ($campaign->field_supported_organization['und']as $key => $value_field_supported_organization) {
              if($value_field_supported_organization['tid'] == $data_user->field_organization['und'][0]['tid']){
                $check = 1;
              }
            }
          }
        }

        
        if($check == 0){
          
          
          $user_join_campaign[$i]['nid'] = $campaign->nid;
          $path = drupal_get_path_alias("node/".$campaign->nid);
          // if(is_numeric($path)){
          //   $path = "/campaign/".$path;
          // }

          $user_join_campaign[$i]['path'] = $path;
          $user_join_campaign[$i]['title'] = $campaign->title;
          $user_join_campaign[$i]['status'] = $campaign->field_campaign_stage['und'][0]['value'];
          $user_join_campaign[$i]['period'] = changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($campaign->field_campaign_date['und'][0]['value2']);

          $img = image_style_url('large', $campaign->field_campaign_image['und'][0]['uri']);

          $user_join_campaign[$i]['picture'] = $img;
          $user_join_campaign[$i]['last_update'] = changemakers_format_date_thai_short($campaign->changed);
          $user_join_campaign[$i]['project_related'] = count($campaign->field_project_join['und']);
          $user_join_campaign[$i]['project_in_campaign'] = $count_project;

          $date_campaign = $campaign->field_campaign_date['und'][0]['value']." to ".$campaign->field_campaign_date['und'][0]['value2'];

          $date_ca = changemakers_get_date_start_date_campaign_list($date_campaign);

          $date_ca =  $date_ca[0]."- ".$date_ca[1]; 

          $user_join_campaign[$i]['date'] = $date_ca;

          $i++;
          $check = 0;
        }
        
      }
    }

        //     print "<pre>";
        // print_r($user_join_campaign);
        // print "</pre>";

    return $user_join_campaign;
  }

  function changemakers_sort_date_update_project($project){
    $i = 0;
    foreach ($project as $key => $value) {
        $query = db_select('node', 'z')
          ->fields('z', array('nid','changed'))
          ->condition('z.nid', $value)
          ->range(0, 1)
          ->execute();
        $query_node = $query->fetchObject();

        if(!empty($query_node->nid)){
          $project_id[$i]['nid'] = $query_node->nid;//->field_join_project['und'][0]['value'];

          $query_c = db_select('comment', 'z')
              ->fields('z', array('nid','changed'))
              ->condition('z.nid',  $query_node->nid )
              ->orderBy('z.changed', 'DESC')
              ->range(0, 1)
              ->execute();
          $get_node_c = $query_c->fetchObject();

          // print "<pre>";
          // print_r($get_node_c->changed);
          // print "</pre>";

          if( !empty($get_node_c->nid)){

            if($get_node_c->changed > $query_node->changed ){
              $project_id[$i]['last_update'] =  $get_node_c->changed;
            }
            else{
              $project_id[$i]['last_update'] =  $query_node->changed;
            }
      
          }else{
            $project_id[$i]['last_update'] =  $query_node->changed;
          }
          $i++;
        }
    }

    usort($project_id, 'changemakers_sortByOrder');

    return $project_id;
  }

  function changemakers_get_project_related_news($problem , $target){

    // $sql= "select entity_id from field_data_field_problem_interest GROUP BY entity_id LIMIT 5";
    // $query_db = db_query($sql);
    // $x = 0;
    // foreach ($query_db as $key => $rows) {
    //   $sql2= "select field_problem_interest_tid from field_data_field_problem_interest where entity_id = '".$rows->entity_id."' LIMIT 5";
    //   $query_db_2 = db_query($sql2);
    //   $news_interest[$x]['nid'] = $rows->entity_id;
    //   foreach ($query_db_2 as $key => $rows2) {
    //     $news_interest[$x]['tid'][] = $rows2->field_problem_interest_tid;
    //   }
    //   $x++;
      
    // }
    $problem_data = array();
    $target_data = array();
    if(isset($problem)){
      foreach ($problem as $key => $value) {
        $problem_data[] = $value['tid'];
      }

    }
    
    if(isset($target)){
      foreach ($target as $key => $value) {
        $target_data[] = $value['tid'];
      }

    }
    // print '<pre>';
    // print_r($problem_data); 
    // print '</pre>';
    
    if(!empty($problem_data) || !empty($target_data)){

      $query = db_select('field_data_field_problem_interest', 'fm');
          if(!empty($target_data)){
            //$query->join('field_data_field_target_interest', 'fi', 'fm.entity_id = fi.entity_id');
          }
          $query->fields('fm', array('entity_id'));
          $query->join('node', 'n', 'fm.entity_id = n.nid');
          $query->condition('n.type', "news" ,"like" );

          
          
          if(count($problem_data) != 0){
            $db_or = db_or();
            $db_or->condition('fm.field_problem_interest_tid', $problem_data, 'in');
          

          // print '<pre>';
          // print_r($problem_data); 
          // print '</pre>';

          // if(!empty($target_data)){
          //   //$db_or->condition('fi.field_target_interest_tid', $target_data, 'in');
          // }
          
          
          //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
          // $query->condition('fm.field_project_status_value', 1 ,"=" );
       
            $query->condition($db_or);
          }
          
          $query->range(0,5);
      $result_get_status = $query->distinct()->execute();
    }

    if(!empty($target_data)){
      $query = db_select('field_data_field_target_interest', 'fm');
      if(!empty($target_data)){
        //$query->join('field_data_field_target_interest', 'fi', 'fm.entity_id = fi.entity_id');
      }
      $query->join('node', 'n', 'fm.entity_id = n.nid');
      $query->condition('n.type', "news" ,"like" );
      $query->fields('fm', array('entity_id'));
      $db_or = db_or();
      
      if(!empty($target_data)){
        $db_or->condition('fm.field_target_interest_tid', $target_data, 'in');
      }

      if(!empty($db_or)){
        $query->condition($db_or);
      }
      
      $query->range(0,5);
      $result_get_status_tar = $query->distinct()->execute();

    }
    $count = 0;
    $data_news1 = array();
    $data_news2 = array();
    if(!empty($result_get_status)){
      foreach ($result_get_status as $key => $value) {
        $data_news1[] = $value->entity_id;
      }
    }

    foreach ($result_get_status_tar as $key => $value2) {
      $data_news2[] = $value2->entity_id;
    }

    if(count($data_news1) < count($data_news2)){
      $x = $data_news1;
      $data_news1 = $data_news2;
      $data_news2 = $x;
    }
    foreach ($data_news2 as $key => $value) {
      if(!in_array($value, $data_news1)){
        $data_news1[] = $value;
      }
    }


    $news_interest_user = array();
    $i =0;
    if(!empty($data_news1)){
      foreach ($data_news1 as $key => $value) {
           
        $check = node_load($value);
        if($check->type == "news"){
          $news_interest_user[$i]['nid'] = $check->nid;
          $news_interest_user[$i]['title'] = $check->title;
          $news_interest_user[$i]['period'] = changemakers_get_date_thai_short($check->field_news_event_date['und'][0]['value']);
          $news_interest_user[$i]['type'] = $check->field_news_event_type['und'][0]['value'];

          $path = drupal_get_path_alias("node/".$check->nid);
          if(is_numeric($path)){
            $path = "/news/".$path;
          }
          $news_interest_user[$i]['path'] = $path;
       
          $i++;
        }
      }
    }
    
    return $news_interest_user;
  }

  function changemakers_check_user_create_project_dashboard(){
    global $user;
   
    $sql= "select * from node where uid='".$user->uid."' and type='project'";
    $query_db = db_query($sql);
    $journal_id = array();
    $i = 0;
    $user_create_project = 0;
    foreach ($query_db as $row){
      if($row->nid){
         $user_create_project = 1;
         break; 
      }
    }
    // print '<pre>';
    // print_r($user_create_project); 
    // print '</pre>';
    return $user_create_project;
  }

  function changemakers_get_coach_projects($uid){
    
    $result_cnt = db_select('field_data_field_coach_project', 't');
    $result = $result_cnt
        ->fields('t', array('entity_id'))
        ->condition('t.field_coach_project_uid', $uid,"=")
        ->execute();
    $project_id = array();
    foreach ($result as $key => $value) {
      $project_id[] = $value->entity_id;
    }
    return $project_id;
  }

   function changemakers_get_user_join_campaign(){
      global $user;

      $project = array();
      $campaign = array();
      $projects = node_load_multiple(array(),array('type'=>'project','uid'=>$user->uid));
      foreach ($projects as $key => $item) {
        $project[] = $item->nid;
      }

      if($user->uid!=""){
        $user_join  = $user->uid;      

        $query_join = db_select('field_data_field_user_join_project','p');
        $query_join->fields('p',array('entity_id'));  
        $query_join->condition('p.field_user_join_project_uid',$user_join,'=');
        $result_join = $query_join->execute();
        while($record = $result_join->fetchAssoc()) {  
            $project[] = $record['entity_id'];   
        }   
      }
      if(!empty($project)){
        $count = 0;
        $query3 = db_select('field_data_field_project_join','j');
        $query3->fields('j'); 
        $query3->condition('j.field_project_join_value', $project,'IN');
        $result3 = $query3->execute();

          while($record = $result3->fetchAssoc()) { 
            if(!in_array($record['entity_id'],$campaign)){
              $campaign[$count]['nid'] = $record['entity_id']; 
              $count++;
            }
          } 
      }

      return $campaign;
  }

  function changemakers_get_coach_join_campaign_dashboard(){
    global $user;

    $other_join_project = changemakers_get_coach_projects($user->uid);
    $other_campaign = list_campaign_other($other_join_project);

    // print "<pre>";
    // print_r($other_campaign);
    // print "</pre>";

    //$data_user_join_campaign = node_load_multiple(array(), array('type' => 'campaign'));
    $j = 0;
    $count_project = 0;
    $user_join_campaign = array();
    foreach ($other_campaign as $key => $value) {
      $node_campaign = node_load($value);
      

      $count_project += count($node_campaign->field_project_join['und']);
      $user_join_campaign[$j]['title'] = $node_campaign->title;
      $img = image_style_url('large', $node_campaign->field_campaign_image['und'][0]['uri']);

      $user_join_campaign[$j]['picture'] = $img;
      $user_join_campaign[$j]['last_update'] = changemakers_format_date_thai_short($node_campaign->changed);
      $user_join_campaign[$j]['nid'] = $node_campaign->nid;
      $user_join_campaign[$j]['project_related'] = count($node_campaign->field_project_join['und']);
      $user_join_campaign[$j]['project_in_campaign'] = $count_project;
      $user_join_campaign[$j]['stage'] = $node_campaign->field_campaign_stage['und'][0]['value'];
      $user_join_campaign[$j]['final'] = changemakers_get_projects_in_final($value);


      $date_campaign = $node_campaign->field_campaign_date['und'][0]['value']." to ".$node_campaign->field_campaign_date['und'][0]['value2'];

      $date_ca = changemakers_get_date_start_date_campaign_list($date_campaign);

      $date_ca =  $date_ca[0]."- ".$date_ca[1]; 

      $user_join_campaign[$j]['date'] = $date_ca;

      $path = drupal_get_path_alias("node/".$node_campaign->nid);
      if(is_numeric($path)){
        $path = "/campaign/".$path;
      }
      $user_join_campaign[$j]['path'] = $path;
      $j++;

      
    }

    // print "<pre>";
    // print_r($other_campaign);
    // print "</pre>";

    return $user_join_campaign;
  }

  function changemakers_get_partner_join_campaign_dashboard(){
    global $user;

    $data_user_join_campaign = node_load_multiple(array(), array('type' => 'campaign'));
    $j = 0;
    $count_project = 0;
    $user_join_campaign = array();
    foreach ($data_user_join_campaign as $key => $value) {
      for ($i=0; $i < count($value->field_partner_campaign['und']) ; $i++) { 
        if($value->field_partner_campaign['und'][$i]['uid'] == $user->uid){
          $count_project += count($value->field_project_join['und']);
          $user_join_campaign[$j]['title'] = $value->title;

          $img = image_style_url('large', $value->field_campaign_image['und'][0]['uri']);

          $user_join_campaign[$j]['picture'] = $img;
          $user_join_campaign[$j]['last_update'] = changemakers_format_date_thai_short($value->changed);
          $user_join_campaign[$j]['nid'] = $value->nid;
          $user_join_campaign[$j]['project_related'] = count($value->field_project_join['und']);
          $user_join_campaign[$j]['project_in_campaign'] = $count_project;
          $user_join_campaign[$j]['stage'] = $value->field_campaign_stage['und'][0]['value'];
          $user_join_campaign[$j]['final'] = changemakers_get_projects_in_final($value->nid);


          $date_campaign = $value->field_campaign_date['und'][0]['value']." to ".$value->field_campaign_date['und'][0]['value2'];

          $date_ca = changemakers_get_date_start_date_campaign_list($date_campaign);

          $date_ca =  $date_ca[0]."- ".$date_ca[1]; 

          $user_join_campaign[$j]['date'] = $date_ca;

          $path = drupal_get_path_alias("node/".$value->nid);
          if(is_numeric($path)){
            $path = "/campaign/".$path;
          }
          $user_join_campaign[$j]['path'] = $path;

                  $result_cnt = db_select('comment', 'c')
                  ->fields('c')
                  ->condition('nid', $value->nid)
                  ->execute();
          $num_of_results_p = $result_cnt->rowCount();
          $total_pages_p = ceil($num_of_results_p/5); 
          $user_join_campaign[$j]['count_page'] =  $total_pages_p;

          $j++;
        }
      }
      
      
    }
   // print '<pre>';
   //    print_r($user_join_campaign); 
   //    print '</pre>';
    return $user_join_campaign;
  }

  function changemakers_get_org_join_campaign_dashboard(){
    global $user;

    $user_data = user_load($user->uid);
    $data_user_join_campaign = node_load_multiple(array(), array('type' => 'campaign'));
    $j = 0;
    
    $user_join_campaign = array();
    // print '<pre>';
    // print_r($user_data); 
    // print '</pre>';
    $count_project = 0;
    foreach ($data_user_join_campaign as $key => $value) {
      
      for ($i=0; $i < count($value->field_supported_organization['und']) ; $i++) { 
        if($value->field_supported_organization['und'][$i]['tid'] == $user_data->field_organization['und'][0]['tid']){
          foreach ($value->field_project_join['und'] as $key => $result_id) {
            // $get_project_id = field_collection_item_load( $result_id['value'], $reset = FALSE);
            // if(isset($get_project_id->field_join_project['und'][0]['nid'])){
              $count_project += 1;
            // }
            // print '<pre>';
            // print_r($get_project_id->field_join_project['und'][0]['nid']); 
            // print '</pre>';
          }
          
          $user_join_campaign[$j]['title'] = $value->title;
          $img = image_style_url('large', $value->field_campaign_image['und'][0]['uri']);

          $user_join_campaign[$j]['picture'] = $img;
          $user_join_campaign[$j]['last_update'] = changemakers_format_date_thai_short($value->changed);
          $user_join_campaign[$j]['nid'] = $value->nid;
          $user_join_campaign[$j]['project_related'] = count($value->field_project_join['und']);
          $user_join_campaign[$j]['project_in_campaign'] = $count_project;

          $user_join_campaign[$j]['stage'] =  $value->field_campaign_stage['und'][0]['value'];

          $date_campaign = $value->field_campaign_date['und'][0]['value']." to ".$value->field_campaign_date['und'][0]['value2'];

          $date_ca = changemakers_get_date_start_date_campaign_list($date_campaign);

          $date_ca =  $date_ca[0]."- ".$date_ca[1]; 

          $user_join_campaign[$j]['date'] = $date_ca;

          $path = drupal_get_path_alias("node/".$value->nid);
          if(is_numeric($path)){
            $path = "/campaign/".$path;
          }
          $user_join_campaign[$j]['path'] = $path;
          $j++;
        }
      }

      // print '<pre>';
      // print_r($value->field_supported_organization['und']); 
      // print '</pre>';
      
      
    }

    // for ($i=0; $i < count($user_data->field_join_campaign['und']); $i++) { 
    //   $data = node_load($user_data->field_join_campaign['und'][$i]['nid']);
    //   $user_join_campaign[$i]['title'] = $data->title;
    //   $user_join_campaign[$i]['picture'] = "/sites/default/files/".$data->field_campaign_image['und'][0]['filename'];
    //   $user_join_campaign[$i]['last_update'] = changemakers_format_date_thai_short($data->changed);
    //   $user_join_campaign[$i]['nid'] = $row->nid;
    // }
   
    // $sql= "select * from node where uid='".$user->uid."' and type='campaign'";
    // $query_db = db_query($sql);
    // $journal_id = array();
    // $i = 0;
    // $user_create_campaign = array();
    // foreach ($query_db as $row){
    //   $data = node_load($row->nid);
    //   $user_create_campaign[$i]['title'] = $data->title;
    //   $user_create_campaign[$i]['picture'] = "/sites/default/files/".$data->field_campaign_image['und'][0]['filename'];
    //   $user_create_campaign[$i]['last_update'] = changemakers_format_date_thai_short($data->changed);
    //   $user_create_campaign[$i]['nid'] = $row->nid;
    //   $i++;
    // }
    // print '<pre>';
    // print_r($user_join_campaign); 
    // print '</pre>';
    return $user_join_campaign;
  }

  function changemakers_get_helpdesk_join_project_dashboard($filter){
    global $user;

    //$user_data = user_load($user->uid);
    //$data_user_join_project = node_load_multiple(array(), array('type' => 'project'));
    $j = 0;
    $count_project = 0;
    $user_join_project = array();
    /*foreach ($data_user_join_project as $key => $value) {
      for ($i=0; $i < count($value->field_helpdesk_project['und']) ; $i++) { 
        if($value->field_helpdesk_project['und'][$i]['uid'] == $user->uid){
          $count_project += count($value->field_project_join['und']);
          $user_join_project[$j]['title'] = $value->title;
          $user_join_project[$j]['picture'] = "/sites/default/files/".$value->field_project_image['und'][0]['filename'];
          $user_join_project[$j]['last_update'] = changemakers_format_date_thai_short($value->changed);
          $user_join_project[$j]['nid'] = $value->nid;
          $user_join_project[$j]['project_related'] = count($value->field_project_join['und']);
          $user_join_project[$j]['project_in_campaign'] = $count_project;
          if(!empty($value->field_project_status)){
           $user_join_project[$j]['status'] = $value->field_project_status['und'][0]['value']; 
          }
          else{
            $user_join_project[$j]['status'] = 0;
          }

          if($user_join_project[$j]['status'] == 0){
            $user_join_project[$j]['status'] = "Not Active";
          }
          else{
            $user_join_project[$j]['status'] = "Active";
          }
          
          $user_join_project[$j]['path'] = drupal_get_path_alias("node/".$value->nid);
          $j++;
        }
      }
    } */

    $query = db_select('field_data_field_helpdesk_project', 'fm');
    $query->join('node', 'fi', 'fm.entity_id = fi.nid');
    $query->fields('fi', array('nid','changed'));
    $query->condition('fm.field_helpdesk_project_uid', $user->uid,"=");

    $result = $query->distinct()->execute();

    // $result_cnt = db_select('field_data_field_helpdesk_project', 't');
    // $result = $result_cnt
    //     ->fields('t', array('entity_id'))
    //     ->innerJoin()
    //     ->condition('t.field_helpdesk_project_uid', $user->uid,"=")
    //     ->execute();
    $project_id = array();
    $i = 0;
    foreach ($result as $key => $value) {
      $project_id[$i]['nid'] = $value->nid;
      $query_c = db_select('comment', 'z')
          ->fields('z', array('nid','changed'))
          ->condition('z.nid', $value->nid )
          ->orderBy('z.changed', 'DESC')
          ->range(0, 1)
          ->execute();
      $get_node_c = $query_c->fetchObject();

      if( !empty($get_node_c->nid)){

        if($get_node_c->changed > $value->changed ){
          $project_id[$i]['last_update'] = $get_node_c->changed;
        }
        else{
          $project_id[$i]['last_update'] = $value->changed;
        }
  
      }else{
        $project_id[$i]['last_update'] = $value->changed;
      }
      $i++;
    }
    usort($project_id, 'changemakers_sortByOrder');
    foreach ($project_id as $key => $value) {
      $node_project = node_load($value['nid']);
      if($filter == $node_project->field_project_status['und'][0]['value']){
        $count_project += count($node_project->field_project_join['und']);
        $user_join_project[$j]['title'] = $node_project->title;
        if($node_project->field_project_image['und'][0]['filename']){
           $user_join_project[$j]['picture'] = image_style_url("cover-image",$node_project->field_project_image['und'][0]['uri']);
        }
        else{
          $user_join_project[$j]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
       
        $user_join_project[$j]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        $user_join_project[$j]['nid'] = $node_project->nid;
        $user_join_project[$j]['project_related'] = count($node_project->field_project_join['und']);
        $user_join_project[$j]['project_in_campaign'] = $count_project;
        if(!empty($node_project->field_project_status)){
         $user_join_project[$j]['status'] = $node_project->field_project_status['und'][0]['value']; 
        }
        else{
          $user_join_project[$j]['status'] = 0;
        }

        if($user_join_project[$j]['status'] == 0){
          $user_join_project[$j]['status'] = "Not Active";
        }
        else{
          $user_join_project[$j]['status'] = "Active";
        }
        
        $user_join_project[$j]['path'] = drupal_get_path_alias("node/".$node_project->nid);
        $j++;
      }else if($filter == 2){
        $count_project += count($node_project->field_project_join['und']);
        $user_join_project[$j]['title'] = $node_project->title;
        if($node_project->field_project_image['und'][0]['filename']){
          $user_join_project[$j]['picture'] = image_style_url("cover-image",$node_project->field_project_image['und'][0]['uri']);
        }
        else{
          $user_join_project[$j]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        $user_join_project[$j]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        $user_join_project[$j]['nid'] = $node_project->nid;
        $user_join_project[$j]['project_related'] = count($node_project->field_project_join['und']);
        $user_join_project[$j]['project_in_campaign'] = $count_project;
        if(!empty($node_project->field_project_status)){
         $user_join_project[$j]['status'] = $node_project->field_project_status['und'][0]['value']; 
        }
        else{
          $user_join_project[$j]['status'] = 0;
        }

        if($user_join_project[$j]['status'] == 0){
          $user_join_project[$j]['status'] = "Not Active";
        }
        else{
          $user_join_project[$j]['status'] = "Active";
        }
        
        $user_join_project[$j]['path'] = drupal_get_path_alias("node/".$node_project->nid);
        $j++;
      }
    }

    //
    // print '<pre>';
    // print_r($project_id); 
    // print '</pre>';
    return $user_join_project;
  }

  function changemakers_get_org_join_projects_dashboard(){
    global $user;

    //$user_data = user_load($user->uid);
    $data_user_join_project = node_load_multiple(array(), array('type' => 'project'));
    $j = 0;
    $user_join_projects = array();
    foreach ($data_user_join_project as $key => $value) {
      for ($i=0; $i < count($value->field_organization_project['und']) ; $i++) { 
        if($value->field_organization_project['und'][$i]['uid'] == $user->uid){
          $user_join_projects[$j]['title'] = $value->title;
          $user_join_projects[$j]['picture'] = "/sites/default/files/".$value->field_project_image['und'][0]['filename'];
          $user_join_projects[$j]['last_update'] = changemakers_format_date_thai_short($value->changed);

          $user_join_projects[$j]['nid'] = $value->nid;
          $j++;
        }
      }
      
      // print '<pre>';
      // print_r($value); 
      // print '</pre>';
    }
    return $user_join_projects;
  }

  function changemakers_get_new_project_dashboard(){
    global $user;
   
    $sql= "select * from node n JOIN field_data_field_coach_project c ON c.entity_id != n.nid WHERE n.type = 'project'";
    $query_db = db_query($sql);
    $i = 0;
    $coach_project = array();
    foreach ($query_db as $row){
      $data = node_load($row->nid);
      $coach_project[$i]['title'] = $data->title;
      $coach_project[$i]['picture'] = "/sites/default/files/".$data->field_project_image['und'][0]['filename'];
      $coach_project[$i]['last_update'] = changemakers_format_date_thai_short($data->changed);
      $coach_project[$i]['nid'] = $row->nid;
      $i++;
    }
    // print '<pre>';
    // print_r($user_create_project); 
    // print '</pre>';
    return $coach_project;
  }

  function changemakers_get_project_join_campaign(){
    global $user;
   
    $sql= "select * from node n JOIN field_data_field_coach_project c ON c.entity_id != n.nid WHERE n.type = 'project'";
    $query_db = db_query($sql);
    $i = 0;
    $coach_project = array();
    foreach ($query_db as $row){
      $data = node_load($row->nid);
      $coach_project[$i]['title'] = $data->title;
      $coach_project[$i]['picture'] = "/sites/default/files/".$data->field_project_image['und'][0]['filename'];
      $coach_project[$i]['last_update'] = changemakers_format_date_thai_short($data->changed);
      $coach_project[$i]['nid'] = $row->nid;
      $i++;
    }
    // print '<pre>';
    // print_r($user_create_project); 
    // print '</pre>';
    return $coach_project;
  }
  function changemakers_get_project_join_campaign_dashboard($campaign_id){
    $project_join_campaign = node_load($campaign_id);
    $get_project_data = array();
    $i=0;
    $project_update = array();
    $up_index = 0;
    foreach ($project_join_campaign->field_project_join['und'] as $key => $value) {

        $get_project_id = field_collection_item_load( $value['value'], $reset = FALSE);

        $query = db_select('node', 'z')
          ->fields('z', array('nid','changed'))
          ->condition('z.nid', $get_project_id->field_join_project['und'][0]['nid'])
          ->range(0, 1)
          ->execute();
        $query_node = $query->fetchObject();

        if(!empty($query_node->nid)){
          $project_id[$i]['nid'] = $query_node->nid;//->field_join_project['und'][0]['value'];

          $query_c = db_select('comment', 'z')
              ->fields('z', array('nid','changed'))
              ->condition('z.nid',  $query_node->nid )
              ->orderBy('z.changed', 'DESC')
              ->range(0, 1)
              ->execute();
          $get_node_c = $query_c->fetchObject();

          // print "<pre>";
          // print_r($get_node_c->changed);
          // print "</pre>";

          if( !empty($get_node_c->nid)){

            if($get_node_c->changed > $query_node->changed ){
              $project_id[$i]['last_update'] =  $get_node_c->changed;
            }
            else{
              $project_id[$i]['last_update'] =  $query_node->changed;
            }
      
          }else{
            $project_id[$i]['last_update'] =  $query_node->changed;
          }
          $i++;
        }
      }
    // print '<pre>';
    // print_r($project_id); 
    // print '</pre>';

    usort($project_id, 'changemakers_sortByOrder');
    $i = 0;
    foreach ($project_id as $key => $value) {

      $get_project = node_load($value['nid']);
      $user_data = user_load($get_project->uid);
      $get_project_data[$i]['title'] =  $get_project->title;

      //$get_project_data[$i]['picture'] =  "/sites/default/files/".$get_project->field_project_image['und'][0]['filename'];
      if($get_project->field_project_image['und'][0]['filename']){
        $img = image_style_url('large', $get_project->field_project_image['und'][0]['uri']);

        $get_project_data[$i]['picture'] = $img;
      }
      else{
        $get_project_data[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
      }
      

      $get_project_data[$i]['last_update'] =  timeAgo(date("y-m-d H:i:s ",$value['last_update']));//changemakers_format_date_thai_short($get_project->changed);
      $get_project_data[$i]['last_update2'] = date("y-m-d H:i:s ",$value['last_update']);
      $get_project_data[$i]['nid'] =  $get_project->nid;
      $path = drupal_get_path_alias("node/".$get_project->nid);
      if(is_numeric($path)){
        $path = "/project/".$path;
      }
      $get_project_data[$i]['path'] =  $path;
      $get_project_data[$i]['username'] = $user_data->name;
      
      //$project_update[$up_index] =  date("y-m-d H:s:i ",$get_project->changed);


  
      $up_index++;
      $i++;
        

    }

    // print '<pre>';
    // print_r($get_project_data); 
    // print '</pre>';

    // sort($project_update);


    // $result_project_data = array();
    // $index = 0;

    // $clength=count($project_update);
    // for($x=$clength-1;$x >=0;$x--)
    // {
    //   foreach ($get_project_data as $key => $value2) {
    //     if($project_update[$x] == $value2['last_update2']){
    //       if($index < 4){
    //         $result_project_data[$index] = $value2;
    //         $index ++ ;
    //       }
    //     }
    //   }
    // }

   

    return $get_project_data;
    
  }
  function changemakers_get_all_campaign_for_admin (){
    $value = 5;
    $sql= "
      SELECT n.nid, n.title, n.changed, cp.field_campaign_image_fid
      FROM node n 
      LEFT JOIN field_data_field_campaign_image cp ON cp.entity_id = n.nid 
      WHERE n.type like 'campaign'
      ORDER BY n.nid DESC
      LIMIT ".$value."";
      ;
    $query_db = db_query($sql);
    
    $campaign_list = array();
    $i = 0;
    foreach ($query_db as $key => $value) {
      $picture = file_load($value->field_campaign_image_fid);
      $campaign_list[$i]['title'] = $value->title;
      $campaign_list[$i]['picture'] = "/sites/default/files/".$picture->filename;
      $campaign_list[$i]['last_update'] = changemakers_format_date_thai_short($value->changed);
      $campaign_list[$i]['nid'] = $value->nid;
      //$value['picture'] = $picture;
      // print '<pre>';
      // print_r($picture); 
      // print '</pre>';
      $i++;
    }
    // $campaign_list_data = node_load_multiple(array(), array('type' => 'campaign'));
    // $j = 0;
    // $count_project = 0;
    // foreach ($campaign_list_data as $key => $value) {

    //     $campaign_list[$j]['title'] = $value->title;
    //     $campaign_list[$j]['picture'] = "/sites/default/files/".$value->field_campaign_image['und'][0]['filename'];
    //     $campaign_list[$j]['last_update'] = changemakers_format_date_thai_short($value->changed);
    //     $campaign_list[$j]['nid'] = $value->nid;
    //     $j++;
    //   }
      
      // print '<pre>';
      // print_r($value); 
      // print '</pre>';
    return $campaign_list;
  }


#end function for changemakers dashboard

#function knowledge
  function changemakers_check_related_knowledge($nid){
    global $user;
    $data_user = user_load($user->uid);
    $node_knowledge = node_load($nid);
    $user_tax = array();
    $node_tax = array();
    if(count($data_user->field_profile_problem_interest['und']) != 0){
      foreach ($data_user->field_profile_problem_interest['und'] as $key => $value) {
        $user_tax[] = $value;
      }
    }

    if(count($data_user->field_profile_target_group['und']) != 0){
      foreach ($data_user->field_profile_target_group['und'] as $key => $value) {
        $user_tax[] = $value;
      }
    }

    if(count($node_knowledge->field_knowledge_problem['und']) != 0){
      foreach ($node_knowledge->field_knowledge_problem['und'] as $key => $value) {
        $node_tax[] = $value;
      }
    }


    if(count($node_knowledge->field_knowledge_target['und']) != 0){
      foreach ($node_knowledge->field_knowledge_target['und'] as $key => $value) {
        $node_tax[] = $value;
      }
    }
    $check = 0;
    foreach ($user_tax as $key => $value) {
      if(in_array($value, $node_tax)){
        $check = 1;
      }
    }

    return $check;
    // print "<pre>";
    // print_r($node_knowledge->field_knowledge_problem);
    // print "</pre>";

    // print "<pre>";
    // print_r($data_user->field_profile_problem_interest);
    // print "</pre>";
  }

#end function knowledge


#function for changemakers my-project

  function changemakers_sortByOrder($a, $b) {
    return $b['last_update'] - $a['last_update'];
  }

  function changemakers_get_partner_project($filter){
    global $user;

    /*
      $partner = "select DISTINCT p.field_join_project_nid as nid,  n.changed from field_data_field_partner_campaign f
      inner join field_data_field_project_join s
      on s.entity_id = f.entity_id
      inner join field_data_field_join_project p
      on p.entity_id = s.field_project_join_value
      inner join node n 
      on p.field_join_project_nid = n.nid
      where f.field_partner_campaign_uid=".$user->uid;
      $query_db = db_query($partner);
      $project_id = array();
      $i = 0;
      foreach ($query_db as $row){ 
        $project_id[$i]['nid'] = $row->nid;
        $project_id[$i]['last_update'] = $row->changed;
        $i++;
      }

      // print "<pre>";
      // print_r($project_id);
      // print "</pre>";

      
      $i = 0;
      foreach ($project_id as $key => $value) {
          $sql_insert_partner = "select COUNT(*) as count from field_data_field_partner_project f
          where f.entity_id=".$value['nid']."
          and f.field_partner_project_uid = ".$user->uid;
          $sql_check_delta = "select COUNT(f.delta) as delta from field_data_field_partner_project f
          where f.entity_id=".$value['nid'];
          $query_db = db_query($sql_insert_partner);
          $db_delta = db_query($sql_check_delta);
          foreach ($query_db as $key => $row) {
            if($row->count != 0){
              // print "<pre>";
              // print_r($row);
              // print "</pre>";
            }else{
              // print "<pre>";
              // print_r($value." ไม่ได้อยู่");
              // print "</pre>";

              foreach ($db_delta as $key => $delta) {
                // print "<pre>";
                // print_r($delta->delta);
                // print "</pre>";
                if($delta->delta == 0){
                  $nid = db_insert('field_data_field_partner_project') // Table name no longer needs {}
                  ->fields(array(
                    'entity_type' => 'node',
                    'bundle' => 'project',
                    //'deleted' => 0,
                    'entity_id' => $value['nid'],
                    'revision_id' => $value['nid'],
                    'language' => 'und',
                    'delta' => 0,
                    'field_partner_project_uid' => $user->uid,
                  ))
                  ->execute();

                }else{
                  $nid = db_insert('field_data_field_partner_project') // Table name no longer needs {}
                  ->fields(array(
                    'entity_type' => 'node',
                    'bundle' => 'project',
                    //'deleted' => 0,
                    'entity_id' => $value['nid'],
                    'revision_id' => $value['nid'],
                    'language' => 'und',
                    'delta' => $delta->delta,
                    'field_partner_project_uid' => $user->uid,
                  ))
                  ->execute();

                }
              }

              
              //$nid = array();

            }
            
          }
          // print "<pre>";
          // print_r($query_db);
          // print "</pre>";
      } 
    */


    $project_id = array();
   
    $sql= "select * from field_data_field_partner_project f
    inner join node n
    on f.entity_id = n.nid
    where f.field_partner_project_uid=".$user->uid."
    order by n.changed DESC";
    $query_db = db_query($sql);
    foreach ($query_db as $row){ 
      if(!in_array($row->entity_id, $project_id)){
        $project_id[$i]['nid'] = $row->entity_id;
        $project_id[$i]['last_update'] = $row->changed;
        $i++;
      }
    }

    // print "<pre>";
    // print_r($project_id);
    // print "</pre>";



    usort($project_id, 'changemakers_sortByOrder');

    $i = 0;
    $coach_project = array();
    foreach ($project_id as $row){
      $data = node_load($row['nid']);
      if($filter == 2){

        $coach_project[$i]['title'] = $data->title;
        if(isset($data->field_project_image['und'][0]['filename'])){
          $image = image_style_url("cover-image", $data->field_project_image['und'][0]['uri']);
          $coach_project[$i]['picture'] =  $image;
        }else{
          $coach_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        $coach_project[$i]['last_update'] = changemakers_format_date_thai_short($row['last_update']);
        if($data->field_project_status['und'][0]['value'] == 1){
          $coach_project[$i]['status'] = "Active";
        }else{
          $coach_project[$i]['status'] = "Not Active";
        }
        $coach_project[$i]['nid'] = $data->nid;
        $i++;
      }else if($filter == $data->field_project_status['und'][0]['value']){
        $coach_project[$i]['title'] = $data->title;
        if(isset($data->field_project_image['und'][0]['filename'])){
          $image = image_style_url("cover-image", $data->field_project_image['und'][0]['uri']);
          $coach_project[$i]['picture'] =  $image;
        }else{
          $coach_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        $coach_project[$i]['last_update'] = changemakers_format_date_thai_short($row['last_update']);
        if($data->field_project_status['und'][0]['value'] == 1){
          $coach_project[$i]['status'] = "Active";
        }else{
          $coach_project[$i]['status'] = "Not Active";
        }
        $coach_project[$i]['nid'] = $data->nid;
        $i++;

      }
    }
    // print '<pre>';
    // print_r($coach_project); 
    // print '</pre>';
    return $coach_project;
  }
  function changemakers_get_coach_project($filter){
    global $user;
   
    $sql= "select * from field_data_field_coach_project f
    inner join node n 
    on f.entity_id = n.nid
    where field_coach_project_uid=".$user->uid."
    order by n.changed DESC";
    $query_db = db_query($sql);
    $i = 0;
    $coach_project = array();
    foreach ($query_db as $row){
      $project_id[$i]['nid'] = $row->entity_id;
      $query_c = db_select('comment', 'z')
          ->fields('z', array('nid','changed'))
          ->condition('z.nid',  $row->entity_id )
          ->orderBy('z.changed', 'DESC')
          ->range(0, 1)
          ->execute();
      $get_node_c = $query_c->fetchObject();

      // print "<pre>";
      // print_r($get_node_c->changed);
      // print "</pre>";

      if( !empty($get_node_c->nid)){

        if($get_node_c->changed > $row->changed ){
          $project_id[$i]['last_update'] =  $get_node_c->changed;
        }
        else{
          $project_id[$i]['last_update'] =  $row->changed;
        }
  
      }else{
        $project_id[$i]['last_update'] =  $row->changed;
      }
      $i++;
    }

    usort($project_id, 'changemakers_sortByOrder');
    foreach ($project_id as $key => $value) {
      $data = node_load($value['nid']);
      if($filter == 2){

        $coach_project[$i]['title'] = $data->title;
        if(isset($data->field_project_image['und'][0]['filename'])){
          $image = image_style_url("cover-image", $data->field_project_image['und'][0]['uri']);
          $coach_project[$i]['picture'] =  $image;
        }else{
          $coach_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        $coach_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        if($data->field_project_status['und'][0]['value'] == 1){
          $coach_project[$i]['status'] = "Active";
        }else{
          $coach_project[$i]['status'] = "Not Active";
        }
        $coach_project[$i]['nid'] = $data->nid;
        $i++;
      }else if($filter == $data->field_project_status['und'][0]['value']){
        $coach_project[$i]['title'] = $data->title;
        if(isset($data->field_project_image['und'][0]['filename'])){
          $image = image_style_url("cover-image", $data->field_project_image['und'][0]['uri']);
          $coach_project[$i]['picture'] =  $image;
        }else{
          $coach_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        $coach_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        if($data->field_project_status['und'][0]['value'] == 1){
          $coach_project[$i]['status'] = "Active";
        }else{
          $coach_project[$i]['status'] = "Not Active";
        }
        $coach_project[$i]['nid'] = $data->nid;
        $i++;

      }
    }
    // print '<pre>';
    // print_r($coach_project); 
    // print '</pre>';
    return $coach_project;
  }
  function changemakers_get_create_update_project(){
    global $user;
    $sql= "select nid from node where type='project' and uid=".$user->uid;
    $query_db = db_query($sql);
    $project_id = array();
    foreach ($query_db as $row){
      $project_id[] = $row->nid;
      // $data = node_load($row->nid);
      // $get_own_project[$i]['title'] = $data->title;
      // $i++;
    }
    $query_hd = db_select('field_data_field_helpdesk_project', 'fm');
             $query_hd->fields('fm', array('entity_id'));
             $query_hd->condition('fm.field_helpdesk_project_uid', $user->uid, '=');
    $result_get_hd = $query_hd->distinct()->execute();
    foreach ($result_get_hd as $key => $value) {
      if(!in_array($value->entity_id, $project_id)){
        $project_id[] = $value->entity_id;
      }
    }

    $query_ch = db_select('field_data_field_coach_project', 'fm');
             $query_ch->fields('fm', array('entity_id'));
             $query_ch->condition('fm.field_coach_project_uid', $user->uid, '=');
    $result_get_ch = $query_ch->distinct()->execute();
    foreach ($result_get_ch as $key => $value) {
      if(!in_array($value->entity_id, $project_id)){
        $project_id[] = $value->entity_id;
      }
    }
    $get_own_project = array();
    $i = 0;
    foreach ($project_id as $key => $value) {
      $data = node_load($value);
      $get_own_project[$i]['title'] = $data->title;
      $get_own_project[$i]['nid'] = $data->nid;
      $i++;
    }

    return $get_own_project;

  }


  function changemakers_get_own_project($filter){
    global $user;
    $sql= "select * from node where type='project' and uid=".$user->uid." ORDER BY changed DESC ";
    $query_db = db_query($sql);
    $i = 0;
    $get_own_project = array();
    foreach ($query_db as $row){
      $project_id[$i]['nid'] = $row->nid;
      $query_c = db_select('comment', 'z')
            ->fields('z', array('nid','changed'))
            ->condition('z.nid',  $row->nid )
            ->orderBy('z.changed', 'DESC')
            ->range(0, 1)
            ->execute();
        $get_node_c = $query_c->fetchObject();

        // print "<pre>";
        // print_r($get_node_c->changed);
        // print "</pre>";

        if( !empty($get_node_c->nid)){

          if($get_node_c->changed > $row->changed ){
            $project_id[$i]['last_update'] =  $get_node_c->changed;
          }
          else{
            $project_id[$i]['last_update'] =  $row->changed;
          }
    
        }else{
          $project_id[$i]['last_update'] =  $row->changed;
        }
        $i++;
    }

    usort($project_id, 'changemakers_sortByOrder');

    foreach ($project_id as $key => $value) {
      $data = node_load($value['nid']);
      if($filter == 2){
        $get_own_project[$i]['title'] = $data->title;
        $img = explode( '://', $data->field_project_image['und'][0]['uri'] ); 
        $image = image_style_url("large", $data->field_project_image['und'][0]['uri']); 

        if(isset($data->field_project_image['und'][0]['filename'])){
           $get_own_project[$i]['picture'] = $image;
        }else{
          $get_own_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        if($data->field_project_status['und'][0]['value'] == 1){
          $get_own_project[$i]['status'] = "Active";
        }else{
          $get_own_project[$i]['status'] = "Not Active";
        }


        // print '<pre>';
        // print_r($data); 
        // print '</pre>';
       
        $get_own_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        $get_own_project[$i]['nid'] = $data->nid;
        $i++;
      }else if($filter == $data->field_project_status['und'][0]['value'] ){
        $get_own_project[$i]['title'] = $data->title;
        $img = explode( '://', $data->field_project_image['und'][0]['uri'] ); 
        $image = image_style_url("large", $data->field_project_image['und'][0]['uri']); 

        if(isset($data->field_project_image['und'][0]['filename'])){
           $get_own_project[$i]['picture'] = $image;
        }else{
          $get_own_project[$i]['picture'] = "/sites/all/themes/changemakers/images/project1.jpg";
        }
        if($data->field_project_status['und'][0]['value'] == 1){
          $get_own_project[$i]['status'] = "Active";
        }else{
          $get_own_project[$i]['status'] = "Not Active";
        }


        // print '<pre>';
        // print_r($filter); 
        // print '</pre>';
       
        $get_own_project[$i]['last_update'] = changemakers_format_date_thai_short($value['last_update']);
        $get_own_project[$i]['nid'] = $data->nid;
        $i++;
      }
      
    }
    
    return $get_own_project;
  }
#end function for changemakers my-project
#function for changemakers search
  function datetidArray($data, $haystack) {
    foreach($haystack as $datas) {
       if($data==$datas['tid']){
          return true;
        }
      
     }

    return false;
  }

  function changemakers_get_search_konwledge($text,$problem="",$target="",$sort ="DESC"){
    if($problem=="All"){
      $problem = "";
    }
    if($target=="All"){
      $target = "";
    }

   
    $sumtid= array();
    if($problem[0] == "" || $problem[0] == "All"){
      $problem = array();
    }
    else{
      foreach ($problem as $key => $value) {
          $sumtid[] = $value;
        }
    }

    if($target[0] == "" || $target[0] == "All"){
      $target = array();
    }
    else{
      foreach ($target as $key => $value) {
           $sumtid[] = $value;
          }
    }

    
          
          

         

    // print "<pre>";
    // print_r($problem);
    // print "</pre>";
    // print "<pre>";
    // print_r($target);
    // print "</pre>";

    // if(!empty($problem)){
    //   $problem_s = " and tid='$problem'";
    // }else{
    //   $problem_s ="";
    // }
    // if(!empty($target)){
    //    $target_s = " and tid='$target'";
    // }else{
    //    $target_s = "";
    // }
    $tid = array();
    $sql_knowledge_tax= "select tid from taxonomy_term_data where name like '%".$text."%'";
    
    $query_db_tax = db_query($sql_knowledge_tax);
    foreach ($query_db_tax as $row){
      $tid[] = $row->tid;
    }

    // if(!empty($problem)){
    //   foreach ($problem as $key => $value) {
    //     if(!in_array($value, $tid)){
    //       $tid[] = $value;
    //     }
        
    //   }
    // }
    // if(!empty($target)){
    //    foreach ($target as $key => $value) {
    //     if(!in_array($value, $tid)){
    //       $tid[] = $value;
    //     }
    //   }
    // }


    $query = db_select('node', 'fm');
    $query->leftjoin('field_data_field_knowledge_problem', 'fi', 'fm.nid = fi.entity_id');
    $query->leftjoin('field_data_field_knowledge_target', 'fx', 'fm.nid = fx.entity_id');
    $query->condition('fm.type', 'knowledge' , 'like');
    $query->condition('fm.status', 1 , '=');
    // $query->fields('fm', array('nid'));
    $query->addField('fm', 'nid', 'entity_id');
    $db_or = db_or();
    if($text){
      $db_or->condition('fm.title', '%'.$text.'%' , 'like');
    }
    if(!empty($tid)){
      $db_or->condition('fi.field_knowledge_problem_tid', $tid, 'in');
    }

    if(!empty($tid)){
      $db_or->condition('fx.field_knowledge_target_tid', $tid, 'in');
    }
    
    
    //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
    // $query->condition('fm.field_project_status_value', 1 ,"=" );
    if(!empty($db_or)){
      $query->condition($db_or);
    }
    $query->condition('fm.status', '1', '=');
    $query->orderBy("fm.created", $sort);
    

    $sql_knowledge = $query->distinct()->execute();


    $nid = array();

    // print "<pre>";
    // print_r($tid);
    // print "</pre>";


    $knowledge = array();
    $index = 0;
    if(!empty($sql_knowledge)){
      $node_knowledge = db_query($sql_knowledge);
      // $data_knowledge = node_load_multiple(array(), array('type' => 'knowledge'));
      // echo "<pre>";
      // print_r($data_knowledge);
      // echo "</pre>";
      foreach ($node_knowledge as $key => $value) {
        $node_load =  node_load($value->entity_id);
        // echo "<pre>";
        // print_r($value);
        // echo "</pre>";
        $problem_tid = array();
        $target_tid = array();
        
        if(count($problem) != 0 && count($target) == 0 ){
          foreach ($node_load->field_knowledge_problem['und'] as $key => $value) {
            $problem_tid[] = $value['tid'];
          }
          // print "<pre>";
          // print_r($problem_tid);
          // print "</pre>";
          foreach ($problem as $key => $value_tax_search) {
            if(in_array($value_tax_search, $problem_tid)){
              $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
              $knowledge[$index]['title'] = $node_load->title;
              $knowledge[$index]['picture'] = $image;
              $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
              $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
              $knowledge[$index]['nid'] = $node_load->nid;
              $path = drupal_get_path_alias("node/".$node_load->nid);
              if(is_numeric($path)){
                $path = "/knowledge/".$path;
              }
              $knowledge[$index]['path'] = $path;
              $index++;
            }
          }
          

        }
        else if(count($target) != 0 && count($problem) == 0){
          foreach ($node_load->field_knowledge_target['und'] as $key => $value) {
            $target_tid[] = $value['tid'];
          }
          foreach ($target as $key => $value_tax_search_target) {
        
            if(in_array($value_tax_search_target, $target_tid)){

          
              $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
              $knowledge[$index]['title'] = $node_load->title;
              $knowledge[$index]['picture'] = $image;
              $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
              $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
              $knowledge[$index]['nid'] = $node_load->nid;
              $path = drupal_get_path_alias("node/".$node_load->nid);
              if(is_numeric($path)){
                $path = "/knowledge/".$path;
              }
              $knowledge[$index]['path'] = $path;
              $index++;
            }
          }
        }
        else if(count($problem) != 0 && count($target) != 0){
          // print "<pre>";
          // print_r($node_load);
          // print "</pre>";
          $node_tax_id = array();
          foreach ($node_load->field_knowledge_problem['und'] as $key => $value) {
            $node_tax_id[] = $value['tid'];
          }
          foreach ($node_load->field_knowledge_target['und'] as $key => $value) {
            $node_tax_id[] = $value['tid'];
          }

          // print "<pre>";
          // print_r($node_load->title);
          // print "</pre>";

          // print "<pre>";
          // print_r($node_tax_id);
          // print "</pre>";

          // print "<pre>";
          // print_r($sumtid);
          // print "</pre>";

          $check_true = 0;


          foreach ($sumtid  as $key => $value_sum ) {
           
            if(!in_array($value_sum, $node_tax_id)){
              $check_true = 1;
            }
          }

          if($check_true == 0){
            $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
            $knowledge[$index]['title'] = $node_load->title;
            $knowledge[$index]['picture'] = $image;
            $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
            $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
            $knowledge[$index]['nid'] = $node_load->nid;
            $path = drupal_get_path_alias("node/".$node_load->nid);
              if(is_numeric($path)){
                $path = "/knowledge/".$path;
              }
              $knowledge[$index]['path'] = $path;
            $index++;
          }
        }
        else if(count($problem) == 0 && count($problem) == 0){
         

          $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
          $knowledge[$index]['title'] = $node_load->title;
          $knowledge[$index]['picture'] = $image;
          $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
          $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
          $knowledge[$index]['nid'] = $node_load->nid;
          $path = drupal_get_path_alias("node/".$node_load->nid);
          if(is_numeric($path)){
            $path = "/knowledge/".$path;
          }
          $knowledge[$index]['path'] = $path;
          $index++;
        }
      }
    }


   
    $knowledge_filter = array();
    $final_result_knowledge = array();

    for ($i=0; $i < count($knowledge) ; $i++) { 
      if(!in_array($knowledge[$i]['nid'], $knowledge_filter)){
        $knowledge_filter[] = $knowledge[$i]['nid'];
      }
    }

    $index = 0;
    for ($i=0; $i < count($knowledge_filter) ; $i++) { 
      for ($j=0; $j < count($knowledge) ; $j++) { 
        if($knowledge_filter[$i] == $knowledge[$j]['nid']){
          $final_result_knowledge[$i] = $knowledge[$j];
        }
      }
    }
     // print '<pre>';
     //    print_r($final_result_knowledge);  
     //    print '</pre>';
    return $final_result_knowledge;
        
  }
  function changemakers_get_search_konwledge_result($text,$problem="",$target="",$sort ="DESC",$page){
    if($problem=="All"){
      $problem = "";
    }
    if($target=="All"){
      $target = "";
    }

   
    $sumtid= array();
    if($problem[0] == "" || $problem[0] == "All"){
      $problem = array();
    }
    else{
      foreach ($problem as $key => $value) {
          $sumtid[] = $value;
        }
    }

    if($target[0] == "" || $target[0] == "All"){
      $target = array();
    }
    else{
      foreach ($target as $key => $value) {
           $sumtid[] = $value;
          }
    }

    
          
          

         

    // print "<pre>";
    // print_r($problem);
    // print "</pre>";
    // print "<pre>";
    // print_r($target);
    // print "</pre>";

    // if(!empty($problem)){
    //   $problem_s = " and tid='$problem'";
    // }else{
    //   $problem_s ="";
    // }
    // if(!empty($target)){
    //    $target_s = " and tid='$target'";
    // }else{
    //    $target_s = "";
    // }
    $tid = array();
    $sql_knowledge_tax= "select tid from taxonomy_term_data where name like '%".$text."%'";
    
    $query_db_tax = db_query($sql_knowledge_tax);
    foreach ($query_db_tax as $row){
      $tid[] = $row->tid;
    }

    // if(!empty($problem)){
    //   foreach ($problem as $key => $value) {
    //     if(!in_array($value, $tid)){
    //       $tid[] = $value;
    //     }
        
    //   }
    // }
    // if(!empty($target)){
    //    foreach ($target as $key => $value) {
    //     if(!in_array($value, $tid)){
    //       $tid[] = $value;
    //     }
    //   }
    // }


    $query = db_select('node', 'fm');
    $query->leftjoin('field_data_field_knowledge_problem', 'fi', 'fm.nid = fi.entity_id');
    $query->leftjoin('field_data_field_knowledge_target', 'fx', 'fm.nid = fx.entity_id');
    $query->condition('fm.type', 'knowledge' , 'like');
    $query->condition('fm.status', 1 , '=');
    // $query->fields('fm', array('nid'));
    $query->addField('fm', 'nid', 'entity_id');
    $db_or = db_or();
    if($text){
      $db_or->condition('fm.title', '%'.$text.'%' , 'like');
    }
    if(!empty($tid)){
      $db_or->condition('fi.field_knowledge_problem_tid', $tid, 'in');
    }

    if(!empty($tid)){
      $db_or->condition('fx.field_knowledge_target_tid', $tid, 'in');
    }
    
    
    //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
    // $query->condition('fm.field_project_status_value', 1 ,"=" );
    if(!empty($db_or)){
      $query->condition($db_or);
    }
    $query->condition('fm.status', '1', '=');
    $query->orderBy("fm.created", $sort);
    

    $sql_knowledge = $query->distinct()->execute();


    $nid = array();

    // print "<pre>";
    // print_r($tid);
    // print "</pre>";


    $knowledge = array();
    $index = 0;
    if(!empty($sql_knowledge)){
      $node_knowledge = db_query($sql_knowledge);
      // $data_knowledge = node_load_multiple(array(), array('type' => 'knowledge'));
      // echo "<pre>";
      // print_r($data_knowledge);
      // echo "</pre>";
      foreach ($node_knowledge as $key => $value) {
        $node_load =  node_load($value->entity_id);
        // echo "<pre>";
        // print_r($value);
        // echo "</pre>";
        $problem_tid = array();
        $target_tid = array();
        
        if(count($problem) != 0 && count($target) == 0 ){
          foreach ($node_load->field_knowledge_problem['und'] as $key => $value) {
            $problem_tid[] = $value['tid'];
          }
          // print "<pre>";
          // print_r($problem_tid);
          // print "</pre>";
          foreach ($problem as $key => $value_tax_search) {
            if(in_array($value_tax_search, $problem_tid)){
              $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
              $knowledge[$index]['title'] = $node_load->title;
              $knowledge[$index]['picture'] = $image;
              $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
              $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
              $path = drupal_get_path_alias("node/".$node_load->nid);
              if(is_numeric($path)){
                $path = "/knowledge/".$path;
              }
              $knowledge[$index]['path'] = $path;
              $knowledge[$index]['nid'] = $node_load->nid;
              $index++;
            }
          }
          

        }
        else if(count($target) != 0 && count($problem) == 0){
          foreach ($node_load->field_knowledge_target['und'] as $key => $value) {
            $target_tid[] = $value['tid'];
          }
          foreach ($target as $key => $value_tax_search_target) {
        
            if(in_array($value_tax_search_target, $target_tid)){

          
              $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
              $knowledge[$index]['title'] = $node_load->title;
              $knowledge[$index]['picture'] = $image;
              $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
              $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
              $path = drupal_get_path_alias("node/".$node_load->nid);
              if(is_numeric($path)){
                $path = "/knowledge/".$path;
              }
              $knowledge[$index]['path'] = $path;
              $knowledge[$index]['nid'] = $node_load->nid;
              $index++;
            }
          }
        }
        else if(count($problem) != 0 && count($target) != 0){
          // print "<pre>";
          // print_r($node_load);
          // print "</pre>";
          $node_tax_id = array();
          foreach ($node_load->field_knowledge_problem['und'] as $key => $value) {
            $node_tax_id[] = $value['tid'];
          }
          foreach ($node_load->field_knowledge_target['und'] as $key => $value) {
            $node_tax_id[] = $value['tid'];
          }

          // print "<pre>";
          // print_r($node_load->title);
          // print "</pre>";

          // print "<pre>";
          // print_r($node_tax_id);
          // print "</pre>";

          // print "<pre>";
          // print_r($sumtid);
          // print "</pre>";

          $check_true = 0;


          foreach ($sumtid  as $key => $value_sum ) {
           
            if(!in_array($value_sum, $node_tax_id)){
              $check_true = 1;
            }
          }

          if($check_true == 0){
            $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
            $knowledge[$index]['title'] = $node_load->title;
            $knowledge[$index]['picture'] = $image;
            $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
            $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
            $knowledge[$index]['nid'] = $node_load->nid;
            $path = drupal_get_path_alias("node/".$node_load->nid);
            if(is_numeric($path)){
              $path = "/knowledge/".$path;
            }
            $knowledge[$index]['path'] = $path;
            $index++;
          }
        }
        else if(count($problem) == 0 && count($problem) == 0){
         

          $image = image_style_url("cover-image", $node_load->field_knowledge_image['und'][0]['uri']);
          $knowledge[$index]['title'] = $node_load->title;
          $knowledge[$index]['picture'] = $image;
          $knowledge[$index]['body'] =  $node_load->body['und'][0]['value'];
          $knowledge[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //timeAgo($node_load->field_knowledge_date['und'][0]['value']);
          $knowledge[$index]['nid'] = $node_load->nid;
          $path = drupal_get_path_alias("node/".$node_load->nid);
          if(is_numeric($path)){
            $path = "/knowledge/".$path;
          }
          $knowledge[$index]['path'] = $path;
          $index++;
        }
      }
    }


   
    $knowledge_filter = array();
    $final_result_knowledge = array();

    for ($i=0; $i < count($knowledge) ; $i++) { 
      if(!in_array($knowledge[$i]['nid'], $knowledge_filter)){
        $knowledge_filter[] = $knowledge[$i]['nid'];
      }
    }

    $index = 0;
    for ($i=0; $i < count($knowledge_filter) ; $i++) { 
      for ($j=0; $j < count($knowledge) ; $j++) { 
        if($knowledge_filter[$i] == $knowledge[$j]['nid']){
          $final_result_knowledge[$i] = $knowledge[$j];
        }
      }
    }
     // print '<pre>';
     //    print_r($final_result_knowledge);  
     //    print '</pre>';
    return $final_result_knowledge;
        
  }
  function changemakers_get_search_project($text,$problem="",$target="",$sort="desc"){
    if($problem=="All"){
      $problem = "";
    }
    if($target=="All"){
      $target = "";
    }


    // if(!empty($problem)){
    //   $problem_s = " and tid='$problem'";
    // }else{
    //   $problem_s ="";
    // }
    // if(!empty($target)){
    //    $target_s = " and tid='$target'";
    // }else{
    //    $target_s = "";
    // }
    $sumtid= array();
    if($problem[0] == "" || $problem[0] == "All"){
      $problem = array();
    }
    else{
      foreach ($problem as $key => $value) {
          $sumtid[] = $value;
        }
    }

    if($target[0] == "" || $target[0] == "All"){
      $target = array();
    }
    else{
      foreach ($target as $key => $value) {
           $sumtid[] = $value;
          }
    }

    $sql_project_tax= "select tid from taxonomy_term_data where name like '%".$text."%'";
    
    $query_db_tax = db_query($sql_project_tax);
    // if(empty($problem) and empty($target)):
    // $sql_project_title = "select nid from node where title like '%".$text."%' and type='project' order by nid $sort";
    // $query_db_title = db_query($sql_project_title);
    // endif;
    $tid = array();
    $title_id = array();
    foreach ($query_db_tax as $row){
      $tid[] = $row->tid;
    }
    // $tid[] = $problem; 
    // $tid[] = $target; 

      

    $query = db_select('node', 'fm');
    $query->leftjoin('field_data_field_problem_topic', 'fi', 'fm.nid = fi.entity_id');
    $query->leftjoin('field_data_field_project_target', 'fx', 'fm.nid = fx.entity_id');
    $query->leftjoin('field_data_body', 'fb', 'fm.nid = fb.entity_id');
    // $query->fields('fm', array('nid'));
    $query->addField('fm', 'nid', 'entity_id');
    $db_or = db_or();
    if($text){
      $db_or->condition('fm.title', '%'.$text.'%' , 'like');
      $db_or->condition('fb.body_value', '%'.$text.'%' , 'like');
    }
    if(!empty($tid)){
      $db_or->condition('fi.field_problem_topic_tid', $tid, 'in');
    }

    if(!empty($tid)){
      $db_or->condition('fx.field_project_target_tid', $tid, 'in');
    }

    $query->condition('fm.type', 'project', 'like');
    $query->condition('fm.status', '1', '=');
    
    //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
    // $query->condition('fm.field_project_status_value', 1 ,"=" );
    if(!empty($db_or)){
      $query->condition($db_or);
    }

    $query->orderBy("fm.created", $sort);
    

    $sql_project = $query->distinct()->execute();


    $nid = array();
    // if(!empty($problem) && !empty($target)){
    //   $sql_project= "select k.entity_id from field_data_field_problem_topic as k inner join field_data_field_project_target as t on k.entity_type=t.entity_type where k.field_problem_topic_tid ='$problem' and t.field_project_target_tid='$target' group by k.entity_id order by k.entity_id $sort";
    // }else if(!empty($problem)) {
    //   $sql_project= "select k.entity_id from field_data_field_problem_topic as k where k.field_problem_topic_tid ='$problem'  group by k.entity_id order by k.entity_id $sort";
    // }else if(!empty($target)) {
    //   $sql_project= "select entity_id from field_data_field_project_target  where field_project_target_tid ='$target' group by entity_id order by entity_id $sort";
    // }

    $knowledge = array();
    $index = 0;
    if(!empty($sql_project)){
      $node_project = db_query($sql_project);
     // $data_knowledge = node_load_multiple(array(), array('type' => 'knowledge'));
      // echo "<pre>";
      // print_r($data_knowledge);
      // echo "</pre>";
      foreach ($node_project as $key => $value) {
        $problem_tid = array();
        $target_tid = array();   
        //      echo "<pre>";
        // print_r($value->entity_id);
        // echo "</pre>";
        if($index < 4){
          $node_load =  node_load($value->entity_id);
          if(count($problem) != 0 and count($target) != 0){
            $get_tax_project = array();
            foreach ($node_load->field_project_target['und'] as $key => $value) {
              $get_tax_project[] = $value['tid'];
            }
            foreach ($node_load->field_problem_topic['und'] as $key => $value) {
              $get_tax_project[] = $value['tid'];
            }
            $check_true = 0;
            foreach ($sumtid as $key => $value) {
              if (!in_array($value, $get_tax_project)) {
                $check_true = 1;
              }
            }
            if($check_true == 0){
              $user_data = user_load($node_load->uid);
              if($node_load->field_project_image['und'][0]['filename']){
                $image = image_style_url("cover-image", $node_load->field_project_image['und'][0]['uri']);
              }else{
                $image = "/sites/all/themes/changemakers/images/project1.jpg";
              }
              
              $project[$index]['title'] = $node_load->title;
              $project[$index]['picture'] = $image;
              $project[$index]['user'] = $user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
              $project[$index]['username'] = $user_data->name;
              $project[$index]['nid'] = $node_load->nid;
              $project[$index]['body'] =  $node_load->body['und'][0]['value'];
              $project[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //node_loadtimeAgo($node_load->field_project_date['und'][0]['value']);
              $index++;
            }
          }else if(count($problem) == 0 and count($target) != 0){
            foreach ($node_load->field_project_target['und'] as $key => $value) {
              $target_tid[] = $value['tid'];
            }
            foreach ($target as $key => $value_t) {
    
              if(in_array($value_t, $target_tid)){
                $user_data = user_load($node_load->uid);
                if($node_load->field_project_image['und'][0]['filename']){
                  $image = image_style_url("cover-image", $node_load->field_project_image['und'][0]['uri']);
                }else{
                  $image = "/sites/all/themes/changemakers/images/project1.jpg";
                }
                $project[$index]['title'] = $node_load->title;
                $project[$index]['picture'] = $image;
                $project[$index]['user'] = $user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
                $project[$index]['username'] = $user_data->name;
                $project[$index]['nid'] = $node_load->nid;
                $project[$index]['body'] =  $node_load->body['und'][0]['value'];
                $project[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //node_loadtimeAgo($node_load->field_project_date['und'][0]['value']);
                $index++;

              }
            }

          }else if(count($problem) != 0 and count($target) == 0){
            foreach ($node_load->field_problem_topic['und'] as $key => $value) {
              $problem_tid[] = $value['tid'];
            }
            foreach ($problem as $key => $value_p) {
        
              if(in_array($value_p, $problem_tid)){
                $user_data = user_load($node_load->uid);
                if($node_load->field_project_image['und'][0]['filename']){
                  $image = image_style_url("cover-image", $node_load->field_project_image['und'][0]['uri']);
                }else{
                  $image = "/sites/all/themes/changemakers/images/project1.jpg";
                }
                $project[$index]['title'] = $node_load->title;
                $project[$index]['picture'] = $image;
                $project[$index]['user'] = $user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
                $project[$index]['username'] = $user_data->name;
                $project[$index]['nid'] = $node_load->nid;
                $project[$index]['body'] =  $node_load->body['und'][0]['value'];
                $project[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //node_loadtimeAgo($node_load->field_project_date['und'][0]['value']);
                $index++;

              }
            }

          }else if(count($problem) == 0 and count($target) == 0){
            $user_data = user_load($node_load->uid);
            if($node_load->field_project_image['und'][0]['filename']){
              $image = image_style_url("cover-image", $node_load->field_project_image['und'][0]['uri']);
            }else{
              $image = "/sites/all/themes/changemakers/images/project1.jpg";
            }
            $project[$index]['title'] = $node_load->title;
            $project[$index]['picture'] = $image;
            $project[$index]['user'] = $user_data->field_profile_firstname['und'][0]['value']." ".$user_data->field_profile_lastname['und'][0]['value'];
            $project[$index]['username'] = $user_data->name;
            $project[$index]['nid'] = $node_load->nid;
            $project[$index]['body'] =  $node_load->body['und'][0]['value'];
            $project[$index]['date'] =  timeAgo(date("y-m-d H:i:s ",$node_load->created)); //node_loadtimeAgo($node_load->field_project_date['und'][0]['value']);
            $index++;
          }
        }
        
      }
    }
   
    return $project;
        
  }
  function changemakers_get_search_result_news_events($text,$problem="",$target="",$sort ="DESC"){

    $news = changemakers_get_search_news($text,$problem,$target,$sort);
    $event = changemakers_get_search_event($text,$problem,$target,$sort);

    // print "<pre>";
    // print_r($target_id);
    // print "</pre>";

    $news_event = array();
    foreach ($news as $key => $value) {
      $news_event[] = $value;
    }

    foreach ($event as $key => $value) {
      $news_event[] = $value;
    }

    return $news_event;


  }

  function changemakers_get_search_news($text,$problem="",$target="",$sort ="DESC"){
    if($problem=="All"){
      $problem = array();
    }
    if($target=="All"){
      $target = array();
    }

    $sumtid= array();
    if($problem[0] == "" || $problem[0] == "All"){
      $problem = array();
    }
    else{
      foreach ($problem as $key => $value) {
          $sumtid[] = $value;
        }
    }

    if($target[0] == "" || $target[0] == "All"){
      $target = array();
    }
    else{
      foreach ($target as $key => $value) {
           $sumtid[] = $value;
          }
    }

    $sql_news_tax= "select tid from taxonomy_term_data where name like '%".$text."%'";
    $query_db_tax = db_query($sql_news_tax);

    $tid = array();
    $title_id = array();
    foreach ($query_db_tax as $row){
      $tid[] = $row->tid;
    }

    // $sql_news_title = "select nid from node where title like '%".$text."%' and type='news' order by nid $sort";
    // $query_db_title = db_query($sql_news_title);
    $query = db_select('node', 'fm');
    $query->leftjoin('field_data_field_problem_interest', 'fi', 'fm.nid = fi.entity_id');
    $query->leftjoin('field_data_field_target_interest', 'fx', 'fm.nid = fx.entity_id');
    // $query->fields('fm', array('nid'));
    $query->addField('fm', 'nid', 'entity_id');
    $db_or = db_or();
    if($text){
      $db_or->condition('fm.title', '%'.$text.'%' , 'like');
    }
    if(!empty($tid)){
      $db_or->condition('fi.field_problem_interest_tid', $tid, 'in');
    }

    if(!empty($tid)){
      $db_or->condition('fx.field_target_interest_tid', $tid, 'in');
    }

    $query->condition('fm.type', 'news', 'like');
    $query->condition('fm.status', '1', '=');
    
    //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
    // $query->condition('fm.field_project_status_value', 1 ,"=" );
    if(!empty($db_or)){
      $query->condition($db_or);
    }

    $query->orderBy("fm.created", $sort);
    

    $sql_news = $query->distinct()->execute();
    // $node_news = db_query($sql_news);
    // foreach ($node_news as $key => $value) {
    //   print '<pre>';
    // print_r($sumtid);  
    // print '</pre>';
    //}


    $news = array();
    $index = 0;
    if(!empty($sql_news)){
      $node_news = db_query($sql_news);
      // $data_knowledge = node_load_multiple(array(), array('type' => 'knowledge'));
      // echo "<pre>";
      // print_r($data_knowledge);
      // echo "</pre>";
      foreach ($node_news as $key => $value) {
          $node_load =  node_load($value->entity_id);
          //      echo "<pre>";
          // print_r($node_load);
          // echo "</pre>";
          //      echo "<pre>";
          // print_r($node_load);
          // echo "</pre>";

        if(count($problem) != 0 and count($target) != 0){
          $tax_event = array();
          foreach ($node_load->field_target_interest['und'] as $key => $value) {
            $tax_event[] = $value['tid'];
          }
          foreach ($node_load->field_problem_interest['und'] as $key => $value) {
            $tax_event[] = $value['tid'];
          }
          $check_true = 0;
          foreach ($sumtid as $key => $value) {
            if (!in_array($value, $tax_event)) {
              $check_true = 1;
            }
          }
          // echo "<pre>";
          // print_r($sumtid);
          // echo "</pre>";

          // echo "<pre>";
          // print_r($tax_event);
          // echo "</pre>";

          if($check_true == 0){
            if($node_load->field_picture['und'][0]['filename']){
               $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
            }else{
               $image = "/sites/all/themes/changemakers/images/news_default.jpg";
            }
           
            $news[$index]['title'] = $node_load->title;
            $news[$index]['type'] = "News";
            $news[$index]['picture'] = $image;
            $news[$index]['body'] = $node_load->body['und'][0]['value'];
            $news[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value']);
            $news[$index]['nid'] = $node_load->nid;
            $news[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
            $index++;
          }
      
        }else if(count($problem) != 0 and count($target) == 0){
          foreach ($node_load->field_problem_interest['und'] as $key => $value) {
            $problem_tid[] = $value['tid'];
          }
          foreach ($sumtid as $key => $value_p) {
           
            if(in_array($value_p, $problem_tid)){
              if($node_load->field_picture['und'][0]['filename']){
                 $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
              }else{
                 $image = "/sites/all/themes/changemakers/images/news_default.jpg";
              }
              $news[$index]['title'] = $node_load->title;
              $news[$index]['type'] = "News";
              $news[$index]['picture'] = $image;
              $news[$index]['body'] = $node_load->body['und'][0]['value'];
              $news[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value']);
              $news[$index]['nid'] = $node_load->nid;
              $news[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
              $index++;
            }
           # code...
          }

        }else if(count($problem) == 0 and count($target) != 0){
          foreach ($node_load->field_target_interest['und'] as $key => $value) {
            $target_tid[] = $value['tid'];
          }
          foreach ($sumtid as $key => $value_t) {
          
            if(in_array($value_t, $target_tid)){
              if($node_load->field_picture['und'][0]['filename']){
                 $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
              }else{
                 $image = "/sites/all/themes/changemakers/images/news_default.jpg";
              }
              $news[$index]['title'] = $node_load->title;
              $news[$index]['type'] = "News";
              $news[$index]['picture'] = $image;
              $news[$index]['body'] = $node_load->body['und'][0]['value'];
              $news[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value']);
              $news[$index]['nid'] = $node_load->nid;
              $news[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
              $index++;
            }
              # code...
          }

        }else if(count($problem) == 0 and count($target) == 0){
          if($node_load->field_picture['und'][0]['filename']){
             $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
          }else{
             $image = "/sites/all/themes/changemakers/images/news_default.jpg";
          }
          $news[$index]['title'] = $node_load->title;
          $news[$index]['type'] = "News";
          $news[$index]['picture'] = $image;
          $news[$index]['body'] = $node_load->body['und'][0]['value'];
          $news[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value']);
          $news[$index]['nid'] = $node_load->nid;
          $news[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
          $index++;

        }
      }
    }

    // print "<pre>";
    // print_r($news);
    // print "</pre>";

          

    return $news;
        
  }
  function changemakers_get_search_event($text,$problem="",$target="",$sort ="DESC"){
    if($problem=="All"){
      $problem = "";
    }
    if($target=="All"){
      $target = "";
    }

    $sumtid= array();
    if($problem[0] == "" || $problem[0] == "All"){
      $problem = array();
    }
    else{
      foreach ($problem as $key => $value) {
          $sumtid[] = $value;
        }
    }

    if($target[0] == "" || $target[0] == "All"){
      $target = array();
    }
    else{
      foreach ($target as $key => $value) {
           $sumtid[] = $value;
          }
    }

    $sql_event_tax= "select tid from taxonomy_term_data where name like '%".$text."%'";
    
    $query_db_tax = db_query($sql_event_tax);
    $tid = array();
    $title_id = array();
    foreach ($query_db_tax as $row){
      $tid[] = $row->tid;
    }
    // $tid[] = $problem; 
    // $tid[] = $target; 
     //print_r($tid);

    //if(empty($problem) && empty($target)){
    // $sql_event_title = "select nid from node where title like '%".$text."%' and type='event' order by nid $sort";
    // $query_db_title = db_query($sql_event_title);
    $query = db_select('node', 'fm');
    $query->leftjoin('field_data_field_problem_interest', 'fi', 'fm.nid = fi.entity_id');
    $query->leftjoin('field_data_field_target_interest', 'fx', 'fm.nid = fx.entity_id');
    // $query->fields('fm', array('nid'));
    $query->addField('fm', 'nid', 'entity_id');
    $db_or = db_or();
    if($text){
      $db_or->condition('fm.title', '%'.$text.'%' , 'like');
    }
    if(!empty($tid)){
      $db_or->condition('fi.field_problem_interest_tid', $tid, 'in');
    }

    if(!empty($tid)){
      $db_or->condition('fx.field_target_interest_tid', $tid, 'in');
    }

    $query->condition('fm.type', 'event', 'like');
    $query->condition('fm.status', '1', '=');
    
    //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
    // $query->condition('fm.field_project_status_value', 1 ,"=" );
    if(!empty($db_or)){
      $query->condition($db_or);
    }

    $query->orderBy("fm.created", $sort);
    

    $sql_event = $query->distinct()->execute();
    //}
    //print_r($query_db_title);
   
   
    

    // $nid = array();
    
    
    // $news = array();
    // $index = 0;
    // if(!empty($problem) && !empty($target)){
    //   $sql_event= "select k.entity_id from field_data_field_problem_interest as k inner join field_data_field_target_interest as t on k.entity_type=t.entity_type where k.field_problem_interest_tid ='$problem' and t.field_target_interest_tid='$target' and k.bundle='event' group by k.entity_id order by k.entity_id $sort";
    // }else if(!empty($problem)) {
    //   $sql_event= "select k.entity_id from field_data_field_problem_interest as k where k.field_problem_interest_tid ='$problem' and k.bundle='event'  group by k.entity_id order by k.entity_id $sort";
    // }else if(!empty($target)) {
    //   $sql_event= "select entity_id from field_data_field_target_interest  where field_target_interest_tid ='$target' and bundle='event' group by entity_id order by entity_id $sort";
    // }
    //echo $sql_event;

    $event = array();
    $index = 0;
    if(!empty($sql_event)){
      $node_event = db_query($sql_event);
      // $data_knowledge = node_load_multiple(array(), array('type' => 'knowledge'));
      // echo "<pre>";
      // print_r($data_knowledge);
      // echo "</pre>";
      foreach ($node_event as $key => $value) {
        $node_load =  node_load($value->entity_id);
        //      echo "<pre>";
        // print_r($node_load);
        // echo "</pre>";

        if(count($problem) != 0 and count($target) != 0){
          $tax_event = array();
          foreach ($node_load->field_target_interest['und'] as $key => $value) {
            $tax_event[] = $value['tid'];
          }
          foreach ($node_load->field_problem_interest['und'] as $key => $value) {
            $tax_event[] = $value['tid'];
          }
          $check_true = 0;
          foreach ($sumtid as $key => $value) {
            if(!in_array($value, $tax_event)){
              $check_true = 1;
            }
          }
          if($check_true == 0){
            if($node_load->field_picture['und'][0]['filename']){
              $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
            }
            else{
              $image = "/sites/all/themes/changemakers/images/event_default.jpg";
            }
            $event[$index]['title'] = $node_load->title;
            $event[$index]['type'] = "Event";
            $event[$index]['picture'] = $image;
            $event[$index]['body'] = $node_load->body['und'][0]['value'];
            $event[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value2']);
            $event[$index]['nid'] = $node_load->nid;
            $event[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
            $index++;
          }

        }else if(count($problem) != 0 and count($target) == 0){

          foreach ($node_load->field_problem_interest['und'] as $key => $value) {
            $problem_tid[] = $value['tid'];
          }

          foreach ($sumtid as $key => $value_p) {
           
            if(in_array($value_p, $problem_tid)){
              if($node_load->field_picture['und'][0]['filename']){
                $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
              }
              else{
                $image = "/sites/all/themes/changemakers/images/event_default.jpg";
              }
              $event[$index]['title'] = $node_load->title;
              $event[$index]['type'] = "Event";
              $event[$index]['picture'] = $image;
              $event[$index]['body'] = $node_load->body['und'][0]['value'];
              $event[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value2']);
              $event[$index]['nid'] = $node_load->nid;
              $event[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
              $index++;
            }
             # code...
          }

        }else if(count($problem) == 0 and count($target) != 0){
          foreach ($node_load->field_target_interest['und'] as $key => $value) {
            $target_tid[] = $value['tid'];
          }
          foreach ($sumtid as $key => $value_t) {
         
            if(in_array($value_t, $target_tid)){
              if($node_load->field_picture['und'][0]['filename']){
                $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
              }
              else{
                $image = "/sites/all/themes/changemakers/images/event_default.jpg";
              }
              $event[$index]['title'] = $node_load->title;
              $event[$index]['type'] = "Event";
              $event[$index]['picture'] = $image;
              $event[$index]['body'] = $node_load->body['und'][0]['value'];
              $event[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value2']);
              $event[$index]['nid'] = $node_load->nid;
              $event[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
              $index++;
            }
             # code...
          }

        }else if(count($problem) == 0 and count($target) == 0){


          if($node_load->field_picture['und'][0]['filename']){
            $image = image_style_url("cover-image", $node_load->field_picture['und'][0]['uri']);
          }
          else{
            $image = "/sites/all/themes/changemakers/images/event_default.jpg";
          }
          $event[$index]['title'] = $node_load->title;
          $event[$index]['type'] = "Event";
          $event[$index]['picture'] = $image;
          $event[$index]['body'] = $node_load->body['und'][0]['value'];
          $event[$index]['date'] = changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($node_load->field_news_event_date['und'][0]['value2']);
          $event[$index]['nid'] = $node_load->nid;
          $event[$index]['path'] = drupal_get_path_alias("node/".$node_load->nid);
          $index++;
          

        }
        
      }
    }



    return $event;
        
  }

  function changemakers_get_search_user($text,$problem,$target,$sort="desc"){
    if($problem=="All"){
      $problem = "";
    }
    if($target=="All"){
      $target = "";
    }

    if(!empty($problem)){
      $problem_s = " and tid='$problem'";
    }else{
      $problem_s ="";
    }
    if(!empty($target)){
       $target_s = " and tid='$target'";
    }else{
       $target_s = "";
    }

    $sql_event_tax= "select tid from taxonomy_term_data where name like '%".$text."%'";
    //$sql_event_title = "select nid from node where title like '%".$text."%' and type='event'";
    $query_db_tax = db_query($sql_event_tax);
    $query = new EntityFieldQuery();
    $results = $query->entityCondition('entity_type', 'user')
      ->propertyCondition('status', 1)
      ->execute();
    $uids = array();
    foreach ($results['user'] as $uid => $user) {
      $uids[] = $uid;
    }
    
    //$query_db_title = db_query($sql_event_title);
    $tid = array();
    $title_id = array();
    foreach ($query_db_tax as $row){
     $tid[] = $row->tid;
    }

    // print '<pre>';
    // print_r($tid);  
    // print '</pre>'
    if(count($problem) != 0){
      foreach ($problem as $key => $value) {
       $tid[] = $value; 
      }
    }

    if(count($target) != 0){
      foreach ($target as $key => $value) {
       $tid[] = $value; 
      }
    }

    // print '<pre>';
    // print_r($problem);  
    // print '</pre>';

    // print '<pre>';
    // print_r($target);  
    // print '</pre>';

    $users = array();
    $index = 0;
    

      $query = db_select('users', 'fm');
      if(count($problem) != 0){
        $query->join('field_data_field_profile_problem_interest', 'fi', 'fm.uid = fi.entity_id');
      }

      if(count($target) != 0){
        $query->join('field_data_field_profile_target_group', 'fx', 'fm.uid = fx.entity_id');
      }
      $query->join('field_data_field_profile_firstname', 'ff', 'fm.uid = ff.entity_id');
      $query->join('field_data_field_profile_lastname', 'fn', 'fm.uid = fn.entity_id');
      
      // $query->fields('fm', array('nid'));
      $query->addField('fm', 'uid', 'entity_id');
      $db_or = db_or();
      $db_or->condition('fm.name', "%".$text."%", 'like');
      $db_or->condition('ff.field_profile_firstname_value', "%".$text."%", 'like');
      $db_or->condition('fn.field_profile_lastname_value', "%".$text."%", 'like');

      if(count($problem) != 0){
        $query->condition('fi.field_profile_problem_interest_tid', $tid, 'in');
      }

      if(count($target) != 0){
         $query->condition('fx.field_profile_target_group_tid', $tid, 'in');
      }

      
      // //$query->condition('fm.field_event_skill_interest_tid', $problem ,"in" );
      // // $query->condition('fm.field_project_status_value', 1 ,"=" );
      if(!empty($db_or)){
        $query->condition($db_or);
      }

      //$query->orderBy("fm.created", $sort);
      // $query->range(0,4);
      

      $sql_user = $query->distinct()->execute();


    $event = array();
    $index = 0;
    if(!empty($sql_user)){
      $node_user = db_query($sql_user);
      // $data_knowledge = node_load_multiple(array(), array('type' => 'knowledge'));
      // echo "<pre>";
      // print_r($node_user);
      // echo "</pre>";
      foreach ($node_user as $key => $value) {
          
          $user_load =  user_load($value->entity_id);

          // echo "<pre>";
          // print_r($value);
          // echo "</pre>";

          $users[$index]['name'] =  changemakers_get_contact($user_load->uid); //$user_load->field_profile_firstname['und'][0]['value']." ".$user_load->field_profile_lastname['und'][0]['value'];
          if($user_load->picture->filename){
            $image = image_style_url("cover-image", $user_load->picture->uri);
            $users[$index]['picture'] = $image;
          }
          else{
            $users[$index]['picture'] = '/sites/all/themes/changemakers/images/soc-userdisplay-default.jpg';
          }
        
          $tax_pro = array();
          $count_p = 0;
          foreach ($tid as $key => $value_2) {
            
            if(!empty($value_2) && $value_2 != "All"){
              
              if(taxonomy_term_load($value_2)->name !="อื่นๆ (ระบุเป้าหมาย)"){
                $tax_pro[]  = taxonomy_term_load($value_2)->name;
              }
            }  
          }
          if(count($tax_pro) == 0){
            if(!empty($user_load->field_profile_problem_interest['und'][0]['tid'])){
              $users[$index]['interest'] = taxonomy_term_load($user_load->field_profile_problem_interest['und'][0]['tid'])->name;
            }else if(!empty($user_load->field_profile_target_group['und'][0]['tid'])){
              $users[$index]['interest'] = taxonomy_term_load($user_load->field_profile_target_group['und'][0]['tid'])->name;
            }else if(!empty($user_load->field_profile_skill_interest['und'][0]['tid'])){
              $users[$index]['interest'] = taxonomy_term_load($user_load->field_profile_skill_interest['und'][0]['tid'])->name;
            }
            //$users[$index]['interest'] = taxonomy_term_load($user_load->field_profile_problem_interest['und'][0]['tid'])->name." ".taxonomy_term_load($user_load->field_profile_target_group['und'][0][tid])->name;
          }
          else if(count($tax_pro) > 0){
            $users[$index]['interest'] = implode(",", $tax_pro);
          }
          else{
            $users[$index]['interest'] = $tax_pro;
          }

              
          $users[$index]['project'] = chanagemakers_search_project($user_load->uid, $tid);
          $users[$index]['uid'] = $user_load->uid;
          $index++;


        
      }
    }
    /*else:
    $accounts = user_load_multiple($uids);
    foreach ($accounts as $key => $value) {
        //     print '<pre>';
        // print_r($value);  
        // print '</pre>';
      if($value->field_profile_problem_interest){
        foreach ($value->field_profile_problem_interest['und'] as $key => $value2) {
          for ($i=0; $i < count($tid) ; $i++) {
            if($value2['tid'] == $tid[$i] && $tid[$i] != ""){
              
              $users[$index]['name'] = $value->field_profile_firstname['und'][0]['value']." ".$value->field_profile_lastname['und'][0]['value'];
              if($value->picture->filename){

                $users[$index]['picture'] = "/sites/default/files/pictures/".$value->picture->filename;
              }
              else{
                $users[$index]['picture'] = "/sites/default/files/pictures/picture-86-1463556854.png";
              }
              
              $users[$index]['interest'] = $text;
              $users[$index]['project'] = chanagemakers_search_project($value->uid, $tid);
              // $users[$index]['date'] = changemakers_get_date_thai_short($value->field_news_event_date['und'][0]['value'])." - ".changemakers_get_date_thai_short($value->field_news_event_date['und'][0]['value2']);
              $users[$index]['uid'] = $value->uid;
              $index++;
            }
          }

        }
      }

    }
    endif;
    

    $users_filter = array();
    $final_result_users = array();

    for ($i=0; $i < count($users) ; $i++) { 
      if(!in_array($users[$i]['uid'], $users_filter)){
        $users_filter[] = $users[$i]['uid'];
      }
    }

    $index = 0;
    for ($i=0; $i < count($users_filter) ; $i++) { 
      for ($j=0; $j < count($users) ; $j++) { 
        if($users_filter[$i] == $users[$j]['uid']){
          $final_result_users[$i] = $users[$j];
        }
      }
    }

    ; */
      // echo "<pre>";
      // print_r($users);
      // echo "</pre>";


    return $users;
        
  }
  function chanagemakers_search_project($uid,$tid)
  {
    $sql= "select * from node where uid='".$uid."' and type='project'";
    $query_db = db_query($sql);
    $project = array();
    $i = 0;
    $user_create_project = array();
    foreach ($query_db as $row){
      $data = node_load($row->nid);

      if($data->field_problem_topic['und']){
        foreach ($data->field_problem_topic['und'] as $key => $value) {
          for ($i=0; $i < count($tid) ; $i++) {
              if($value['tid'] == $tid[$i]){ 
                $project[0]['title'] = $data->title;
                $project[0]['nid'] = $data->nid;
              }
          }
        }

      }
      
      // $user_create_project[$i]['title'] = $data->title;
      // $user_create_project[$i]['nid'] = $row->nid;
      // $i++;
    }
    // print '<pre>';
    // print_r($project); 
    // print '</pre>';
    return $project;
  }
#end general search  
#general function using in website

  function changemakers_get_date_thai_block($date){
    $get_array_date = explode(" ", $date);
    return changemakers_get_date_start_and_end($get_array_date[0], $get_array_date[3]);

     // print '<pre>';
     // print_r($get_array_date); 
     // print '</pre>';
  }
  function changemakers_get_date_thai_block_knowledge($date){
    $get_array_date = explode(" ", $date);
    return changemakers_get_date_start_and_end($get_array_date[0], $get_array_date[3]);

     // print '<pre>';
     // print_r($get_array_date); 
     // print '</pre>';
  }

  function changemakers_get_date_start_and_end($date1, $date2){
    $result = array();
    $time1 = explode(" ", $date1);
    $date_time1 =$time1[1];
    $time1_exp = explode(":", $date_time1);
    $time2 = explode(" ", $date2);
    $date_time2 =$time2[1];
    $time2_exp = explode(":", $date_time2);

    if(isset($time1_exp[1]) && isset($time2_exp[1]) && isset($time1_exp[0]) && isset($time2_exp[0])){
      $hour1 =$time1_exp[0]!="00"?$time1_exp[0]:"00";
      $min1 =$time1_exp[1]!="00"?$time1_exp[1]:"00";
      $hour2 =$time2_exp[0]!="00"?$time2_exp[0]:"00";
      $min2 =$time2_exp[1]!="00"?$time2_exp[1]:"00";
      $result[0] = changemakers_get_date_thai_short($date1)." ".$hour1.":".$min1;
      $result[1] = changemakers_get_date_thai_short($date2)." ".$hour2.":".$min2;
    }
    else
    {
      $hour1 =(isset($time1_exp[0])&&$time1_exp[0]!="00")?$time1_exp[0]:"00";
      $min1 =(isset($time1_exp[1])&&$time1_exp[1]!="00")?$time1_exp[1]:"00";
      $hour2 =(isset($time2_exp[0])&&$time2_exp[0]!="00")?$time2_exp[0]:"00";
      $min2 =(isset($time2_exp[1])&&$time2_exp[1]!="00")?$time2_exp[1]:"00";
      $result[0] = changemakers_get_date_thai_short($date1)." ".$hour1.":".$min1;
      $result[1] = changemakers_get_date_thai_short($date2)." ".$hour2.":".$min2;
    }
    if(!isset($date_time1)){
      $result[0] = changemakers_get_date_thai_short($date1)." 00:00";
    }elseif(!isset($date_time2)){
      $result[1] = changemakers_get_date_thai_short($date2)." 00:00";
    }
    
    return $result;
  }

  function changemakers_get_date_start_date($date1){
    $result = array();
    $time1 = explode(" ", $date1);
    $time1_exp = explode(":", $time1[1]);
    if(isset($time1_exp[1]))
    {
      $result[0] = changemakers_get_date_thai_short($date1)." ".$time1_exp[0].":".$time1_exp[1];
    }
    else
    {
      $result[0] = changemakers_get_date_thai_short($date1)." ".$time1_exp[0];
    }
    
    return $result;
  }

  function changemakers_get_date_start_date_campaign($date1){
    $result = array();
    $time = explode("to ", $date1);

    $time1 = explode(" ", $time[0]);
    //$time1_exp = explode(":", $time1[1]);
    $time2 = explode(" ", $time[1]);
    //$time2_exp = explode(":", $time2[1]);
    if(isset($time1[0]) && isset($time2[0]))
    {
      $result[0] = changemakers_get_date_thai_short($time1[0])." ".$time1[1];//.":".$time1_exp[1];
      $result[1] = changemakers_get_date_thai_short($time2[0])." ".$time2[1];//.":".$time2_exp[1];
    }
    else
    {
      $result[0] = changemakers_get_date_thai_short($time1[0])." ".$time1[1];
      $result[1] = changemakers_get_date_thai_short($time2[0])." ".$time2[1];
    }
    
    return $result;
  }
  function changemakers_get_date_start_date_campaign_list($date1){
    $result = array();
    $time = explode("to ", $date1);

    $time1 = explode(" ", $time[0]);
    //$time1_exp = explode(":", $time1[1]);
    $time2 = explode(" ", $time[1]);
    //$time2_exp = explode(":", $time2[1]);
    if(isset($time1[0]) && isset($time2[0]))
    {
      $result[0] = changemakers_get_date_thai_short($time1[0])." ";//.":".$time1_exp[1];
      $result[1] = changemakers_get_date_thai_short($time2[0])." ";//.":".$time2_exp[1];
    }
    else
    {
      $result[0] = changemakers_get_date_thai_short($time1[0])." ";
      $result[1] = changemakers_get_date_thai_short($time2[0])." ";
    }
    
    return $result;
  }

  function changemakers_get_date_thai_short($date)
  {
    $timestamps = new DateTime($date);
    $timestamps->format('Y-m-d H:i:s');    // MySQL datetime format
    $timestamps->getTimestamp(); 

    return changemakers_format_date_thai_short($timestamps->getTimestamp());
  }

  function changemakers_get_date_min($date)
  {
    $timestamps = new DateTime($date);
    $timestamps->format('Y-m-d H:i:s');    // MySQL datetime format
    $timestamps->getTimestamp(); 
    return timeAgo($timestamps->getTimestamp());
  }

  function changemakers_get_date_thai($date)
  {
    $timestamps = new DateTime($date);
    $timestamps->format('Y-m-d H:i:s');    // MySQL datetime format
    $timestamps->getTimestamp(); 
    return changemakers_format_date_thai($timestamps->getTimestamp());
  }

  function changemakers_format_date_thai($timestamp){
    $d = date('d',$timestamp);
    $m = intval(date('m',$timestamp));
    $y = date('Y',$timestamp)+543;
    $month = array('','มกราคม','กุมภาพันธ์','มีนาคม','เมษายน','พฤษภาคม','มิถุนายน','กรกฎาคม','สิงหาคม','กันยายน','ตุลาคม','พฤศจิกายน','ธันวาคม');

    return $d." ".$month[$m]." ".$y;
  }

  function changemakers_format_date_thai_short($timestamp){
    $d = date('d',$timestamp);
    $m = intval(date('m',$timestamp));
    $y = date('Y',$timestamp)+543;
    $month = array('','ม.ค.','ก.พ.','มี.ค.','เม.ย.','พ.ค.','มิ.ย.','ก.ค.','ส.ค.','ก.ย.','ต.ค.','พ.ย.','ธ.ค.');


    return $d." ".$month[$m]." ".$y;
  }

  function changemakers_format_date_thai_profile($date){
    list($birthdate_y,$birthdate_m,$birthdate_d)=explode("-", $date->format('Y-m-d'));
    // $dcreateAt = date('d',$date);
    // $m = intval(date('m',$date));
    // $ycreateAt = date('Y',$date)+543;
    $monthcreateAt = array('','มกราคม','กุมภาพันธ์','มีนาคม','เมษายน','พฤษภาคม','มิถุนายน','กรกฎาคม','สิงหาคม','กันยายน','ตุลาคม','พฤศจิกายน','ธันวาคม');

    return $birthdate_d." ".$monthcreateAt[intval($birthdate_m)]. " ".($birthdate_y+543);
  }
  function timeAgo($timestamp){
    $datetime1=new DateTime("now");
    $datetime2=date_create($timestamp);
    if(!empty($timestamp)){
      $diff=date_diff($datetime1, $datetime2);
      $timemsg='';
      if($diff->y > 0){
          $timemsg = $diff->y .' year'. ($diff->y > 1?"":'');

      }
      else if($diff->m > 0){
       $timemsg = changemakers_get_date_thai_short($timestamp);
      }
      else if($diff->d > 0){
       $timemsg = $diff->d .' d'. ($diff->d > 1?"":'');
       if($timemsg > 14)
       {
        $timemsg = changemakers_get_date_thai_short($timestamp); //date_format($datetime2,"d-m-Y"); 
       }
       else if($timemsg > 7 && $timemsg < 14)
       {
        $timemsg = "1 w";
       }
      }
      else if($diff->h > 0){
       $timemsg = $diff->h .' h'.($diff->h > 1 ? "":'');
      }
      else if($diff->i > 0){
       $timemsg = $diff->i .' m'. ($diff->i > 1?"":'');
      }
      else if($diff->s > 0){
       $timemsg = $diff->s .' s'. ($diff->s > 1?"":'');
      }
       // print '<pre>';
       // print_r($timestamp); 
       // print '</pre>';

      $timemsg = $timemsg;
    }
      return $timemsg;
  }

  function changemakers_check_user_login(){
    global $user;
    if($user->uid){
      return TRUE;
    }
    else{
      return FALSE;
    }
  }

  function changemakers_getListTaxonomy($vid){
    $result = db_query("select d.tid,d.name,h.parent from taxonomy_term_data as d inner join taxonomy_term_hierarchy as h on d.tid=h.tid  where d.vid='$vid' and h.parent=0 ORDER by d.weight");
    return $result;
  }
  function changemakers_getListSubTaxonomy($parrent){
    $result = db_query("select d.tid,d.name from taxonomy_term_data as d inner join taxonomy_term_hierarchy as h on d.tid=h.tid  where  h.parent='$parrent' ORDER by d.weight");
    return $result;
  }
  function API_changemakers_project_update_view()
  {
    $nid = filter_var($_POST["nid"], FILTER_SANITIZE_NUMBER_INT, FILTER_FLAG_STRIP_HIGH);
    // $page_number = filter_var($_POST["page"], FILTER_SANITIZE_NUMBER_INT, FILTER_FLAG_STRIP_HIGH);
    // $type = $_POST['type'];
    // if(!is_numeric($page_number)){
    //   header('HTTP/1.1 500 Invalid page number!');
    //   exit();
    // }
    //$item_per_page = 5;
    //get current starting point of records
    //$position = ($page_number * $item_per_page);
   echo  get_comment_load_form_project($nid);
  }
  function API_changemakers_comment_load()
  {
    $nid = filter_var($_POST["nid"], FILTER_SANITIZE_NUMBER_INT, FILTER_FLAG_STRIP_HIGH);
    $page_number = filter_var($_POST["page"], FILTER_SANITIZE_NUMBER_INT, FILTER_FLAG_STRIP_HIGH);
    $type = "ALL";//$_POST['type'];
    if(!is_numeric($page_number)){
      header('HTTP/1.1 500 Invalid page number!');
      exit();
    }
    $item_per_page = 5;
    //get current starting point of records
    $position = ($page_number * $item_per_page);
   echo  get_comment_load($nid,$item_per_page,$page_number,$position,$type);
  }
  function API_changemakers_dashboard_comment_load()
  {
    $nid = $_POST["nid"];
    $page_number = filter_var($_POST["page"], FILTER_SANITIZE_NUMBER_INT, FILTER_FLAG_STRIP_HIGH);
    $type = $_POST['type'];
    if(!is_numeric($page_number)){
      header('HTTP/1.1 500 Invalid page number!');
      exit();
    }
    $item_per_page = 5;
    //get current starting point of records
    $position = ($page_number * $item_per_page);
    echo  get_dashboard_comment_load($nid,$item_per_page,$page_number,$position);
  }

  function API_changemakers_dashboard_project_load()
  {
    $page_number = filter_var($_POST["page"], FILTER_SANITIZE_NUMBER_INT, FILTER_FLAG_STRIP_HIGH);
    $status = $_POST["filter_status"];
    $taxo = $_POST["taxo"];

    $item_per_page = 12;
    //get current starting point of records
    $position = ($page_number * $item_per_page);
    //echo "12#";
    echo get_dashboard_project_load($item_per_page,$page_number,$position,$status,$taxo);
  }
  function changemakers_views_query_alter(&$view, &$query)
  {
          // echo "<pre>";
          // print_r($view);
          // echo "</pre>";
    if($view->name=="online_course_view"){
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          // if($condition['field'] == 'field_data_field_for_course.field_for_course_tid'){
          //   echo 123;
          // }
          //echo $_GET['field_for_course_tid'];
          if(empty($_GET['field_for_course_tid'])){
            global $user;
    
          //   	 echo "<pre>";
          // print_r($condition);
          // echo "</pre>";

	              if($condition['field'] == 'field_data_field_for_course.field_for_course_tid'){
		                if(!empty($user->roles[5])){
		                   $condition = array(
		                      'field' => 'field_data_field_for_course.field_for_course_tid',
		                      'value' => 581,
		                      'operator' => '=',
		                    );
		                   $view->exposed_data['field_for_course_tid'] = 581;
		                 }else{
		                   $condition = array(
		                      'field' => 'field_data_field_for_course.field_for_course_tid',
		                      'value' => 580,
		                      'operator' => '=',
		                    );
		                   $view->exposed_data['field_for_course_tid'] = 580;
		                 }
	            	}else{

	            		// if(!empty($_GET['field_course_lession_value'])){
	            		// 	if($_GET['field_course_lession_value']==5 || $_GET['field_course_lession_value']==6 || $_GET['field_course_lession_value']==7 || $_GET['field_course_lession_value']==8 || $_GET['field_course_lession_value']==9 || $_GET['field_course_lession_value']==10){
			            //        $condition = array(
			            //           'field' => 'field_data_field_for_course.field_for_course_tid',
			            //           'value' => 581,
			            //           'operator' => '=',
			            //         );
			            //        $view->exposed_data['field_for_course_tid'] = 581;
			            //      }else{
			            //        $condition = array(
			            //           'field' => 'field_data_field_for_course.field_for_course_tid',
			            //           'value' => 580,
			            //           'operator' => '=',
			            //         );
			            //        $view->exposed_data['field_for_course_tid'] = 580;
			            //      }
	            		// }

	            		
	            		 // if(!empty($user->roles[5])){
		              //      $condition = array(
		              //         'field' => 'field_data_field_for_course.field_for_course_tid',
		              //         'value' => 581,
		              //         'operator' => '=',
		              //       );
		              //      $view->exposed_data['field_for_course_tid'] = 581;
		              //    }else{
		              //      $condition = array(
		              //         'field' => 'field_data_field_for_course.field_for_course_tid',
		              //         'value' => 580,
		              //         'operator' => '=',
		              //       );
		              //      $view->exposed_data['field_for_course_tid'] = 580;
		              //    }
	            	}
            // echo 1;
	            
          }
                 
          // echo "<pre>";
          // print_r($view->exposed_data);
          // echo "</pre>";
        }

      }
    }
    if ($view->name == 'community') {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          //echo $_GET['&field_education_field_university_tid'];
         
        
           
            
          // If this is the part of the query filtering on title, change the
          // condition to filter on node ID.
         
       //     echo "<pre>";
          // print_r($university_id);
          // echo "</pre>";
          //  echo "<pre>";
          // print_r($condition);
          // echo "</pre>";

       //     echo "<pre>";
          // print_r($query->orderby);
          // echo "</pre>";
        }
      }
    }
    
  }
  function changemakers_views_pre_render(&$view)
  {
    if($view->name=="online_course_view"){
      // echo "<pre>";
      //     print_r($view);
      //     echo "</pre>";
    }
         
  }

  function changemakers_node_view($node, $view_mode, $langcode) {
  // $node->content['my_additional_field'] = array(
  //   '#markup' => $additional_field,
  //   '#weight' => 10,
  //   '#theme' => 'mymodule_my_additional_field',
  // );

    if($node->type=="project"){
      // echo $node->id;
      // //$node->share='<div class="addthis_sharing_toolbox"></div>';
      // echo $count_view = $node->field_count_views_project['und'][0]['value'];
      // echo $count_view = $node->field_count_views_project['und'][0]['value']+1;
      // $node->field_count_views_project['und'][0]['value']= $count_view;
      // $result = db_select('field_data_field_count_views_project', 'n')
      //   ->fields('n')
      //   ->condition('entity_id', $node->nid,'=')
      //   ->execute()
      //   ->fetchAssoc();


      // db_update('field_data_field_count_views_project')
      // ->fields(array(
      //   'field_count_views_project_value' =>($result['field_count_views_project_value']++) ,
      // ))
      // ->condition('entity_id', 215)
      // ->execute();

      //echo $result['field_count_views_project_value']++;



     




        // echo "<pre>";
        // print_r($result);
        // echo "</pre>"; 
        // exit();
      }
  }

  function changemakers_mail_alter(&$message) {

   if($message['key']=="register_no_approval_required"):
    global $base_url;
      //    $email = $advisor->mail;
    $strMessage = "สวัสดีค่ะ คุณ".  $message['params']['account']->field_profile_firstname['und'][0]['value']." ".$message['params']['account']->field_profile_lastname['und'][0]['value']."<br><br>";

    $strMessage .= "ขอบคุณที่ลงทะเบียนเข้าเว็บไซต์ www.schoolofchangemakers.com ท่านสามารถอ่านบทความ เรียนเครื่องมือของนักสร้างการเปลี่ยนแปลงด้วยตนเอง ผ่าน บทเรียนออนไลน์ เข้าร่วมกิจกรรม หรือแคมเปญต่างๆ ผ่านหน้าเว็บไซต์ <br><br>";
    $strMessage .= "username: ". $message['params']['account']->name."<br>";
    $strMessage .= "password: รหัสผ่านที่คุณได้ตั้งไว้<br><br>";

    $strMessage .= "โปรดอ่านข้อดีของการ Verify Account เพื่อสิทธิประโยชน์ของสมาชิกทีมงานแนะนำให้ท่านกรอกข้อมูลสมาชิก ทักษะความสนใจให้ครบถ้วน และ Verify Account ด้วยเบอร์มือถือ ได้ในหน้า Dashboard ของท่าน ผ่านทางลิงค์นี้ <a href='$base_url/dashboard'>$base_url/dashboard</a> <br><br>";

    $strMessage .= "School of Changemakers เชื่อว่า การเปลี่ยนแปลงเป็นเรื่องของ ‘คน’ ที่อยากเห็นโลกหรือสังคมที่ดีกว่า ไม่ใช่เรื่องของคนเก่ง คนมีเงิน หรือมีอำนาจ เริ่มต้นจากคนตัวเล็กๆ ทำเรื่องที่ตัวเองสนใจ หากคุณเชื่อเหมือนเรา อยากชวนคุณมาร่วมเริ่มต้นสร้างความเปลี่ยนแปลงร่วมกัน<br><br>";

    $strMessage .= "If it’s not you, who? If it’s not now, when?<br><br>";

    $strMessage .= "ขอบคุณค่ะ<br>";
    $strMessage .= "ทีมงาน School of Changemakers<br>";
      
         
              $strTo = $message['to'];
              $strSubject = $message['subject']; 
          
              $strHeader="From:  ".$message['from']."\r\n".
                          "Reply-To: ".$message['from']."\r\n".
                          "MIME-Version: 1.0\r\n".
                          "Content-Type: text/html; charset=UTF-8";  
            
            
               @mail($strTo,$strSubject,$strMessage,$strHeader);
     // global $base_url;
     // $fully_loaded_user_object = user_save($message['params']['account']);
     // $GLOBALS['user'] = $fully_loaded_user_object;
     //  drupal_set_message(t('Registration successful. You are now logged in.'), 'status');
     //  drupal_goto("$base_url");
     //      exit();
     $message['to']="";
     $message['from']="";
     $message['header']="";
     
    elseif($message['key']=="password_reset"):

    $uid =$message['params']['account']->uid;
    $user = user_load($uid);
    $one_time_login_url =user_pass_reset_url($user);
    //    $email = $advisor->mail;
    $strMessage = "สวัสดีค่ะ คุณ".  $message['params']['account']->field_profile_firstname['und'][0]['value']." ".$message['params']['account']->field_profile_lastname['und'][0]['value']."<br><br>";

    $strMessage .= "คุณสามารถตั้งค่ารหัสผ่านใหม่สำหรับเข้าสู่เว็บไซต์<br>";
    $strMessage .= "<a href='https://www.schoolofchangemakers.com/'>www.schoolofchangemakers.com</a><br>ได้ตามลิงค์ด้านล่างนี้<br><br>";
    $strMessage .= $one_time_login_url."<br><br>";
    $strMessage .= "ขอบคุณค่ะ<br>";
    $strMessage .= "ทีมงาน School of Changemakers<br>";
      
         
              $strTo = $message['to'];
              $strSubject = $message['subject']; 
          
              $strHeader="From:  ".$message['from']."\r\n".
                          "Reply-To: ".$message['from']."\r\n".
                          "MIME-Version: 1.0\r\n".
                          "Content-Type: text/html; charset=UTF-8";  
            
            
               @mail($strTo,$strSubject,$strMessage,$strHeader);
     $message['to']="";
     $message['from']="";
     $message['header']="";
     drupal_set_message("ระบบได้จัดส่งข้อมูลไปยังอีเมลของคุณแล้ว คุณสามารถรับ one-time log in ได้ที่อีเมลของคุณ", $type = 'status', $repeat = false);
    endif;

  }
  
  function changemakers_user_update(&$edit, $account, $category) {
        // echo "<pre>";
        // print_r($account);
        // echo "</pre>"; 
        // echo "<pre>";
        // print_r($edit);
        // echo "</pre>"; 
    if(!empty($edit['original']->roles[10])){
       if(empty($edit['roles'][10])){
        $sql= "select nid from node where type='project' and uid ='".$account->uid."'";
        $query_db = db_query($sql);

        foreach ($query_db as $key => $value) {
          $node_project = node_load($value->nid);
          // print '<pre>';
          // print_r($node_project);
          // print '</pre>';
          if( $node_project->field_verification['und'][0]['value']==3){
            $node_project->field_verification['und'][0]['value'] = 2;
            node_save($node_project);
          }
          
        }
     }
    }
        // exit();

  }
  

function profile_user_other_join_project($uid_other)
{
        $data_join_nid_1 = array();
               $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '1','=')
                    ->condition('data', $uid_other,'=')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_1[] = $record['sid'];         
              }
              if(!empty($data_join_nid_1)):
              $data_join_nid_1= array_unique($data_join_nid_1);
              $data_join_nid_2 = array();
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '3','=')
                    ->condition('data', 1,'=')
                    ->condition('sid', $data_join_nid_1,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_2[] = $record['sid'];         
              }
              $data_join_nid_2= array_unique($data_join_nid_2);
              $data_join_nid = array();
              if(!empty($data_join_nid_2)):
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '2','=')
                    ->condition('sid', $data_join_nid_2,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid[] = $record['data'];         
              }
             
              $results_join = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('nid', $data_join_nid,'in')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results_join->fetchAssoc()) {
                  $data[] = $record['nid'];         
              }
              endif;
              endif;
              return $data;
}
function profile_user_join_project()
{
        global $user;
        $data_join_nid_1 = array();
               $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '1','=')
                    ->condition('data', $user->uid,'=')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_1[] = $record['sid'];         
              }
              if(!empty($data_join_nid_1)):
              $data_join_nid_1= array_unique($data_join_nid_1);
              $data_join_nid_2 = array();
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '3','=')
                    ->condition('data', 1,'=')
                    ->condition('sid', $data_join_nid_1,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid_2[] = $record['sid'];         
              }
              $data_join_nid_2= array_unique($data_join_nid_2);
              $data_join_nid = array();
              if(!empty($data_join_nid_2)):
              $results_userjoin = db_select('webform_submitted_data', 'w')
                    ->fields('w')
                    ->condition('cid', '2','=')
                    ->condition('sid', $data_join_nid_2,'in')
                    ->condition('nid', 2,'=')
                    ->execute();
              while($record = $results_userjoin->fetchAssoc()) {
                  $data_join_nid[] = $record['data'];         
              }
             
              $results_join = db_select('node', 'n')
                    ->fields('n', array('nid','title'))
                    ->condition('type', 'project','=')
                    ->condition('nid', $data_join_nid,'in')
                    ->condition('status', 0,'>')
                    ->execute();
              while($record = $results_join->fetchAssoc()) {
                  $data[] = $record['nid'];  
              }
              endif;
              endif;
              return $data;
}
function list_project_owner()
{
    global $user;
    $results = db_select('node', 'n')
          ->fields('n', array('nid','title'))
          ->condition('type', 'project','=')
          ->condition('uid', $user->uid,'=')
          ->condition('status', 0,'>')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['nid']; 
       
    }
    return $data;
}
function user_list_project_owner($uid)
{
    global $user;
    $results = db_select('node', 'n')
          ->fields('n', array('nid','title'))
          ->condition('type', 'project','=')
          ->condition('uid', $uid,'=')
          ->condition('status', 0,'>')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['nid']; 
       
    }
    return $data;
}
function list_campaign_other($nid)
{
  $data = array();
  if(!empty($nid)) :
    
    //foreach ($nid as $key => $value) {
    //echo $value;    
      $results = db_select('field_data_field_join_project', 'fp');
        //$results->join('field_data_field_join_status', 'fj', 'fp.entity_id = fj.entity_id');
        $results->join('field_data_field_project_join', 'cm', 'fp.entity_id = cm.field_project_join_value');
        $results->fields('cm', array('entity_id'));
        $results->condition('fp.field_join_project_nid', $nid ,"in" );
        //$results->groupBy('fp.field_join_project_nid');
        // $results->condition('fj.field_join_status_value', 1 ,"=" );
        $result_data = $results->distinct()->execute();
      foreach ($result_data as $key => $value) {
        $get_project_id = field_collection_item_load( $value->entity_id, $reset = FALSE);
        // $get_project = node_load();

  // echo "<pre>";
  // print_r($get_project_id);
  // echo "</pre>";
         // $data[] = //$get_project_id->field_join_project['und'][0]['nid']; 
        $data[] = $value->entity_id;
         
      //}
  }

  endif; 

  // echo "<pre>";
  // print_r($data);
  // echo "</pre>";

    return $data;
}
function check_user_in_project($data1,$data2)
{
  if(count($data1) != 0)
  {
    foreach ($data1 as $key => $value) {
      if(!empty($value)){
        if(in_array($value, $data2)){
          $v =1;
        }

      }
      
    }
  }
  
  if($v==1){
    return true;
  }else{
    return false;
  }
}
function changemakers_list_org_project()
{
    global $user;
    $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data->field_organization['und'][0]['tid']);
    // echo "</pre>";
    $results = db_select('field_data_field_organization_project', 'o')
          ->fields('o')
          ->condition('field_organization_project_tid',$user_data->field_organization['und'][0]['tid'] ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}
function changemakers_list_consult_project()
{
    global $user;
    // $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data);
    // echo "</pre>";
    $results = db_select('field_data_field_helpdesk_project', 'o')
          ->fields('o')
          ->condition('field_helpdesk_project_uid',$user->uid ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}

function changemakers_list_consult_other_project($uid)
{
    // $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data);
    // echo "</pre>";
    $results = db_select('field_data_field_helpdesk_project', 'o')
          ->fields('o')
          ->condition('field_helpdesk_project_uid',$uid ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}
function changemakers_list_coach_project()
{
    global $user;
    $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data);
    // echo "</pre>";
    $results = db_select('field_data_field_coach_project', 'o')
          ->fields('o')
          ->condition('field_coach_project_uid',$user->uid ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}
function changemakers_list_coach_other_project($uid)
{

    // echo "<pre>";
    // print_r($user_data);
    // echo "</pre>";
    $results = db_select('field_data_field_coach_project', 'o')
          ->fields('o')
          ->condition('field_coach_project_uid',$uid ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}
function changemakers_list_partner_campaign()
{
    global $user;
    // $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data->field_organization['und'][0]['tid']);
    // echo "</pre>";
    $results = db_select('field_data_field_partner_campaign', 'o')
          ->fields('o')
          ->condition('field_partner_campaign_uid',$user->uid ,'=')
          ->condition('bundle', "campaign",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}
function changemakers_list_partner_project()
{
    global $user;
    // $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data->field_organization['und'][0]['tid']);
    // echo "</pre>";
    $results = db_select('field_data_field_partner_project', 'o')
          ->fields('o')
          ->condition('field_partner_project_uid',$user->uid ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}
function changemakers_list_partner_other_project($uid)
{
    // $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data->field_organization['und'][0]['tid']);
    // echo "</pre>";
    $results = db_select('field_data_field_partner_project', 'o')
          ->fields('o')
          ->condition('field_partner_project_uid',$uid ,'=')
          ->condition('bundle', "project",'=')
          ->execute();
    while($record = $results->fetchAssoc()) {
       $data[] = $record['entity_id']; 
       
    }
    return $data;
}

function changemakers_relate_journal_list($problem,$target,$nid)
{
    global $user;

    $query = db_select('node', 'fm');
    $query->fields('fm', array('nid'));
    $query->join('field_data_field_journal_problem', 'fi', 'fm.nid = fi.entity_id');
    $query->join('field_data_field_journal_target', 'fc', 'fm.nid = fc.entity_id');
    $query->join('field_data_field_journal_type', 'ft', 'fm.nid = ft.entity_id');
    $query->condition('fm.type', 'journal', '=');
    $query->condition('fm.nid', $nid, '!=');
    if(!empty($user->roles[5])):
      $query->condition('ft.field_journal_type_value', 1, '=');
    elseif(empty($user->roles[3])):
      $query->condition('ft.field_journal_type_value', 0, '=');
    endif;
    if(!empty($problem)):
    $query->condition('fi.field_journal_problem_tid', $problem ,"in" );
    endif;
    if(!empty($target)):
    $query->condition('fc.field_journal_target_tid', $target ,"in" );
    endif;

     $query->orderBy('created', 'DESC');//ORDER BY created
    $query->range(0,5);
    $result = $query->distinct()->execute()->fetchAll();
    $data = array();

    foreach ($result as $key => $value) {
      // echo "<pre>";
      // print_r($value);
      // echo "</pre>";
      if($value->nid!=$nid){
       $data[] = $value->nid; 
      }
      
    }
    if(empty($data)){
        $query = db_select('node', 'fm');
        $query->fields('fm', array('nid'));
        $query->join('field_data_field_journal_problem', 'fi', 'fm.nid = fi.entity_id');
        $query->join('field_data_field_journal_target', 'fc', 'fm.nid = fc.entity_id');
        $query->join('field_data_field_journal_type', 'ft', 'fm.nid = ft.entity_id');
        $query->condition('fm.type', 'journal', '=');
        $query->condition('fm.nid', $nid, '!=');
        if(!empty($user->roles[5])):
          $query->condition('ft.field_journal_type_value', 1, '=');
        elseif(empty($user->roles[3])):
          $query->condition('ft.field_journal_type_value', 0, '=');
        endif;
        if(!empty($problem)):
        $query->condition('fi.field_journal_problem_tid', $problem ,"in" );
        endif;

         $query->orderBy('created', 'DESC');//ORDER BY created
        $query->range(0,5);
        $result = $query->distinct()->execute()->fetchAll();
       
        foreach ($result as $key => $value) {
          // echo "<pre>";
          // print_r($value);
          // echo "</pre>";
          if($value->nid!=$nid){
           $data[] = $value->nid; 
          }
          
        }

    }
    return $data;
}
function changemakers_get_online_lession($online_lession)
{
    global $user;
    $lession = array();
    foreach ($online_lession as $key => $value) {
      $lession[] = $value['value'];
      // $data_lession = field_collection_item_load($value['value'],$reset = FALSE);
      // echo "<pre>";
      // print_r($data_lession);
      // echo "</pre>";
    }
    $load_lession = entity_load('field_collection_item', array($lession));
    $data= array();
    $i=0;
    foreach ($load_lession as $key => $value) {
     // echo "<pre>";
     //  print_r($value);
     //  echo "</pre>";
       $data[] = array(
        "nid"=>$value->item_id,
        "title"=>$value->field_lession_title['und'][0]['value'],
        "body"=>$value->field_lession_content['und'][0]['value'],
        "path"=>$path,
        "count"=>$i);
       $i++;
    }
    // $user_data = user_load($user->uid);
    // echo "<pre>";
    // print_r($user_data->field_organization['und'][0]['tid']);
    // echo "</pre>";
   
    // $results = db_select('field_data_field_online_course', 'o')
    //       ->fields('o')
    //       ->condition('field_online_course_nid',$nid,'=')
    //       ->condition('bundle', "lesson",'=')
    //       ->execute();
    // $i=0;
    // while($record = $results->fetchAssoc()) {
    //    $node = node_load($record['entity_id']); 
    //    $path = drupal_get_path_alias("node/".$node->nid);
    //    $data[] = array(
    //     "nid"=>$node->nid,
    //     "title"=>$node->title,
    //     "body"=>$node->body['und'][0]['value'],
    //     "path"=>$path,
    //     "count"=>$i);
    //    $i++;
    // }
    return $data;
}
function changemakers_breadcrumb($variables) {
   $breadcrumb = $variables['breadcrumb'];


    $arg0 = arg(0);
   $arg1 = arg(1);
    $arg2 = arg(2);
   $arg3 = arg(3);

    if($arg0=="online-course" && empty($arg1)){
      $breadcrumb[0] = "<a href='/dashboard'>Dashboard</a>";
      $breadcrumb[1] = "<a href='/online-course'>Online course</a>";
    }
    if($arg0=="coach-community" && $arg1=="list"){
       $breadcrumb[0] = "<a href='/'>Home</a>";
        $breadcrumb[1] = "<a href='/coach-community/list'>Coach Community</a>";
    }
    if($arg0=="journal" && $arg1=="my-journal"){
       $breadcrumb[0] = "<a href='/'>Home</a>";
       $breadcrumb[1] = "<a href='/journal/my-journal'>My Journal</a>";
       unset($breadcrumb[2]);
    }
    if($arg0=="node" && $arg1=="92" && $arg2=="submission"){
      module_load_include('inc','webform','includes/webform.submissions');
      $submission = webform_get_submission(92, $arg3);
      $node_load = node_load($submission->data[7][0]);
      $path = drupal_get_path_alias("node/".$node_load->nid);
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/$path'>$node_load->title</a>";
      unset($breadcrumb[2]);
    }
    if(strip_tags($breadcrumb[0])=="Dashboard" && strip_tags($breadcrumb[1])=="Online course" && !empty($breadcrumb[2])){
      $breadcrumb[2] = str_replace("%3F","?",$breadcrumb[2]);
      $breadcrumb[2] = str_replace("%3D","=",$breadcrumb[2]);
      $breadcrumb[3] = str_replace("%3F","?",$breadcrumb[3]);
      $breadcrumb[3] = str_replace("%3D","=",$breadcrumb[3]);
      $breadcrumb[3] = str_replace("%26","&",$breadcrumb[3]);
      
    }
    if($arg1==100){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/participate-take-a-class'> PARTICIPATE</a>";
      $breadcrumb[2] = "<a href='/participate-take-a-class'>Take a class </a>";
    }

    if($arg1==99){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/participate-change-starts-here'> PARTICIPATE</a>";
      $breadcrumb[2] = "<a href='/participate-change-starts-here'> Change Starts Here </a>";
    }
    if($arg1==98){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/participate-become-a-coach'> PARTICIPATE</a>";
      $breadcrumb[2] = "<a href='/participate-become-a-coach'> Become a coach  </a>";
    }
    if($arg1==97){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/participate-invest-in-changemakers'> PARTICIPATE</a>";
      $breadcrumb[2] = "<a href='/participate-invest-in-changemakers'> Invest In Changemakers </a>";
    }
     if($arg1==1240){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/participate-become-a-coach'> PARTICIPATE</a>";
      $breadcrumb[2] = "<a href='/coach-changemakers'> Coach for Changemakers </a>";
    }
    // if($arg1==96){
    //   $breadcrumb[0] = "<a href='/'>Home</a>";
    //   $breadcrumb[1] = "<a href='/participate-become-a-coach'> PARTICIPATE</a>";
    //   $breadcrumb[2] = "<a href='/participate-become-a-coach'> Become a coach  </a>";
    // }
    if($arg0=="node" && $arg1=="add" && $arg2=="journal" && !empty($_GET['type_coach'])){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/node/add/journal?type_coach=1'>Create Journal</a>";
    }
    if($arg0=="news" && empty($arg1)){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/newsevent/list'>News & Event</a>";
      $breadcrumb[2] = "<a href='/news'>News</a>";
    }
    if($arg0=="event-and-workshop" && empty($arg1)){
      $breadcrumb[0] = "<a href='/'>Home</a>";
      $breadcrumb[1] = "<a href='/newsevent/list'>News & Event</a>";
        $breadcrumb[2] = "<a href='/event-and-workshop'>Event and Workshop</a>";
    }
    if($arg0=="node" && $arg2=="edit"){
      $node_load =node_load($arg1);
      $path = drupal_get_path_alias("node/".$node_load->nid);
      global $user;
      if(!isset($user->roles[5])){
        if($node_load->type=="forum"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/community/list'>Community</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }else if($node_load->type=="project"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/projects/list'>Project</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }else if($node_load->type=="knowledge"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/knowledge/list'>Knowledge</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }
        else if($node_load->type=="journal"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/journal/list'>Journal</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }
      }else if(isset($user->roles[5]) || isset($user->roles[3])){
        if($node_load->type=="forum"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/coach-community/list'>Coach Community</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }else if($node_load->type=="project"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/projects/list'>Project</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }else if($node_load->type=="knowledge"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/knowledge/list'>Knowledge</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }
        else if($node_load->type=="journal"){
          $breadcrumb[0] = "<a href='/'>Home</a>";
          $breadcrumb[1] = "<a href='/journal-list-coach'>Coach Journal</a>";
          $breadcrumb[2] = "<a href='/$path'>Edit post $node_load->title</a>";
        }
      }
      // $breadcrumb[2] = "<a href='/event-and-workshop'>Event and Workshop</a>";
    }
    
      // Manage Admin
    if($arg0 == "manage"){
        $breadcrumb[1] = "<a href='/manage/menu'>Managemant Menu</a>";

      if($arg1 == "campaign"){
        $breadcrumb[2] = "<a href='/manage/campaign'>Manage Campaign</a>";
      }elseif($arg1 == "community"){
        $breadcrumb[2] = "<a href='/manage/community'>Manage Community</a>";
      }elseif($arg1 == "event"){
        $breadcrumb[2] = "<a href='/manage/event'>Manage Event</a>";
      }elseif($arg1 == "journal"){
        $breadcrumb[2] = "<a href='/manage/journal'>Manage Journal</a>";
      }elseif($arg1 == "knowledge"){
        $breadcrumb[2] = "<a href='/manage/knowledge'>Manage Knowledge</a>";
      }elseif($arg1 == "news"){
        $breadcrumb[2] = "<a href='/manage/news'>Manage News</a>";
      }elseif($arg1 == "online-course"){
        $breadcrumb[2] = "<a href='/manage/online-course'>Manage Online Course</a>";
      }elseif($arg1 == "project"){
        $breadcrumb[2] = "<a href='/manage/project'>Manage Project</a>";
      }elseif($arg1 == "taxonomy"){
        $breadcrumb[2] = "<a href='/manage/taxonomy'>Manage Taxonomy</a>";
      }elseif($arg1 == "user"){
        $breadcrumb[2] = "<a href='/manage/user'>Manage User</a>";
      }elseif($arg1 == "banner"){
        $breadcrumb[2] = "<a href='/manage/banner'>Manage Banner</a>";
      }elseif($arg1 == "menu"){
        $breadcrumb[1] = "<a href='/manage/menu'>Managemant Menu</a>";
        //$breadcrumb[2] = "<a href='/manage/user'>Manage User</a>";
      }
        
    }
    if($arg0=="user-role-interest" && empty($arg1)){
       $breadcrumb[1] = "<a href='/manage/menu'>Managemant Menu</a>";
       $breadcrumb[2] = "<a href='/user-role-interest'>Manage user role of interest</a>";
    }


  if (!empty($breadcrumb)) {
    // Provide a navigational heading to give context for breadcrumb links to
    // screen-reader users. Make the heading invisible with .element-invisible.
    $output = '<h2 class="element-invisible">' . t('You are here') . '</h2>';

    $output .= '<div class="breadcrumb">' . implode(' » ', $breadcrumb) . '</div>';
    return $output;
  }
}

function changemakers_funding_campaign(){
  $type = arg(2);
  $nid = arg(3);
  $node = node_load($nid);
  if($type=="total_budget"){
    $node->field_total_budget['und'][0]['value']=arg(4);
  }
print "<pre>";
 print_r($node);
 print "</pre>";
}
function changemakers_user_view_alter(&$build) {
 //  print "<pre>";
 // print_r($build);
 // print "</pre>";
  if($build['#view_mode'] == "full" && $build['#theme'] == "user_profile"){
        $breadcrumb = array();
        $breadcrumb[] = l('Home', '<front>');
         $breadcrumb[] = l("Profile ", "/user/".$build['#account']->uid);
        $breadcrumb[] = l("".$build['#account']->name, "/user/".$build['#account']->uid);
        drupal_set_breadcrumb($breadcrumb);
  }

  // Check for the existence of a field added by another module.
  // if (isset($build['an_additional_field'])) {
  //   // Change its weight.
  //   $build['an_additional_field']['#weight'] = -10;
  // }

  // // Add a #post_render callback to act on the rendered HTML of the user.
  // $build['#post_render'][] = 'my_module_user_post_render';
}



#end general function

// $taxo_problems = array();
//   $taxo_target = array();
//   if(isset($user_data->field_profile_problem_interest['und'])){
//     foreach ($user_data->field_profile_problem_interest['und'] as $key => $value) {
//       $taxo_problems[] = $value['tid'];
//     }
//   }
  
//   if(isset($user_data->field_profile_target_group['und'])){
//     foreach ($user_data->field_profile_target_group['und'] as $key => $value) {
//       $taxo_target[] = $value['tid'];
//     }
//   }
  

//   $query = db_select('node', 'fm');
//     $query->fields('fm', array('nid'));
//     $query->join('field_data_field_journal_problem', 'fi', 'fm.nid = fi.entity_id');
//     $query->join('field_data_field_journal_target', 'fc', 'fm.nid = fc.entity_id');
//     $query->condition('fm.type', 'journal', '=');
//  //    $query->condition('fm.entity_id', $project_id ,"in" );
//  //    $query->condition('fm.field_project_status_value', 1 ,"=" );
//  //    $query->condition('fi.field_problem_topic_tid', $taxo , "=");
//  //    $query->range($offset,$limit);

//   // $query=db_select('users','u')->fields('u',array('uid','title','created','uid'));
//   // $query->join('flag_content','fc' , 'u.uid = fc.content_id');

//   $db_or = db_or();
//   $db_or->condition('fm.uid', $user->uid, '=');
//   if(!empty($taxo_problems)){
//     $db_or->condition('fi.field_journal_problem_tid', $taxo_problems, 'in');
//   }
  
//   if(!empty($taxo_target)){
//     $db_or->condition('fc.field_journal_target_tid', $taxo_target, 'in');
//   }
//   $query->condition($db_or);
//   $query->range(0,3);

//   $result = $query->distinct()->execute()->fetchAll();
function changemakers_journal_target()
{
    global $user; 
  $project_nid = arg(2);
  $journal_target = array();
  $results = db_select('field_data_field_project_target', 'p')
            ->fields('p')
            ->condition('entity_id', $project_nid,'=')
            ->execute();
      while($record = $results->fetchAssoc()) {
          $journal_target[] = $record['field_project_target_tid'];        
      }
  echo json_encode($journal_target);
}
function API_changemakers_check_username()
{
  if(!empty($_POST['action'])){
    if($_POST['action']=="checkusername"){
        $username = $_POST['username'];
        $results = db_select('users', 'u')
                  ->fields('u')
                  ->condition('name', $username,'=')
                  ->execute();
         $num_of_result = $results->rowCount();
         if($num_of_result>0){
            echo  1;
         }else{
            echo 0;
         }
    }
    
  }
 
}
function API_changemakers_check_email()
{
   if(!empty($_POST['action'])){
    if($_POST['action']=="checkmail"){
      $email = $_POST['email'];
      $results = db_select('users', 'u')
                ->fields('u')
                ->condition('mail', $email,'=')
                ->execute();
       $num_of_result = $results->rowCount();
       if($num_of_result>0){
          echo  1;
       }else{
          echo 0;
       }
    } 
  }
}

function API_changemakers_check_inactive_project(){
  $get_date_six_month = date('Y-m-d H:i:s', strtotime(date('Y-m')." -6 month"));
  $date_six_timestamp = new DateTime($get_date_six_month);
  $node_project = array();

  // echo "<pre>";
  // print_r($date_six_timestamp->getTimestamp());
  // echo "</pre>";
  //echo $date_six_timestamp->getTimestamp();
  $query = db_select('node', 'fm');
  $query->addField('fm', 'nid', 'entity_id');
  $query->join('field_data_field_project_status', 'fi', 'fm.nid = fi.entity_id');
  $query->condition('fm.type', 'project', 'like');
  $query->condition('fm.changed', $date_six_timestamp->getTimestamp() , "<=");
  $query->condition('fi.field_project_status_value', 1 , "=");
  // $query->range(0, 3);
  $result = $query->execute()->fetchAll();
  
  foreach ($result as $key => $value) {
    $node_project[] = $value->entity_id;
  }


  $query_comment = db_select('comment', 'fm');
  $query_comment->addField('fm', 'nid', 'entity_id');
  $query_comment->addField('fm', 'cid');
  $query_comment->join('node', 'fi', 'fm.nid = fi.nid');
  $query_comment->condition('fi.type', 'project', 'like');
  $query_comment->condition('fm.changed', $date_six_timestamp->getTimestamp() , "<=");
  $result_comment = $query_comment->execute()->fetchAll();
  
  foreach ($result_comment as $key => $value) {
    $query_check_comment = db_select('comment', 'fm');
    $query_check_comment->addField('fm', 'nid', 'entity_id');
    $query_check_comment->join('node', 'fi', 'fm.nid = fi.nid');
    $query_check_comment->condition('fi.type', 'project', 'like');
    $query_check_comment->condition('fm.changed', $date_six_timestamp->getTimestamp() , "<=");
    $result_check_comment = $query_comment->execute()->fetchAll();
    foreach ($result_check_comment as $key => $value2) {
      if(empty($value2)){
        if (!in_array($value->entity_id, $node_project)) {
          $node_project[] = $value->entity_id;
        }
        
      }
    }
  }

  echo "<pre>";
  print_r($node_project);
  echo "</pre>";

  foreach ($node_project as $key => $nid) {

    //if($nid == 7862){
      $num_updated = db_update('field_data_field_project_status') // Table name no longer needs {}
        ->fields(array(
          'field_project_status_value' => 0,
        ))
        ->condition('entity_id', $nid , '=')
        ->execute();
    //}
      // $get_project = node_load($nid);
      // $get_project->field_project_status['und'][0]['value'] = 0;
      // node_save($get_project);

      // $num_updated = db_update('field_data_field_project_status') // Table name no longer needs {}
      //   ->fields(array(
      //     'field_project_status_value' => 0,
      //   ))
      //   ->condition('entity_id', $nid , '=')
      //   ->execute();

  }

  echo "<pre>";
  print_r('1');
  echo "</pre>";

}

function API_changemakers_check_inactive_community(){
  $date_current = date('Y-m-d H:i:s');

  print "<pre>";
  print_r($date_current);
  print "</pre>";
  $node_community = array();
  $query = db_select('node', 'fm');
  $query->addField('fm', 'nid', 'entity_id');
  $query->join('field_data_field_community_due_date', 'fi', 'fm.nid = fi.entity_id');
  $query->join('field_data_field_community_status', 'fx', 'fm.nid = fx.entity_id');
  $query->condition('fm.type', 'forum', 'like');
  $query->condition('fi.field_community_due_date_value', $date_current , "<");
  $query->condition('fx.field_community_status_value', 1 , "=");
  
  // $query->range(0, 3);
  $result = $query->execute()->fetchAll();
  
  foreach ($result as $key => $value) {
    //$node_community[] = $value->entity_id;
    $node_community = node_load($value->entity_id);
    $node_community->field_community_status['und'][0]['value'] = 0;;
    node_save($node_community);
  }
  // $strMessage = "สวัสดีค่ะ คุณ";

  // $strMessage .= "คุณสามารถตั้งค่ารหัสผ่านใหม่สำหรับเข้าสู่เว็บไซต์<br>";
  // $strMessage .= "<a href='http://www.schoolofchangemakers.com/'>www.schoolofchangemakers.com</a><br>ได้ตามลิงค์ด้านล่างนี้<br><br>";
  // $strMessage .= "ขอบคุณค่ะ<br>";
  // $strMessage .= "ทีมงาน School of Changemakers<br>";
  // $from = "soc@schoolofchangemakers.com";
  // $to = "puripat@diversition.co.th";  
       
  //           $strTo = "khunakorn.konai@gmail.com";
  //           $strSubject = "Changemakers send mail";
        
  //           $strHeader= "From:  ".$from."\r\n".
  //                       "Reply-To: ".$strTo."\r\n".
  //                       "MIME-Version: 1.0\r\n".
  //                       "Content-Type: text/html; charset=UTF-8";  
          
          
  //            @mail($strTo,$strSubject,$strMessage,$strHeader);
             print "<pre>";
             print_r("tong 1");
             print "</pre>";

  // print "<pre>";
  // print_r($node_community);
  // print "</pre>";

}
// function changemakers_views_query_alter(&$view, &$query) {
//   echo "<pre>";
//   print_r($view->name);
//   echo "</pre>";
// }
function API_changemakers_transferdata_community()
{
  ////////////////// Start Community ///////////////
$json = file_get_contents('http://soc.devfunction.com/cmk_community.php');
$obj = json_decode($json);


 for ($i=0; $i < count($obj) ; $i++) { 
$node = new stdClass();
  //$node = node_load(248);

$url = $obj[$i]->image;
//I have used picture folder to store images using image field settings
$file_info = system_retrieve_file($url, 'public://', TRUE);

if(empty($obj[$i]->changed)){
  $changed = $obj[$i]->created;
}else{
  $changed= $obj[$i]->changed;
}
  $cnt_hastag = count($obj[$i]->hastag);
  $x=0;
for ($j=0; $j < $cnt_hastag; $j++) { 
  $result = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('name',  $obj[$i]->hastag[$j],'=')
    ->condition('vid',  8,'=')
    ->execute()
    ->fetchAssoc();

  if(empty($result)){
      // $term = new stdClass();
      // $term->name = $obj[$i]->hastag[$j];
      // $term->vid = 9;
      // taxonomy_term_save($term);
     
      // $node->field_hashtags['und'][$j]['tid'] = $term->tid;
  }else{
     $node->field_community_forum_topic_type['und'][$x]['tid'] = $result['tid'];
     $x++;
  }
  //   print "<pre>";
  // print_r($result);
  // print "</pre>";
}
   
  // print "<pre>";
  // print_r($result);
  // print "</pre>";
  



$node->type = "forum";
$node->title = $obj[$i]->title;
$node->status = $obj[$i]->active;
$node->language = "und";
$node->promote = 0;
$node->comment = 2;
$node->created = $obj[$i]->created;
$node->changed = $changed;
$node->body['und'][0]['value']=$obj[$i]->content;
$node->body['und'][0]['format'] = "full_html";
$node->field_commuity_image['und'][0]['fid'] = $file_info->fid;
$node->uid = $obj[$i]->author_id;
$node->field_community_status['und'][0]['value'] = $obj[$i]->active;
$node->taxonomy_forums['und'][0]['tid'] = 1;
// $z = 0;
// foreach ($obj[$i]->file as $key => $value) {
//      // print_r($value);
//      // echo $value->author_id;
//    $url = $value->url;
//     //I have used picture folder to store images using image field settings
//     $file_info = system_retrieve_file($url, 'public://', TRUE);

//      $file = db_update('file_managed') // Table name no longer needs {}
//     ->fields(array(
//       'filename' => $value->name,
//     ))
//     ->condition('fid', $file_info->fid, '=')
//     ->execute();

//     $node->field_knowledge_document['und'][$z]['fid']=$file_info->fid;
//     $node->field_knowledge_document['und'][$z]['display']=1;
//     $z++;
  
//   }
// $y = 0;
//   foreach ($obj[$i]->image_data as $key => $value) {
//      // print_r($value);
//      // echo $value->author_id;
//     $url = $value->url;
//     //I have used picture folder to store images using image field settings
//     $file_info = system_retrieve_file($url, 'public://', TRUE);
//      $file = db_update('file_managed') // Table name no longer needs {}
//     ->fields(array(
//       'filename' => $value->name,
//     ))
//     ->condition('fid', $file_info->fid, '=')
//     ->execute();
//     $node->field_other_picture['und'][$y]['fid']=$file_info->fid;
//     $node->field_other_picture['und'][$y]['display']=1;
//     $y++;
//   }

// //   print "<pre>";
// // print_r($node);
// // print "</pre>";

node_submit($node);
node_save($node);

//   // $result_node = db_select('node', 'n')
//   //   ->fields('n')
//   //   ->condition('title', $obj[$i]->title,'=')
//   //   ->execute()
//   //   ->fetchAssoc();

  $num_updated = db_update('node') // Table name no longer needs {}
  ->fields(array(
    'changed' => $changed,
    'created' => $obj[$i]->created,
  ))
  ->condition('nid', $node->nid, '=')
  ->execute();

 
  
// // echo $changed;
// //   print_r($result_node);
// //   print_r($num_updated);

  foreach ($obj[$i]->comment as $key => $value) {
     // print_r($value);
     // echo $value->author_id;
    $comment = new stdClass();
    $comment->nid = $node->nid; // nid of a node you want to attach a comment to
    $comment->uid = $value->author_id; // user's id, who left the comment
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none 
    $comment->created = $value->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->language = "und"; // The same as for a node
    $comment->comment_body[$comment->language][0]['value'] = $value->content; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
    // print "<pre>";
    // print_r($comment);
    // print "</pre>";
    comment_submit($comment); // saving a comment
    comment_save($comment);
  }




 echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";
}



  //   print "<pre>";
  // print_r($obj);
  // print "</pre>";
  //  $node = node_load(34);
  //   print "<pre>";
  // print_r($node);
  //  print "</pre>";
  ////////////////////////// End Community //////////
}
function API_changemakers_transferdata_journal()
{
$mtime = microtime();
$mtime = explode(" ",$mtime);
$mtime = $mtime[1] + $mtime[0];
$starttime = $mtime;
  ////////////// Start Journal ///////////////
$json = file_get_contents('http://soc.devfunction.com/cmk_journal.php');
$obj = json_decode($json);

// foreach ($obj as $key => $value) {
//   echo $value->title."<BR>";
// }
 for ($i=0; $i < count($obj) ; $i++) { 
$node = new stdClass();
//   //$node = node_load(248);

$url = $obj[$i]->image;
//I have used picture folder to store images using image field settings
  $file_headers = @get_headers($url);
  if(!empty($file_headers)){
    if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
      $file_info = "";
    }
    else {
      $file_info = system_retrieve_file($url, 'public://', TRUE);
    }
  }else{
     $file_info = "";
  }

if(empty($obj[$i]->change)){
  $changed = $obj[$i]->created;
}else{
  $changed= $obj[$i]->change;
}


  $cnt_hastag = count($obj[$i]->hastag);
  $x=0;

  $cnt_hastag = count($obj[$i]->hastag);
  $x=0;
for ($j=0; $j < $cnt_hastag; $j++) { 
  $result = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('name',  $obj[$i]->hastag[$j],'=')
    ->condition('vid',  1,'=')
    ->execute()
    ->fetchAssoc();

  if(empty($result)){
      // $term = new stdClass();
      // $term->name = $obj[$i]->hastag[$j];
      // $term->vid = 9;
      // taxonomy_term_save($term);
     
      // $node->field_hashtags['und'][$j]['tid'] = $term->tid;
  }else{
     $node->field_hashtags['und'][$x]['tid'] = $result['tid'];
     $x++;
  }
  //   print "<pre>";
  // print_r($result);
  // print "</pre>";
}


$node->type = "journal";
$node->title = $obj[$i]->title;
$node->status = $obj[$i]->active;
$node->language = "und";
$node->promote = 0;
$node->comment = 2;
$node->created = $obj[$i]->created;
$node->changed = $changed;
$node->body['und'][0]['value']=$obj[$i]->content;
$node->body['und'][0]['format'] = "full_html";
$node->field_journal_image['und'][0]['fid'] = $file_info->fid;
$node->uid = $obj[$i]->author_id;
  
$node->field_journal_type['und'][0]['value']  = 0;
$node->field_journal_date['und'][0]['value']  = date("Y-m-d H:i:s",$changed);


node_submit($node);
node_save($node);

  // $num_updated = db_update('node') // Table name no longer needs {}
  // ->fields(array(
  //   'changed' => $changed,
  // ))
  // ->condition('nid', $node->nid, '=')
  // ->execute();

//   // $result_node = db_select('node', 'n')
//   //   ->fields('n')
//   //   ->condition('title', $obj[$i]->title,'=')
//   //   ->execute()
//   //   ->fetchAssoc();

 $num_updated = db_update('node') // Table name no longer needs {}
  ->fields(array(
    'changed' => $changed,
    'created' => $obj[$i]->created,
  ))
  ->condition('nid', $node->nid, '=')
  ->execute();

 
  
// // echo $changed;
// //   print_r($result_node);
// //   print_r($num_updated);

  foreach ($obj[$i]->comment as $key => $value) {
     // print_r($value);
     // echo $value->author_id;
    $comment = new stdClass();
    $comment->nid = $node->nid; // nid of a node you want to attach a comment to
    $comment->uid = $value->author_id; // user's id, who left the comment
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none 
    $comment->created = $value->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->language = "und"; // The same as for a node
    $comment->comment_body[$comment->language][0]['value'] = $value->content; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
    // print "<pre>";
    // print_r($comment);
    // print "</pre>";
    comment_submit($comment); // saving a comment
    comment_save($comment);
     $num_updated = db_update('comment') // Table name no longer needs {}
      ->fields(array(
        'changed' => $value->created,
        'created' => $value->created,
      ))
      ->condition('cid', $comment->cid, '=')
      ->execute();
  }




echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";
}


}
function API_changemakers_transferdata_event()
{

  //////////////// Start Event ///////////////
$json = file_get_contents('http://soc.devfunction.com/cmk_event.php');
$obj = json_decode($json);


 for ($i=0; $i < count($obj) ; $i++) { 
$node = new stdClass();
  //$node = node_load(248);

  $url = $obj[$i]->image;
//I have used picture folder to store images using image field settings
  $file_headers = @get_headers($url);
  if(!empty($file_headers)){
    if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
      $file_info = "";
    }
    else {
      $file_info = system_retrieve_file($url, 'public://', TRUE);
    }
  }else{
     $file_info = "";
  }


if(empty($obj[$i]->changed)){
  $changed = $obj[$i]->created;
}else{
  $changed= $obj[$i]->changed;
}
  $cnt_hastag = count($obj[$i]->hastag);
  $x=0;
for ($j=0; $j < $cnt_hastag; $j++) { 
  $result = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('name',  $obj[$i]->hastag[$j],'=')
    ->condition('vid',  9,'=')
    ->execute()
    ->fetchAssoc();

  if(empty($result)){
      $term = new stdClass();
      $term->name = $obj[$i]->hastag[$j];
      $term->vid = 9;
      taxonomy_term_save($term);
     
      $node->field_hashtags['und'][$j]['tid'] = $term->tid;
  }else{
     $node->field_hashtags['und'][$j]['tid'] = $result['tid'];
  }
  //   print "<pre>";
  // print_r($result);
  // print "</pre>";
}
   
  // print "<pre>";
  // print_r($result);
  // print "</pre>";
  



$node->type = "event";
$node->title = $obj[$i]->title;
$node->status = $obj[$i]->active;
$node->language = "und";
$node->promote = 0;
$node->comment = 2;
$node->created = $obj[$i]->created;
$node->changed = $changed;
$node->body['und'][0]['value']=$obj[$i]->content;
$node->body['und'][0]['format'] = "full_html";
$node->field_picture['und'][0]['fid'] = $file_info->fid;
$node->uid = $obj[$i]->author_id;
$node->field_event_status['und'][0]['value'] = $obj[$i]->active;
$node->field_event_facilities['und'][0]['value'] = $obj[$i]->location;
$node->field_news_event_type['und'][0]['value'] = $obj[$i]->type;
if(!empty($obj[$i]->start_time)):
$node->field_news_event_date['und'][0]['value']= $obj[$i]->start_time;
endif;
if(!empty($obj[$i]->end_time)):
$node->field_news_event_date['und'][0]['value1']= $obj[$i]->end_time;
endif;
if($obj[$i]->question[0]):
$node->field_question_1['und'][0]['value']= $obj[$i]->question[0];
endif;
if($obj[$i]->question[1]):
$node->field_question_2['und'][0]['value']= $obj[$i]->question[1];
endif;
if($obj[$i]->question[2]):
$node->field_question_3['und'][0]['value']= $obj[$i]->question[2];
endif;
if($obj[$i]->question[3]):
$node->field_question_4['und'][0]['value']= $obj[$i]->question[3];
endif;
if($obj[$i]->question[4]):
$node->field_question_5['und'][0]['value']= $obj[$i]->question[4];
endif;


node_submit($node);
node_save($node);

  // $result_node = db_select('node', 'n')
  //   ->fields('n')
  //   ->condition('title', $obj[$i]->title,'=')
  //   ->execute()
  //   ->fetchAssoc();

  $num_updated = db_update('node') // Table name no longer needs {}
  ->fields(array(
    'changed' => $changed,
    'created' => $obj[$i]->created,
  ))
  ->condition('nid', $node->nid, '=')
  ->execute();
  
  
// echo $changed;
//   print_r($result_node);
//   print_r($num_updated);

  foreach ($obj[$i]->comment as $key => $value) {
     // print_r($value);
     // echo $value->author_id;
    $comment = new stdClass();
    $comment->nid = $node->nid; // nid of a node you want to attach a comment to
    $comment->uid = $value->author_id; // user's id, who left the comment
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none 
    $comment->created = $value->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->language = "und"; // The same as for a node
    $comment->comment_body[$comment->language][0]['value'] = $value->content; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
    // print "<pre>";
    // print_r($comment);
    // print "</pre>";
    comment_submit($comment); // saving a comment
    comment_save($comment);
     $num_updated = db_update('comment') // Table name no longer needs {}
      ->fields(array(
        'changed' => $value->created,
        'created' => $value->created,
      ))
      ->condition('cid', $comment->cid, '=')
      ->execute();
  }

  foreach ($obj[$i]->user_join as $key => $value) {
    module_load_include('inc','webform','includes/webform.submissions');
      $web_form = node_load(3);
      $data = array(
        1 => array('0' => $value->uid),
        2 => array('0' => $node->nid),
        3 => array('0' => $value->ans[0]),
        4 => array('0' => $value->ans[1]),
        5 => array('0' => $value->ans[2]),
        6 => array('0' => $value->ans[3]),
        7 => array('0' => $value->ans[4]),
        );
      $submission = (object) array(
        // 'nid' => 1,
        'uid' => $value->uid,
        'is_draft' => FALSE,
        'data' => $data,
      );
      // print "<pre>";
      // print_r($_POST['submitted']);
      // print "</pre>";
      $submission = webform_submission_insert($web_form,$submission);
  }
echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";
}



//   print "<pre>";
// print_r($obj);
// print "</pre>";
// $node = node_load(66);
//   print "<pre>";
// print_r($node);
//  print "</pre>";
//////////////////////// End Event //////////

}
function API_changemakers_transferdata_news()
{
  ////////////////// Start News ///////////////
$json = file_get_contents('http://soc.devfunction.com/cmk_news.php');
$obj = json_decode($json);
 for ($i=0; $i < count($obj) ; $i++) { 
$node = new stdClass();
  //$node = node_load(248);

  $url = $obj[$i]->image;
//I have used picture folder to store images using image field settings
  $file_headers = @get_headers($url);
  if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
    $file_info = "";
  }
  else {
    $file_info = system_retrieve_file($url, 'public://', TRUE);
  }

if(empty($obj[$i]->changed)){
  $changed = $obj[$i]->created;
}else{
  $changed= $obj[$i]->changed;
}
  $cnt_hastag = count($obj[$i]->hastag);
  $x=0;
for ($j=0; $j < $cnt_hastag; $j++) { 
  $result = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('name',  $obj[$i]->hastag[$j],'=')
    ->condition('vid',  9,'=')
    ->execute()
    ->fetchAssoc();

  if(empty($result)){
      $term = new stdClass();
      $term->name = $obj[$i]->hastag[$j];
      $term->vid = 9;
      taxonomy_term_save($term);
     
      $node->field_hashtags['und'][$j]['tid'] = $term->tid;
  }else{
     $node->field_hashtags['und'][$j]['tid'] = $result['tid'];
  }
  //   print "<pre>";
  // print_r($result);
  // print "</pre>";
}
   
  // print "<pre>";
  // print_r($result);
  // print "</pre>";
  



$node->type = "news";
$node->title = $obj[$i]->title;
$node->status = $obj[$i]->active;
$node->language = "und";
$node->promote = 0;
$node->comment = 2;
$node->created = $obj[$i]->created;
$node->changed = $changed;
$node->body['und'][0]['value']=$obj[$i]->content;
$node->body['und'][0]['format'] = "full_html";
$node->field_picture['und'][0]['fid'] = $file_info->fid;
$node->uid = $obj[$i]->author_id;
$node->field_news_event_type['und'][0]['value'] = $obj[$i]->type;
if(!empty($obj[$i]->start_time)):
$node->field_news_event_date['und'][0]['value']= $obj[$i]->start_time;
endif;
node_submit($node);
node_save($node);
  $result_node = db_select('node', 'n')
    ->fields('n')
    ->condition('title', $obj[$i]->title,'=')
    ->execute()
    ->fetchAssoc();

  $num_updated = db_update('node') // Table name no longer needs {}
  ->fields(array(
    'changed' => $changed,
    'created' => $obj[$i]->created,
  ))
  ->condition('nid', $node->nid, '=')
  ->execute();
  echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";
  
// echo $changed;
//   print_r($result_node);
//   print_r($num_updated);


}



//   print "<pre>";
// print_r($obj);
// print "</pre>";
// $node = node_load(10);
//   print "<pre>";
// print_r($node);
// print "</pre>";
//////////////////////// End news //////////
  
}
function API_changemakers_transferdata_knowledge()
{
  ////////////// Start Knowledge ///////////////
$json = file_get_contents('http://soc.devfunction.com/cmk_knowledge.php');
$obj = json_decode($json);

// foreach ($obj as $key => $value) {
//   echo $value->title."<BR>";
// }
 for ($i=0; $i < count($obj) ; $i++) { 
$node = new stdClass();
  //$node = node_load(248);

$url = $obj[$i]->image;
//I have used picture folder to store images using image field settings
  $file_headers = @get_headers($url);
  if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
    $file_info = "";
  }
  else {
    $file_info = system_retrieve_file($url, 'public://', TRUE);
  }

if(empty($obj[$i]->change)){
  $changed = $obj[$i]->created;
}else{
  $changed= $obj[$i]->change;
}


  $cnt_hastag = count($obj[$i]->hastag);
  $x=0;
for ($j=0; $j < $cnt_hastag; $j++) { 
  $result = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('name',  $obj[$i]->hastag[$j],'=')
    ->condition('vid',  1,'=')
    ->execute()
    ->fetchAssoc();

  if(empty($result)){
      // $term = new stdClass();
      // $term->name = $obj[$i]->hastag[$j];
      // $term->vid = 9;
      // taxonomy_term_save($term);
     
      // $node->field_hashtags['und'][$j]['tid'] = $term->tid;
  }else{
     $node->field_knowledge_type['und'][$x]['tid'] = $result['tid'];
     $x++;
  }
  //   print "<pre>";
  // print_r($result);
  // print "</pre>";
}
   
  // print "<pre>";
  // print_r($result);
  // print "</pre>";
  



$node->type = "knowledge";
$node->title = $obj[$i]->title;
$node->status = $obj[$i]->active;
$node->language = "und";
$node->promote = 0;
$node->comment = 2;
$node->created = $obj[$i]->created;
$node->changed = $changed;
$node->body['und'][0]['value']=$obj[$i]->content;
$node->body['und'][0]['format'] = "full_html";
$node->field_knowledge_image['und'][0]['fid'] = $file_info->fid;
$node->uid = $obj[$i]->author_id;
$node->field_knowledge_date['und'][0]['value']  = date("Y-m-d H:i:s",$obj[$i]->created);
$z = 0;
foreach ($obj[$i]->file as $key => $value) {
     // print_r($value);
     // echo $value->author_id;
   $url = $value->url;
    //I have used picture folder to store images using image field settings
    $file_info = system_retrieve_file($url, 'public://', TRUE);

     $file = db_update('file_managed') // Table name no longer needs {}
    ->fields(array(
      'filename' => $value->name,
    ))
    ->condition('fid', $file_info->fid, '=')
    ->execute();

    $node->field_knowledge_document['und'][$z]['fid']=$file_info->fid;
    $node->field_knowledge_document['und'][$z]['display']=1;
    $z++;
  
  }
$y = 0;
  foreach ($obj[$i]->image_data as $key => $value) {
     // print_r($value);
     // echo $value->author_id;
    $url = $value->url;
    //I have used picture folder to store images using image field settings
    $file_info = system_retrieve_file($url, 'public://', TRUE);
     $file = db_update('file_managed') // Table name no longer needs {}
    ->fields(array(
      'filename' => $value->name,
    ))
    ->condition('fid', $file_info->fid, '=')
    ->execute();
    $node->field_other_picture['und'][$y]['fid']=$file_info->fid;
    $node->field_other_picture['und'][$y]['display']=1;
    $y++;
  }

//   print "<pre>";
// print_r($node);
// print "</pre>";

node_submit($node);
node_save($node);

  // $result_node = db_select('node', 'n')
  //   ->fields('n')
  //   ->condition('title', $obj[$i]->title,'=')
  //   ->execute()
  //   ->fetchAssoc();

  $num_updated = db_update('node') // Table name no longer needs {}
  ->fields(array(
    'changed' => $changed,
    'created' => $obj[$i]->created,
  ))
  ->condition('nid', $node->nid, '=')
  ->execute();

 
  
// echo $changed;
//   print_r($result_node);
//   print_r($num_updated);

  foreach ($obj[$i]->comment as $key => $value) {
     // print_r($value);
     // echo $value->author_id;
    $comment = new stdClass();
    $comment->nid = $node->nid; // nid of a node you want to attach a comment to
    $comment->uid = $value->author_id; // user's id, who left the comment
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none 
    $comment->created = $value->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->language = "und"; // The same as for a node
    $comment->comment_body[$comment->language][0]['value'] = $value->content; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
    // print "<pre>";
    // print_r($comment);
    // print "</pre>";
    comment_submit($comment); // saving a comment
    comment_save($comment);
     $num_updated = db_update('comment') // Table name no longer needs {}
      ->fields(array(
        'changed' => $value->created,
        'created' => $value->created,
      ))
      ->condition('cid', $comment->cid, '=')
      ->execute();
  }




echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";
}



//   print "<pre>";
// print_r($obj);
// print "</pre>";
//  $node = node_load(825);
//   print "<pre>";
// print_r($node);
//  print "</pre>";
////////////////////////// End Knowledge //////////
}
function API_changemakers_transferdata_campaign()
{
  ////////////////// Start Campaign ///////////////
  //  $user = user_load(1);
  //   print "<pre>";
  // print_r($user);
  //  print "</pre>";
//   file_get_contents('www.yoursite.com');
// //and check by echoing
// echo $http_response_header[0];
  // $file = file_exists("https://www.schoolofchangemakers.com/upload/project/379/files/The%20Lab%20#1.pdf");
  //  exit();
  $json = file_get_contents('http://soc.devfunction.com/cmk_campaign.php');
  $obj = json_decode($json);


    for ($i=0; $i < count($obj) ; $i++) { 
   $node = new stdClass();
  //   //$node = node_load(248);

  $url = $obj[$i]->image;
  //I have used picture folder to store images using image field settings
  $file_headers = @get_headers($url);
if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
  $file_info = "";
}
else {
  $file_info = system_retrieve_file($url, 'public://', TRUE);
}
 

  if(empty($obj[$i]->changed)){
    $changed = $obj[$i]->created;
  }else{
    $changed= $obj[$i]->changed;
  }
  //   $cnt_hastag = count($obj[$i]->hastag);
  //   $x=0;
  // for ($j=0; $j < $cnt_hastag; $j++) { 
  //   $result = db_select('taxonomy_term_data', 't')
  //     ->fields('t')
  //     ->condition('name',  $obj[$i]->hastag[$j],'=')
  //     ->condition('vid',  8,'=')
  //     ->execute()
  //     ->fetchAssoc();

  //   if(empty($result)){
  //       // $term = new stdClass();
  //       // $term->name = $obj[$i]->hastag[$j];
  //       // $term->vid = 9;
  //       // taxonomy_term_save($term);
       
  //       // $node->field_hashtags['und'][$j]['tid'] = $term->tid;
  //   }else{
  //      $node->field_community_forum_topic_type['und'][$x]['tid'] = $result['tid'];
  //      $x++;
  //   }
  //   //   print "<pre>";
  //   // print_r($result);
  //   // print "</pre>";
  // }
     
  //   // print "<pre>";
  //   // print_r($result);
  //   // print "</pre>";
    



  $node->type = "campaign";
  $node->title = $obj[$i]->title;
  $node->status = $obj[$i]->active;
  $node->language = "und";
  $node->promote = 0;
  $node->comment = 2;
  $node->created = $obj[$i]->created;
  $node->changed = $changed;
  $node->body['und'][0]['value']=$obj[$i]->content;
  $node->body['und'][0]['format'] = "full_html";
  $node->field_campaign_image['und'][0]['fid'] = $file_info->fid;
  $node->uid = $obj[$i]->author_id;
  $node->field_campaign_active['und'][0]['value'] = $obj[$i]->active;
  $node->taxonomy_forums['und'][0]['tid'] = 1;
  $node->field_campaign_date['und'][0]['value']= $obj[$i]->start_date;
  $node->field_campaign_stage['und'][0]['value']= $obj[$i]->status;
  $node->field_count_views['und'][0]['value']= $obj[$i]->view_count;
  // Add Project 
  $pj= 0;
  $pj_id= array();
  foreach ($obj[$i]->project_joint as $key => $value) {
     $node_project = new stdClass();

     $url = $value->logo;
     //I have used picture folder to store images using image field settings
       $file_headers = @get_headers($url);
        if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
          $file_info = "";
        }
        else {
          $file_info = system_retrieve_file($url, 'public://', TRUE);
        }

     if(empty($value->changed)){
       $changed = $value->created;
     }else{
       $changed= $value->changed;
     }

     $node_project->type = "project";
     $node_project->title = $value->title;
     $node_project->status = $value->active;
     $node_project->language = "und";
     $node_project->promote = 0;
     $node_project->comment = 2;
     $node_project->created = $value->created;
     $node_project->changed = $changed;
     $node_project->body['und'][0]['value']=$value->content;
     $node_project->body['und'][0]['format'] = "full_html";
     $node_project->field_project_image['und'][0]['fid'] = $file_info->fid;
     $node_project->uid = $value->author_id;
     $node_project->field_project_status['und'][0]['value'] = $value->active;
     $node_project->taxonomy_forums['und'][0]['tid'] = 1;
     $node_project->field_project_date['und'][0]['value']= $value->start_date;
     $node_project->field_count_views_project['und'][0]['value']= $value->view_count;
     $node_project->field_project_progress['und'][0]['value'] = $value->status;
     $node_project->field_describe_problem['und'][0]['value']= $value->problem;
     $node_project->field_project_solutions['und'][0]['value']= $value->solution;
     $node_project->field_project_impact['und'][0]['value']= $value->impact;
     $node_project->field_project_sustainability_pla['und'][0]['value']= $value->sustainability_plan;
     $node_project->field_project_background['und'][0]['value']= $value->about_team;
     $node_project->field_target_other['und'][0]['value'] = $value->market;
     $node_project->field_project_website['und'][0]['value'] = $value->website;
     $node_project->field_project_goal['und'][0]['value'] = $value->objective;
      

     $z = 0;
       foreach ($value->file as $key => $value2) {
            // print_r($value);
            // echo $value->author_id;
          $url = $value2->url;
           //I have used picture folder to store images using image field settings
             $file_headers = @get_headers($url);
              if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
                $file_info = "";
              }
              else {
                $file_info = system_retrieve_file($url, 'public://', TRUE);
                $file = db_update('file_managed') // Table name no longer needs {}
               ->fields(array(
                 'filename' => $value2->name,
               ))
               ->condition('fid', $file_info->fid, '=')
               ->execute();

               $node_project->field_other_document_project['und'][$z]['fid']=$file_info->fid;
              }

            
           $node_project->field_other_document_project['und'][$z]['display']=1;
           $z++;
          
         }

        


     node_submit($node_project);
     node_save($node_project);
     $pj_id[] = $node_project->nid;
     foreach ($value->user_follow as $key => $value_user_follow) {
       $u = user_load($value_user_follow);
           $u->field_following_project['und'][]['nid']= $node_project->nid;
           if(!empty($u->uid)){
            user_save($u);
           }
           
           echo "User Follow : $u->uid<br>";
     }
      

     // $node->field_project_join['und'][$pj]['value'] = $field_collection_item->item_id;
      echo "PJ: $pj. $node_project->nid : $node_project->title<br>";
     // $pj++;

       $num_updated = db_update('node') // Table name no longer needs {}
       ->fields(array(
         'changed' => $changed,
         'created' => $value->created,
       ))
       ->condition('nid', $node_project->nid, '=')
       ->execute();

      foreach ($value->user_join as $key => $value_user) {
        module_load_include('inc','webform','includes/webform.submissions');
          $web_form = node_load(2);
             $data_user_join = array(
               1 => array('0' => $value_user),
               2 => array('0' => $node_project->nid),
               3 => array('0' => 1),
               );
             $submission = (object) array(
               // 'nid' => 1,
               'uid' => $value_user,
               'submitted' => REQUEST_TIME,
               'remote_addr' => ip_address(),
               'is_draft' => FALSE,
               'data' => $data_user_join,
             );



             // print "<pre>";
             // print_r($_POST['submitted']);
             // print "</pre>";
             $submission = webform_submission_insert($web_form,$submission);
      }
      

     foreach ($value->feed as $key => $value3) {
            // print_r($value);
            // echo $value->author_id;
           $comment = new stdClass();
           $comment->nid = $node_project->nid; // nid of a node you want to attach a comment to
           $comment->uid = $value3->author_id; // user's id, who left the comment
           $comment->is_anonymous = 0; // leave it as is
           $comment->subject = 'Comment Project'; 
           $comment->cid = 0; // leave it as is
           $comment->pid = 0; // parent comment id, 0 if none 
           $comment->created = $value3->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
           $comment->language = "und"; // The same as for a node
           $comment->comment_body[$comment->language][0]['value'] = $value3->content; // Everything here is pretty much like with a node
           $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
           // print "<pre>";
           // print_r($comment);
           // print "</pre>";
           comment_submit($comment); // saving a comment
           comment_save($comment);
            $num_updated = db_update('comment') // Table name no longer needs {}
            ->fields(array(
              'changed' => $value3->created,
              'created' => $value3->created,
            ))
            ->condition('cid', $comment->cid, '=')
            ->execute();
           foreach ($value3->comment as $key => $value4) {
             $comment_sub = new stdClass();
             $comment_sub->nid = $node_project->nid; // nid of a node you want to attach a comment to
             $comment_sub->uid = $value4->author_id; // user's id, who left the comment
             $comment_sub->cid = 0; // leave it as is
             $comment_sub->is_anonymous = 0; // leave it as is
             $comment_sub->subject = 'Comment Project'; 
             $comment_sub->pid = $comment->cid; // parent comment id, 0 if none 
             $comment_sub->created = $value4->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
             $comment_sub->language = "und"; // The same as for a node
             $comment_sub->comment_body[$comment->language][0]['value'] = $value4->content; // Everything here is pretty much like with a node
             $comment_sub->comment_body[$comment->language][0]['format'] = 'full_html'; 
             // print "<pre>";
             // print_r($comment);
             // print "</pre>";
             comment_submit($comment_sub); // saving a comment
             comment_save($comment_sub);
             $num_updated = db_update('comment') // Table name no longer needs {}
            ->fields(array(
              'changed' => $value4->created,
              'created' => $value4->created,
            ))
            ->condition('cid', $comment_sub->cid, '=')
            ->execute();
           }
            

         }
         foreach ($value->community as $key => $value5) {
              $node_com = new stdClass();
             //$node = node_load(248);

           $url = $value5->image;
           //I have used picture folder to store images using image field settings
             $file_headers = @get_headers($url);
              if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
                $file_info = "";
              }
              else {
                $file_info = system_retrieve_file($url, 'public://', TRUE);
              }

           if(empty($value5->changed)){
             $changed = $value5->created;
           }else{
             $changed= $value5->changed;
           }
             $cnt_hastag = count($value5->hastag);
             $x=0;
           for ($j=0; $j < $cnt_hastag; $j++) { 
             $result = db_select('taxonomy_term_data', 't')
               ->fields('t')
               ->condition('name',  $value5->hastag[$j],'=')
               ->condition('vid',  8,'=')
               ->execute()
               ->fetchAssoc();

             if(empty($result)){
                 // $term = new stdClass();
                 // $term->name = $obj[$i]->hastag[$j];
                 // $term->vid = 9;
                 // taxonomy_term_save($term);
                 
                 // $node->field_hashtags['und'][$j]['tid'] = $term->tid;
             }else{
                $node_com->field_community_forum_topic_type['und'][$x]['tid'] = $result['tid'];
                $x++;
             }
             //   print "<pre>";
             // print_r($result);
             // print "</pre>";
           }
               
             // print "<pre>";
             // print_r($result);
             // print "</pre>";
              



           $node_com->type = "forum";
           $node_com->title = $value5->title;
           $node_com->status = $value5->active;
           $node_com->language = "und";
           $node_com->promote = 0;
           $node_com->comment = 2;
           $node_com->created = $value5->created;
           $node_com->changed = $changed;
           $node_com->field_community_project['und'][0]['nid']= $node_project->nid;
           $node_com->body['und'][0]['value']=$value5->content;
           $node_com->body['und'][0]['format'] = "full_html";
           $node_com->field_commuity_image['und'][0]['fid'] = $file_info->fid;
           $node_com->uid = $value5->author_id;
           $node_com->field_community_status['und'][0]['value'] = $value5->active;
           $node_com->taxonomy_forums['und'][0]['tid'] = 1;
           // $z = 0;
            
           // //   print "<pre>";
           // // print_r($node);
           // // print "</pre>";

           node_submit($node_com);
           node_save($node_com);
           echo "Com. $node_com->nid : $node_com->title<br>";
           //   // $result_node = db_select('node', 'n')
           //   //   ->fields('n')
           //   //   ->condition('title', $obj[$i]->title,'=')
           //   //   ->execute()
           //   //   ->fetchAssoc();

             $num_updated = db_update('node') // Table name no longer needs {}
             ->fields(array(
               'changed' => $changed,
               'created' => $value5->created,
             ))
             ->condition('nid', $node_com->nid, '=')
             ->execute();

             
              
           // // echo $changed;
           // //   print_r($result_node);
           // //   print_r($num_updated);

             foreach ($value5->comment as $key => $value6) {
                // print_r($value);
                // echo $value->author_id;
               $comment = new stdClass();
               $comment->nid = $node_com->nid; // nid of a node you want to attach a comment to
               $comment->uid = $value6->author_id; // user's id, who left the comment
               $comment->cid = 0; // leave it as is
               $comment->pid = 0; // parent comment id, 0 if none 
               $comment->is_anonymous = 0; // leave it as is
               $comment->subject = 'Comment Community'; 
               $comment->created = $value6->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
               $comment->language = "und"; // The same as for a node
               $comment->comment_body[$comment->language][0]['value'] = $value6->content; // Everything here is pretty much like with a node
               $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
               // print "<pre>";
               // print_r($comment);
               // print "</pre>";
               comment_submit($comment); // saving a comment
               comment_save($comment);
              $num_updated = db_update('comment') // Table name no longer needs {}
              ->fields(array(
                'changed' => $value6->created,
                'created' => $value6->created,
              ))
              ->condition('cid', $comment->cid, '=')
              ->execute();
             }
           }
  }



  // End Add project
  // // $z = 0;
  // // foreach ($obj[$i]->file as $key => $value) {
  // //      // print_r($value);
  // //      // echo $value->author_id;
  // //    $url = $value->url;
  // //     //I have used picture folder to store images using image field settings
  // //     $file_info = system_retrieve_file($url, 'public://', TRUE);

  // //      $file = db_update('file_managed') // Table name no longer needs {}
  // //     ->fields(array(
  // //       'filename' => $value->name,
  // //     ))
  // //     ->condition('fid', $file_info->fid, '=')
  // //     ->execute();

  // //     $node->field_knowledge_document['und'][$z]['fid']=$file_info->fid;
  // //     $node->field_knowledge_document['und'][$z]['display']=1;
  // //     $z++;
    
  // //   }
  $y = 0;
    foreach ($obj[$i]->image_data as $key => $value) {
       // print_r($value);
       // echo $value->author_id;
      $url = $value->url;
      //I have used picture folder to store images using image field settings
        $file_headers = @get_headers($url);
        if($file_headers[7] == 'HTTP/1.1 404 Not Found' ||  $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
          $file_info = "";
        }
        else {
          $file_info = system_retrieve_file($url, 'public://', TRUE);
          $file = db_update('file_managed') // Table name no longer needs {}
            ->fields(array(
              'filename' => $value->name,
            ))
            ->condition('fid', $file_info->fid, '=')
            ->execute();
            $node->field_sub_campaign_image['und'][$y]['fid']=$file_info->fid;
        }
       
      $node->field_sub_campaign_image['und'][$y]['display']=1;
      $y++;
    }

  // // //   print "<pre>";
  // // // print_r($node);
  // // // print "</pre>";

  node_submit($node);
  node_save($node);

  foreach ($pj_id as $key => $value) {
   $node = node_load($node->nid);
   $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_project_join'));
   $field_collection_item->field_join_project['und'][]['nid'] = $value;
   $field_collection_item->field_join_status['und'][]['value']= 1;//$item['id'];
   $field_collection_item->setHostEntity('node', $node);
   $field_collection_item->save();
  }


  // //   // $result_node = db_select('node', 'n')
  // //   //   ->fields('n')
  // //   //   ->condition('title', $obj[$i]->title,'=')
  // //   //   ->execute()
  // //   //   ->fetchAssoc();

  //   $num_updated = db_update('node') // Table name no longer needs {}
  //   ->fields(array(
  //     'changed' => $changed,
  //     'created' => $obj[$i]->created,
  //   ))
  //   ->condition('nid', $node->nid, '=')
  //   ->execute();

   
    
  // // // echo $changed;
  // // //   print_r($result_node);
  // // //   print_r($num_updated);
  if(count($obj[$i]->comment)>0):
    foreach ($obj[$i]->comment as $key => $value) {
       // print_r($value);
       // echo $value->author_id;
        // echo $value->author_id;

           $comment = new stdClass();
           $comment->nid = $node->nid; // nid of a node you want to attach a comment to
           $comment->uid = $value->author_id; // user's id, who left the comment
           $comment->is_anonymous = 0; // leave it as is
           $comment->subject = 'Comment Campaign'; 
           $comment->cid = 0; // leave it as is
           $comment->pid = 0; // parent comment id, 0 if none 
           $comment->created = $value->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
           $comment->language = "und"; // The same as for a node
           $comment->comment_body[$comment->language][0]['value'] = $value->content; // Everything here is pretty much like with a node
           $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
           // print "<pre>";
           // print_r($comment);
           // print "</pre>";
           comment_submit($comment); // saving a comment
           comment_save($comment);
           // echo "<pre>";
           // print_r($value);
           // echo "</pre>";
           //   echo "<pre>";
           // print_r($obj[$i]);
           // echo "</pre>";
           // exit();
           if(!empty($value->created)){
            $num_updated = db_update('comment') // Table name no longer needs {}
              ->fields(array(
                'changed' => $value->created,
                'created' => $value->created,
              ))
              ->condition('cid', $comment->cid, '=')
              ->execute();
           }
            
           foreach ($value->comment as $key => $value4) {
             $comment_sub = new stdClass();
             $comment_sub->nid = $node->nid; // nid of a node you want to attach a comment to
             $comment_sub->uid = $value4->author_id; // user's id, who left the comment
             $comment_sub->cid = 0; // leave it as is
             $comment_sub->is_anonymous = 0; // leave it as is
             $comment_sub->subject = 'Comment Campaign'; 
             $comment_sub->pid = $comment->cid; // parent comment id, 0 if none 
             $comment_sub->created = $value4->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
             $comment_sub->language = "und"; // The same as for a node
             $comment_sub->comment_body[$comment->language][0]['value'] = $value4->content; // Everything here is pretty much like with a node
             $comment_sub->comment_body[$comment->language][0]['format'] = 'full_html'; 
             // print "<pre>";
             // print_r($comment);
             // print "</pre>";
             comment_submit($comment_sub); // saving a comment
             comment_save($comment_sub);
             $num_updated = db_update('comment') // Table name no longer needs {}
              ->fields(array(
                'changed' => $value4->created,
                'created' => $value4->created,
              ))
              ->condition('cid', $comment_sub->cid, '=')
              ->execute();
           }
    }
endif;



  echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";
   }



  //   print "<pre>";
  // print_r($obj);
  // print "</pre>";

  ////////////////////////// End Campaign //////////
}
function API_changemakers_transferdata_project()
{
  //////////////// Start Project ///////////////
  //  $user = user_load(1);
  //   print "<pre>";
  // print_r($user);
  //  print "</pre>";
  //  exit();
$json = file_get_contents('http://soc.devfunction.com/cmk_project.php');
$obj = json_decode($json);


foreach ($obj as $key => $value) {
   $node_project = new stdClass();

   $url = $value->logo;
   //I have used picture folder to store images using image field settings
    $file_headers = @get_headers($url);
    if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
      $file_info = "";
    }
    else {
      $file_info = system_retrieve_file($url, 'public://', TRUE);
    }

   if(empty($value->changed)){
     $changed = $value->created;
   }else{
     $changed= $value->changed;
   }
   $node_project->type = "project";
   $node_project->title = $value->title;
   $node_project->status = $value->active;
   $node_project->language = "und";
   $node_project->promote = 0;
   $node_project->comment = 2;
   $node_project->created = $value->created;
   $node_project->changed = $changed;
   $node_project->body['und'][0]['value']=$value->content;
   $node_project->body['und'][0]['format'] = "full_html";
   $node_project->field_project_image['und'][0]['fid'] = $file_info->fid;
   $node_project->uid = $value->author_id;
   $node_project->field_project_status['und'][0]['value'] = $value->active;
   $node_project->taxonomy_forums['und'][0]['tid'] = 1;
   $node_project->field_project_date['und'][0]['value']= $value->start_date;
   $node_project->field_count_views_project['und'][0]['value']= $value->view_count;
   $node_project->field_project_progress['und'][0]['value'] = $value->status;
   $node_project->field_describe_problem['und'][0]['value']= $value->problem;
   $node_project->field_project_solutions['und'][0]['value']= $value->solution;
   $node_project->field_project_impact['und'][0]['value']= $value->impact;
   $node_project->field_project_sustainability_pla['und'][0]['value']= $value->sustainability_plan;
   $node_project->field_project_background['und'][0]['value']= $value->about_team;
   $node_project->field_target_other['und'][0]['value'] = $value->market;
   $node_project->field_project_website['und'][0]['value'] = $value->website;
   $node_project->field_project_goal['und'][0]['value'] = $value->objective;
    

   $z = 0;
     foreach ($value->file as $key => $value2) {
          // print_r($value);
          // echo $value->author_id;
        $url = $value2->url;
         //I have used picture folder to store images using image field settings
         $file_headers = @get_headers($url);
          if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
            $file_info = "";
          }
          else {
            $file_info = system_retrieve_file($url, 'public://', TRUE);  
            $file = db_update('file_managed') // Table name no longer needs {}
             ->fields(array(
               'filename' => $value2->name,
             ))
             ->condition('fid', $file_info->fid, '=')
             ->execute();

             $node_project->field_other_document_project['und'][$z]['fid']=$file_info->fid;
          }
        

        
         $node_project->field_other_document_project['und'][$z]['display']=1;
         $z++;
        
       }

      


   node_submit($node_project);
   node_save($node_project);
   $pj_id[] = $node_project->nid;
   foreach ($value->user_follow as $key => $value_user_follow) {
     $u = user_load($value_user_follow);
         $u->field_following_project['und'][]['nid']= $node_project->nid;
         if(!empty($u->uid)){
          user_save($u);
         }
         
         echo "User Follow : $u->uid<br>";
   }
    

   // $node->field_project_join['und'][$pj]['value'] = $field_collection_item->item_id;
    echo "PJ:  $node_project->nid : $node_project->title<br>";
   // $pj++;

     $num_updated = db_update('node') // Table name no longer needs {}
     ->fields(array(
       'changed' => $changed,
       'created' => $value->created,
     ))
     ->condition('nid', $node_project->nid, '=')
     ->execute();

    foreach ($value->user_join as $key => $value_user) {
      echo "User Join $value_user<br>";
      module_load_include('inc','webform','includes/webform.submissions');
        $web_form = node_load(2);
           $data_user_join = array(
             1 => array('0' => $value_user),
             2 => array('0' => $node_project->nid),
             3 => array('0' => 1),
             );
           $submission = (object) array(
             // 'nid' => 1,
             'uid' => $value_user,
             'submitted' => REQUEST_TIME,
             'remote_addr' => ip_address(),
             'is_draft' => FALSE,
             'data' => $data_user_join,
           );



           // print "<pre>";
           // print_r($_POST['submitted']);
           // print "</pre>";
           $submission = webform_submission_insert($web_form,$submission);
    }
    

   foreach ($value->feed as $key => $value3) {
          // print_r($value);
          // echo $value->author_id;
         $comment = new stdClass();
         $comment->nid = $node_project->nid; // nid of a node you want to attach a comment to
         $comment->uid = $value3->author_id; // user's id, who left the comment
         $comment->is_anonymous = 0; // leave it as is
         $comment->subject = 'Comment Project'; 
         $comment->cid = 0; // leave it as is
         $comment->pid = 0; // parent comment id, 0 if none 
         $comment->created = $value3->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
         $comment->language = "und"; // The same as for a node
         $comment->comment_body[$comment->language][0]['value'] = $value3->content; // Everything here is pretty much like with a node
         $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
         // print "<pre>";
         // print_r($comment);
         // print "</pre>";
         comment_submit($comment); // saving a comment
         comment_save($comment);
          if(!empty($value3->created)){
            $num_updated = db_update('comment') // Table name no longer needs {}
              ->fields(array(
                'changed' => $value3->created,
                'created' => $value3->created,
              ))
              ->condition('cid', $comment->cid, '=')
              ->execute();
           }
         foreach ($value3->comment as $key => $value4) {
           $comment_sub = new stdClass();
           $comment_sub->nid = $node_project->nid; // nid of a node you want to attach a comment to
           $comment_sub->uid = $value4->author_id; // user's id, who left the comment
           $comment_sub->cid = 0; // leave it as is
           $comment_sub->is_anonymous = 0; // leave it as is
           $comment_sub->subject = 'Comment Project'; 
           $comment_sub->pid = $comment->cid; // parent comment id, 0 if none 
           $comment_sub->created = $value4->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
           $comment_sub->language = "und"; // The same as for a node
           $comment_sub->comment_body[$comment->language][0]['value'] = $value4->content; // Everything here is pretty much like with a node
           $comment_sub->comment_body[$comment->language][0]['format'] = 'full_html'; 
           // print "<pre>";
           // print_r($value4);
           // print "</pre>";
           comment_submit($comment_sub); // saving a comment
           comment_save($comment_sub);
            $num_updated = db_update('comment') // Table name no longer needs {}
              ->fields(array(
                'changed' => $value4->created,
                'created' => $value4->created,
              ))
              ->condition('cid', $comment_sub->cid, '=')
              ->execute();
         }
          

       }
       foreach ($value->community as $key => $value5) {
            $node_com = new stdClass();
           //$node = node_load(248);

         $url = $value5->image;
         //I have used picture folder to store images using image field settings
          $file_headers = @get_headers($url);
          if($file_headers[7] == 'HTTP/1.1 404 Not Found' || $file_headers[7] == 'HTTP/1.1 403 Forbidden') {
            $file_info = "";
          }
          else {
            $file_info = system_retrieve_file($url, 'public://', TRUE);
          }

         if(empty($value5->changed)){
           $changed = $value5->created;
         }else{
           $changed= $value5->changed;
         }
           $cnt_hastag = count($value5->hastag);
           $x=0;
         for ($j=0; $j < $cnt_hastag; $j++) { 
           $result = db_select('taxonomy_term_data', 't')
             ->fields('t')
             ->condition('name',  $value5->hastag[$j],'=')
             ->condition('vid',  8,'=')
             ->execute()
             ->fetchAssoc();

           if(empty($result)){
               // $term = new stdClass();
               // $term->name = $obj[$i]->hastag[$j];
               // $term->vid = 9;
               // taxonomy_term_save($term);
               
               // $node->field_hashtags['und'][$j]['tid'] = $term->tid;
           }else{
              $node_com->field_community_forum_topic_type['und'][$x]['tid'] = $result['tid'];
              $x++;
           }
           //   print "<pre>";
           // print_r($result);
           // print "</pre>";
         }
             
           // print "<pre>";
           // print_r($result);
           // print "</pre>";
            



         $node_com->type = "forum";
         $node_com->title = $value5->title;
         $node_com->status = $value5->active;
         $node_com->language = "und";
         $node_com->promote = 0;
         $node_com->comment = 2;
         $node_com->created = $value5->created;
         $node_com->changed = $changed;
         $node_com->field_community_project['und'][0]['nid']= $node_project->nid;
         $node_com->body['und'][0]['value']=$value5->content;
         $node_com->body['und'][0]['format'] = "full_html";
         $node_com->field_commuity_image['und'][0]['fid'] = $file_info->fid;
         $node_com->uid = $value5->author_id;
         $node_com->field_community_status['und'][0]['value'] = $value5->active;
         $node_com->taxonomy_forums['und'][0]['tid'] = 1;
         // $z = 0;
          
         // //   print "<pre>";
         // // print_r($node);
         // // print "</pre>";

         node_submit($node_com);
         node_save($node_com);
         echo "Com. $node_com->nid : $node_com->title<br>";
         //   // $result_node = db_select('node', 'n')
         //   //   ->fields('n')
         //   //   ->condition('title', $obj[$i]->title,'=')
         //   //   ->execute()
         //   //   ->fetchAssoc();

           $num_updated = db_update('node') // Table name no longer needs {}
           ->fields(array(
             'changed' => $changed,
             'created' => $value5->created,
           ))
           ->condition('nid', $node_com->nid, '=')
           ->execute();

           
            
         // // echo $changed;
         // //   print_r($result_node);
         // //   print_r($num_updated);

           foreach ($value5->comment as $key => $value6) {
              // print_r($value);
              // echo $value->author_id;
             $comment = new stdClass();
             $comment->nid = $node_com->nid; // nid of a node you want to attach a comment to
             $comment->uid = $value6->author_id; // user's id, who left the comment
             $comment->cid = 0; // leave it as is
             $comment->pid = 0; // parent comment id, 0 if none 
             $comment->is_anonymous = 0; // leave it as is
             $comment->subject = 'Comment Community'; 
             $comment->created = $value6->created; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
             $comment->language = "und"; // The same as for a node
             $comment->comment_body[$comment->language][0]['value'] = $value6->content; // Everything here is pretty much like with a node
             $comment->comment_body[$comment->language][0]['format'] = 'full_html'; 
             // print "<pre>";
             // print_r($comment);
             // print "</pre>";
             comment_submit($comment); // saving a comment
             comment_save($comment);
             $num_updated = db_update('comment') // Table name no longer needs {}
              ->fields(array(
                'changed' => $value6->created,
                'created' => $value6->created,
              ))
              ->condition('cid', $comment->cid, '=')
              ->execute();
           }

         }
         echo "$i. <a href='/node/$node->nid' target='_blank'> $node->title</a><br>";

}







//   print "<pre>";
// print_r($obj);
// print "</pre>";

//////////////////////// End Project //////////
}
function API_changemakers_transferdata()
{
	$mtime = microtime();
$mtime = explode(" ",$mtime);
$mtime = $mtime[1] + $mtime[0];
$starttime = $mtime;

	





//////////////////// User ///////////////////////////////////////////
$json = file_get_contents('http://soc.devfunction.com/cmk_user.php');
$obj = json_decode($json);
for ($i=0; $i < count($obj) ; $i++) { 



$profile = user_load($obj[$i]->uid);

if(empty($profile)){
  $username = user_unique_username($obj[$i]->name);
   $fields = array(
   'uid' => $obj[$i]->uid,
    'name' => $username,
    'mail' => $obj[$i]->mail,
    'pass' => $obj[$i]->pass,
    'created' => $obj[$i]->created,
    'signature_format' => "full_html",
    'status' => 1,
    'init' => $obj[$i]->mail,
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );
 
 //  //the first parameter is left blank so a new user is created
 user_save('', $fields);

  //user_delete_multiple(array(236));



}
$profile = user_load($obj[$i]->uid);

if(!empty($obj[$i]->image)):
$url = $obj[$i]->image;
//I have used picture folder to store images using image field settings
$file_info = system_retrieve_file($url, 'public://pictures/', TRUE);
  if(!empty($profile)){
   $profile->picture->fid = $file_info->fid;
  }
  endif;

  $myuserroles = $profile->roles; 
 $myuserroles[10]  = 'unverified'; 
  $cnt_inter = count($obj[$i]->interest);
  $x=0;
for ($j=0; $j < $cnt_inter; $j++) { 
  $result = db_select('taxonomy_term_data', 't')
    ->fields('t')
    ->condition('name',  $obj[$i]->interest[$j],'=')
    ->execute()
    ->fetchAssoc();

    $result2 = db_select('taxonomy_term_hierarchy', 't')
    ->fields('t')
    ->condition('parent',  $result['tid'],'=')
    ->execute();
     $profile->field_profile_problem_interest['und'][$x]['tid']= $result['tid'];
     while($record = $result2->fetchAssoc()) {
      if(!empty($record)){
        $x++;
        $profile->field_profile_problem_interest['und'][$x]['tid']= $record['tid'];
      }
  //   print "<pre>";
  // print_r($record);
  // print "</pre>";
    }
   
  // print "<pre>";
  // print_r($result);
  // print "</pre>";
}
  
  //$profile->name = $username;
   $profile->field_profile_title['und'][0]['value'] = $obj[$i]->title;
   $profile->field_profile_firstname['und'][0]['value'] = $obj[$i]->firstname;
   $profile->field_profile_lastname['und'][0]['value'] = $obj[$i]->lastname;
   $profile->field_profile_birthdate['und'][0]['value'] = $obj[$i]->birthday;
   $profile->field_profile_address['und'][0]['value'] = $obj[$i]->address;
   $profile->field_profile_social_name['und'][0]['value'] = $obj[$i]->social;
   $profile->field_profile_contact['und'][0]['value'] = $obj[$i]->contact;
   $profile->field_profile_phone['und'][0]['value'] = $obj[$i]->phone;
   $profile->field_profile_institution['und'][0]['value'] = $obj[$i]->education_institution;
   $profile->field_profile_faculty['und'][0]['value'] = $obj[$i]->education_faculty;
   $profile->field_profile_major['und'][0]['value'] = $obj[$i]->education_major;
   $profile->field_intro_self['und'][0]['value'] = $obj[$i]->intro;


 module_invoke('user', 'save', $profile, array('roles' => $myuserroles)); 
   user_save($profile);
   echo $profile->uid.". OK<br>";
//   }
}






// $profile = user_load(240);
//   print "<pre>";
// print_r($profile);
// print "</pre>";




// db_insert('users')
//     ->fields(array(
//       'uid' => $account->uid,
//       'name' => $obj->,
//       'pass' => $obj->,
//       'mail' => $obj->,
//       'theme' => $obj->,
//       'signature' => 1,
//       'signature_format' => $obj->,
//       'created' => $obj->,
//       'access' => $obj->,
//       'login' => $obj->,
//       'status' => $obj->,
//       'timezone' => $obj->,
//       'language' => $obj->,
//       'picture' => $obj->,
//       'init' => $obj->,
//       'init' => $obj->,
      
//     ))
//     ->execute();

// End USER /////////////////////////////////



  

  

$mtime = microtime();
$mtime = explode(" ",$mtime);
$mtime = $mtime[1] + $mtime[0];
$endtime = $mtime;
$totaltime = ($endtime - $starttime);
echo "หน้านี้ประมวลผล ".$totaltime." วินาที";

}
function changemakers_check_view_access_community($nid,$tid)
{
  global $user;
  if(!empty($nid)){
    if($tid==1){
      return 1;
    }else if($tid==7 && (!empty($user->roles[5]) || !empty($user->roles[3]))){
      return 1;
    }else{
      return 0;
    }
  }else{
    return 0;
  }
}

function changemakers_checK_node_add(){
  global $user;

  $actual_link = "$_SERVER[REQUEST_URI]";
  $get_path = explode("/", $actual_link);
  if($actual_link == "/node/add"){
    drupal_goto("/");
  }
 
  if(!in_array("administrator",$user->roles) && $get_path[1]=="user" && $get_path[3]=="edit"){
      drupal_goto('/user/');
  }

  // if($get_path[1] == "node" && $get_path[2] == "add"){
  //   if()

  // }

  if($get_path[1] == "node" && $get_path[2] == "add"){
    if($get_path[3] != "journal" && $get_path[3] != "project"  && $get_path[3] != "banner" && $get_path[3] != "campaign"
      && $get_path[3] != "event"  && $get_path[3] != "news"  && $get_path[3] != "forum"  && $get_path[3] != "knowledge"  && $get_path[3] != "course"
      && $get_path[3] != "session-offer"  && $get_path[3] != "webform"    && $get_path[3] != "page"   ){

      if(strpos($get_path[3], "?")){
        $forum = explode("?", $get_path[3]);
        if($forum[0] == "forum"){
         
        }else if($forum[0] == "journal"){
          //drupal_goto("/");
        }else{
          drupal_goto("/");
        }
      }
      else{
        drupal_goto("/");
      }
      //drupal_goto("/");
    }
  }

      // print '<pre>';
      // print_r($get_path); 
      // print '</pre>';
}


function changemakers_get_contact($uid){
  $user_data = user_load($uid);
  if($user_data->roles[3]){
    return "School Team";
  }else{
    return $user_data->name;
  }
  
}

function changemakers_get_name_contact($name){
  $result = db_select('users', 't')
    ->fields('t')
    ->condition('name',  $name ,'like')
    ->execute()
    ->fetchAssoc();

      // print '<pre>';
      // print_r($result); 
      // print '</pre>';
  if(!empty($result)){
    return $result['uid'];
  }

}

function changemaker_check_icon_page($uid){
 $user_data = user_load($uid);
  if($user_data->roles[10]){
    return '<i class="icon-profile txtgray2"></i>';
  }else if($user_data->roles[4] || $user_data->roles[3]){
    return '<i class="icon-profile-verify"></i>';
  }else if($user_data->roles[5]){
    return '<i class="icon-user-pair txtgray2"></i>';
  }else if($user_data->roles[6]){
    return '<i class=" icon-commerical-building txt__gray2"></i>';
  }else if($user_data->roles[8]){
    return '<i class="icon-headphones txtgray2"></i>';
  }else if($user_data->roles[9]){
    return '<i class="icon-briefcase txtgray2"></i>';
  }
}

function changemaker_check_icon_um($uid){
  $user_data = user_load($uid);
  if($user_data->roles[10]){
    return '<i class="icon-profile txtgray2"></i>';
  }else if($user_data->roles[4] || $user_data->roles[3]){
    return '<i class="icon-profile-verify"></i>';
  }else if($user_data->roles[5]){
    return '<i class="icon-user-pair txtgray2"></i>';
  }else if($user_data->roles[6]){
    return '<i class=" icon-commerical-building txt__gray2"></i>';
  }else if($user_data->roles[8]){
    return '<i class="icon-headphones txtgray2"></i>';
  }else if($user_data->roles[9]){
    return '<i class="icon-briefcase txtgray2"></i>';
  }
}

function changemakers_event_download_file(){
  ob_end_clean();
  $filName = "user-join-event.csv";
  $nid = $_GET['nid'];
  $data_csv = changemakers_get_user_join_evenr_csv($nid);
  $node = node_load($nid);
  // print "<pre>";
  // print_r($data_csv);
  // print "</pre>";

  $objWrite = fopen("user-join-event.csv", "w");
  //$tong ="tong";

  fwrite($objWrite, pack("CCC",0xef,0xbb,0xbf)); 
  $q1 = $node->field_question_1['und'][0]['value'];
  $q2 = $node->field_question_2['und'][0]['value'];
  $q3 = $node->field_question_3['und'][0]['value'];
  $q4 = $node->field_question_4['und'][0]['value'];
  $q5 = $node->field_question_5['und'][0]['value']; 
  fwrite($objWrite, "\"ชื่อผู้ใช้\",\"ชื่อ\",\"นามสกุล\",\"อีเมล\",\"เบอร์โทรศพท์\",\"Role\",\"$q1\",\"$q2\",\"$q3\",\"$q4\",\"$q5\" \n"); 

  for ($i=0; $i < count($data_csv) ; $i++) {
    if(!empty($data_csv[$i]['username'])){
      $username = $data_csv[$i]['username']; 
      $fname = $data_csv[$i]['fname'];
      $lname = $data_csv[$i]['lname'];
      $email = $data_csv[$i]['email'];
      $phone = $data_csv[$i]['phone'];
      $role = $data_csv[$i]['role'];
      $answer1 = $data_csv[$i]['answer1'];
      $answer2 = $data_csv[$i]['answer2'];
      $answer3 = $data_csv[$i]['answer3'];
      $answer4 = $data_csv[$i]['answer4'];
      $answer5 = $data_csv[$i]['answer5'];
      fwrite($objWrite,"\"$username\",\"$fname\",\"$lname\",\"$email\",\"$phone\",\"$role\",\"$answer1\",\"$answer2\",\"$answer3\",\"$answer4\",\"$answer5\"\n"); 
    }
  }

  fclose($objWrite);

  $file_export_name = "user-join-event-".$nid.".csv";

  header("Cache-Control: public"); 
  header("Content-Type: application/octet-stream");
  header("Content-Type: text/csv; charset=utf-8");
  header("Content-Disposition: attachment; filename=$file_export_name ");
  // Read the file from disk
  readfile($filName);
  exit();
}

function changemaker_grt_new_project(){
  $node_project = array();

  $query = db_select('node', 'fm');
  $query->fields('fm', array('nid'));
  $query->condition('fm.type', 'project', '=');
  $query->condition('fm.status', '1', '=');
  $query->orderBy('created', 'DESC');//ORDER BY created
  $query->range(0,3);
  $result = $query->distinct()->execute()->fetchAll();
  
  foreach ($result as $key => $value) {
    $node_project[] = $value->nid;
    // print "<pre>";
    // print_r($value);
    // print "</pre>";
  }
  return $node_project;
}

function escapeJavaScriptText($string)
{
    return str_replace("\n", '\n', str_replace('"', '\"', addcslashes(str_replace("\r", '', (string)$string), "\0..\37'\\")));
}

function changemaker_get_last_comment_project(){
  $new_project = changemaker_grt_new_project();

  // print "<pre>";
  // print_r($new_project);
  // print "</pre>";
  $query = db_select('node', 'fm');
  $query->fields('fx', array('nid','created'));
  $query->join('comment', 'fx', 'fm.nid = fx.nid');
  $query->condition('fm.type', 'project', '=');
  $query->condition('fx.nid', $new_project, 'NOT IN');
  $query->condition('fm.status', '1', '=');
  $query->orderBy('fx.created', 'DESC');//ORDER BY created
  //$query->groupBy('fx.nid');
  // $query->range(0,4);
  $result = $query->distinct()->execute()->fetchAll();
  $node_project = array();
  $date_last_comment = array();
  $count_project = 0;
  foreach ($result as $key => $value) {
    if(!in_array($value->nid, $new_project) && $count_project < 4){
      $new_project[] = $value->nid;
      $date_last_comment[] = $value->created;
      $count_project++;
    }
  }
  // print "<pre>";
  // print_r("-----");
  // print "</pre>";
  // print "<pre>";
  // print_r($new_project);
  // print "</pre>";
  $get_result_project = array();
  $i = 0;
  $index_last_commemt = 0;
  foreach ($new_project as $key => $value) {
    $node = node_load($value);
    $get_result_project[$i]['nid'] = $node->nid;
    $get_result_project[$i]['title'] = $node->title;
    $get_result_project[$i]['icon'] = changemaker_check_icon_um($node->uid);
    $get_result_project[$i]['name'] = changemakers_get_contact($node->uid);
    $get_result_project[$i]['path'] = drupal_get_path_alias("node/".$node->nid);
    if($node->field_project_image['und'][0]['filename']){
      $get_result_project[$i]['image'] = image_style_url("cover-image", $node->field_project_image['und'][0]['uri']);
    }else{
      $get_result_project[$i]['image'] = "/sites/all/themes/changemakers/images/project1.jpg";
    }
     

    if(count($node->field_problem_topic['und']) != 0)
    {
      if($node->field_problem_topic['und'][0]['tid'] == 171 ){
        $get_result_project[$i]['problem'] = "All";
      }else{
        $p = 0;
        foreach ($node->field_problem_topic['und'] as $key => $value) {
          if($p == 0){
            $text_p = taxonomy_term_load($node->field_problem_topic['und'][$p]['tid'])->name;
          }else{
            $text_p = $text_p.",".taxonomy_term_load($node->field_problem_topic['und'][$p]['tid'])->name;
          }
          $p++;
        }
        $get_result_project[$i]['problem'] = $text_p;
      }
      // print "<pre>";
      // print_r($get_result_project[$i]['problem']);
      // print "</pre>";
    }else{
      $get_result_project[$i]['problem'] = "";
    }

    if(count($node->field_project_target['und']) != 0)
    {
      if($node->field_problem_topic['und'][0]['tid'] == 172 ){
        $get_result_project[$i]['target'] = "All";
      }else{
        $p = 0;
        foreach ($node->field_project_target['und'] as $key => $value) {
          if($p == 0){
            $text_t = taxonomy_term_load($node->field_project_target['und'][$p]['tid'])->name;
          }else{
            $text_t = $text_t.",".taxonomy_term_load($node->field_project_target['und'][$p]['tid'])->name;
          }
          $p++;
        }
        $get_result_project[$i]['target'] = $text_t;
      }
      // print "<pre>";
      // print_r($get_result_project[$i]['problem']);
      // print "</pre>";
    }else{
      $get_result_project[$i]['target'] = "";
    }
    //$get_result_project[$i]['problem'] = $node->field_problem_topic
    //$get_result_project[$i]['target'] = changemakers_get_contact($node->uid);
    if($i < 3){
      $get_result_project[$i]['date_project'] = timeAgo(date("y-m-d H:i:s ",$node->created));
    }else{
      $get_result_project[$i]['date_project'] = timeAgo(date("y-m-d H:i:s ",$date_last_comment[$index_last_commemt]));
      $index_last_commemt++;
    }

    $get_result_project[$i]['body'] = strip_tags($node->body['und'][0]['value']);

    $i++;

  }

  // print "<pre>";
  // print_r($new_project);
  // print "</pre>";

  
  return $get_result_project;
}

function changemakers_load_guideline(){
  //echo file_get_contents("/sites/all/themes/changemakers/files/guideline.pdf");
  header("Content-type:application/pdf");

  // It will be called downloaded.pdf
  header("Content-Disposition:attachment;filename=guideline.pdf");

  // The PDF source is in original.pdf
  readfile("sites/all/themes/changemakers/files/guideline.pdf");
}
function user_unique_username($name, $uid = NULL) {
  // Iterate until we find a unique name.
  $i = 0;
  do {
    $new_name = empty($i) ? $name : $name . $i;
    if ($uid) {
      $found = db_query_range("SELECT uid from {users} WHERE uid <> :uid AND name = :name", 0, 1, array(':uid' => $uid, ':name' => $new_name))->fetchAssoc();
    }
    else {
      $found = db_query_range("SELECT uid from {users} WHERE name = :name", 0, 1, array(':name' => $new_name))->fetchAssoc();
    }

    $i++;
  } while (!empty($found));

  return $new_name;
}
function API_changemakers_alias_url()
{

  echo $path = drupal_lookup_path('alias',"node/".$node_id);
  // $alias = "howtoproject";
  // echo "<pre>";
  // print_r($node);
  // echo "</pre>";
  // $alias = drupal_get_path_alias($path);
  // echo "</pre>";
  // print_r($alias);
  // echo "</pre>";
  
  // path_set_alias($path, $alternate_url, 0, '');
  // $path = array(
  // 'source' => $path,
  // 'alias' => $alias,  // Any alias that you want to set.
  // //'language' => $lang_code,  // Optional, if you are working on a multilingual site.
  //   );
  //  path_save($path);
  $json = file_get_contents('https://schoolofchangemakers.com/cmk_project_rewrite.php');
  echo 1;
$obj = json_decode($json);
echo $cnt_ob = count($obj);
 for ($i=0; $i < $cnt_ob ; $i++) { 
  $title = $obj[$i]->title;
  $type = "project";
    $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = :type", array(":title"=> $title, ":type"=> $type));  
$nid = $result->fetchField();

 if(!empty($obj[$i]->url_rewrite)):
        $source  = "node/". $nid ;
  $query = db_select('url_alias', 'ua');
  $result = $query->fields('ua' )
  ->condition( 'source', $source , '=')
  ->execute();
  $data = $result->fetchAssoc();
  // echo $data['pid'];
    
    if(!empty($obj[$i]->url_rewrite)){
      if(!empty(!$data['pid'])){
        $alias = $obj[$i]->url_rewrite;
         db_query("UPDATE url_alias SET alias = '$alias' WHERE pid = '$data[pid]'");
       }else{
        db_query("INSERT INTO url_alias (source, alias, language) VALUES ('node/$nid', '$alias', 'und')");
       }
     
       echo "<br>Nid : $nid <br>";
      echo $alias;
     
    }

  endif;
  }
 
 
}
function API_changemakers_upload_file()
{
  header('Content-type: text/html; charset=UTF-8');

  $json = file_get_contents('https://schoolofchangemakers.com/cmk_campaign.php');
  $obj = json_decode($json);
  $cnt_ob = count($obj);
   for ($i=0; $i < $cnt_ob ; $i++) { 
    $title = $obj[$i]->title;
    $type = "campaign";
      $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = :type", array(":title"=> $title, ":type"=> $type));  
  $nid = $result->fetchField();
  if(!empty($nid)){
      echo "$title<br>";
      echo "Nid : $nid <br>";
      echo "<hr><br>";
      $node = node_load($nid);
     // $alias = drupal_get_path_alias('node/'.$nid);
     //  if(!empty($obj[$i]->url_rewrite)){
     //     echo "Redirect 301 /".$obj[$i]->url_rewrite;
     //    echo " https://schoolofchangemakers.com/$alias <br><br>";
     //  }else{
     //    $url_rewrite = "";
     //  }

   

    $node->field_id_old_content['und'][0]['value'] = $obj[$i]->id;
    node_save($node);
    $num_updated = db_update('node') // Table name no longer needs {}
          ->fields(array(
            'changed' => $obj[$i]->changed,
          ))
          ->condition('nid', $node->nid, '=')
          ->execute();
  }
   // if(!empty($obj[$i]->file)):
   //  echo "$title<br>";
   //    $z = 0;
   //    if(!empty($nid)){
        
   //      echo "Nid : $nid <br>";
   //        foreach ($obj[$i]->file as $key => $value) {
   //           // print_r($value);
   //           // echo $value->author_id;
   //         $url = $value->url;
   //          $name = $value->name;
   //          $url= str_replace(' ', '%20', $url);
   //          $url= str_replace('#', '%23', $url);
             
   //          //I have used picture folder to store images using image field settings
   //         // $image = file_get_contents($url); // this is a PHP function to get a string representation of the image file

   //         //    $destination = "public://$name"; // a stream wrapper path where you want this image to reside on your file system including the desired filename

   //         //    $file = file_save_data($image, $destination, FILE_EXISTS_REPLACE);

   //         //    if (is_object($file)) { // if you get back a Drupal $file object, everything went as expected so make the status permenant
   //         //       $file->status = 1;
   //         //       $file = file_save($file);
   //         //    }
   //          $file_info = system_retrieve_file($url, 'public://', TRUE);

   //           $file = db_update('file_managed') // Table name no longer needs {}
   //          ->fields(array(
   //            'filename' => $value->name,
   //          ))
   //          ->condition('fid', $file_info->fid, '=')
   //          ->execute();

   //          $node->field_event_document['und'][$z]['fid']=$file_info->fid;
   //          $node->field_event_document['und'][$z]['display']=1;
   //          $z++;
   //          echo "$z. ".$value->name."<br>";
          
   //        }
   //         //$node->field_id_old_content['und'][0]['value'] = $obj[$i]->id;
   //        node_save($node);
   //        $num_updated = db_update('node') // Table name no longer needs {}
   //        ->fields(array(
   //          'changed' => $obj[$i]->changed,
   //          'created' => $obj[$i]->created,
   //        ))
   //        ->condition('nid', $node->nid, '=')
   //        ->execute();
   //        echo "<hr><br>";
   //    }
      
   //  endif;
    }
 
}

?>
 
 
